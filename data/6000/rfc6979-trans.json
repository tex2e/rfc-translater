{
  "title": {
    "text": "RFC 6979 - Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA)",
    "ja": "RFC 6979 - デジタル署名アルゴリズム（DSA）と楕円曲線デジタル署名アルゴリズム（ECDSA）の決定的使用法"
  },
  "number": 6979,
  "created_at": "2020-09-04 17:15:51.341019+09:00",
  "updated_by": "自動生成＆有志による翻訳・編集",
  "contents": [
    {
      "indent": 0,
      "text": "Independent Submission                                         T. Pornin\nRequest for Comments: 6979                                   August 2013\nCategory: Informational\nISSN: 2070-1721",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 4,
      "text": "Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA)",
      "ja": "デジタル署名アルゴリズム（DSA）と楕円曲線デジタル署名アルゴリズム（ECDSA）の決定的使用法"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document defines a deterministic digital signature generation procedure. Such signatures are compatible with standard Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA) digital signatures and can be processed with unmodified verifiers, which need not be aware of the procedure described therein. Deterministic signatures retain the cryptographic security features associated with digital signatures but can be more easily implemented in various environments, since they do not need access to a source of high-quality randomness.",
      "ja": "このドキュメントでは、決定的なデジタル署名の生成手順を定義しています。このような署名は、標準のデジタル署名アルゴリズム（DSA）および楕円曲線デジタル署名アルゴリズム（ECDSA）のデジタル署名と互換性があり、変更されていない検証者で処理できます。決定的署名は、デジタル署名に関連する暗号化セキュリティ機能を保持しますが、高品質のランダム性のソースにアクセスする必要がないため、さまざまな環境でより簡単に実装できます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはInternet Standards Trackの仕様ではありません。情報提供を目的として公開されています。"
    },
    {
      "indent": 3,
      "text": "This is a contribution to the RFC Series, independently of any other RFC stream. The RFC Editor has chosen to publish this document at its discretion and makes no statement about its value for implementation or deployment. Documents approved for publication by the RFC Editor are not a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "これは、他のRFCストリームとは無関係に、RFCシリーズへの貢献です。 RFCエディターは、このドキュメントを独自の裁量で公開することを選択し、実装または展開に対するその価値については何も述べていません。 RFC Editorによって公開が承認されたドキュメントは、どのレベルのインターネット標準の候補にもなりません。 RFC 5741のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc6979.",
      "ja": "このドキュメントの現在のステータス、エラータ、およびフィードバックの提供方法に関する情報は、http://www.rfc-editor.org/info/rfc6979で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2013 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2013 IETF Trustおよびドキュメントの作成者として識別された人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "この文書は、BCP 78およびこの文書の発行日に有効なIETF文書に関するIETFトラストの法的規定（http://trustee.ietf.org/license-info）の対象となります。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1. Introduction ....................................................3\n   1.1. Requirements Language ......................................4\n2. DSA and ECDSA Notations .........................................4\n   2.1. Key Parameters .............................................5\n   2.2. Key Pairs ..................................................5\n   2.3. Integer Conversions ........................................6\n        2.3.1. Bits and Octets .....................................6\n        2.3.2. Bit String to Integer ...............................6\n        2.3.3. Integer to Octet String .............................7\n        2.3.4. Bit String to Octet String ..........................7\n        2.3.5. Usage ...............................................8\n   2.4. Signature Generation .......................................8\n3. Deterministic DSA and ECDSA ....................................10\n   3.1. Building Blocks ...........................................10\n        3.1.1. HMAC ...............................................10\n   3.2. Generation of k ...........................................10\n   3.3. Alternate Description of the Generation of k ..............12\n   3.4. Usage Notes ...............................................13\n   3.5. Rationale .................................................13\n   3.6. Variants ..................................................14\n4. Security Considerations ........................................15\n5. Intellectual Property Status ...................................17\n6. References .....................................................17\n   6.1. Normative References ......................................17\n   6.2. Informative References ....................................18\nAppendix A.  Examples .............................................20\n  A.1.  Detailed Example ..........................................20\n    A.1.1.  Key Pair ..............................................20\n    A.1.2.  Generation of k .......................................20\n    A.1.3.  Signature .............................................23\n  A.2.  Test Vectors ..............................................24\n    A.2.1.  DSA, 1024 Bits ........................................25\n    A.2.2.  DSA, 2048 Bits ........................................27\n    A.2.3.  ECDSA, 192 Bits (Prime Field) .........................29\n    A.2.4.  ECDSA, 224 Bits (Prime Field) .........................31\n    A.2.5.  ECDSA, 256 Bits (Prime Field) .........................33\n    A.2.6.  ECDSA, 384 Bits (Prime Field) .........................35\n    A.2.7.  ECDSA, 521 Bits (Prime Field) .........................38\n    A.2.8.  ECDSA, 163 Bits (Binary Field, Koblitz Curve) .........42\n    A.2.9.  ECDSA, 233 Bits (Binary Field, Koblitz Curve) .........44\n    A.2.10. ECDSA, 283 Bits (Binary Field, Koblitz Curve) .........46\n    A.2.11. ECDSA, 409 Bits (Binary Field, Koblitz Curve) .........49\n    A.2.12. ECDSA, 571 Bits (Binary Field, Koblitz Curve) .........52\n    A.2.13. ECDSA, 163 Bits (Binary Field, Pseudorandom Curve) ....56\n    A.2.14. ECDSA, 233 Bits (Binary Field, Pseudorandom Curve) ....58\n    A.2.15. ECDSA, 283 Bits (Binary Field, Pseudorandom Curve) ....60\n    A.2.16. ECDSA, 409 Bits (Binary Field, Pseudorandom Curve) ....63\n    A.2.17. ECDSA, 571 Bits (Binary Field, Pseudorandom Curve) ....66\n  A.3.  Sample Code ...............................................70",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "DSA [FIPS-186-4] and ECDSA [X9.62] are two standard digital signature schemes. They provide data integrity and verifiable authenticity in various protocols.",
      "ja": "DSA [FIPS-186-4]とECDSA [X9.62]は、2つの標準デジタル署名方式です。これらは、さまざまなプロトコルでデータの整合性と検証可能な信頼性を提供します。"
    },
    {
      "indent": 3,
      "text": "One characteristic of DSA and ECDSA is that they need to produce, for each signature generation, a fresh random value (hereafter designated as k). For effective security, k must be chosen randomly and uniformly from a set of modular integers, using a cryptographically secure process. Even slight biases in that process may be turned into attacks on the signature schemes.",
      "ja": "DSAとECDSAの特徴の1つは、署名を生成するたびに、新しい乱数値（以降、kと指定）を生成する必要があることです。効果的なセキュリティのためには、暗号化された安全なプロセスを使用して、モジュラー整数のセットからランダムかつ均一にkを選択する必要があります。そのプロセスのわずかなバイアスでさえ、署名スキームへの攻撃に変わる可能性があります。"
    },
    {
      "indent": 3,
      "text": "The need for a cryptographically secure source of randomness proves to be a hindrance to deployment of DSA and ECDSA signature schemes in some architectures in which secure random number generation is challenging, in particular, embedded systems such as smartcards. In those systems, the RSA signature algorithm, used as specified in Public-Key Cryptography Standards (PKCS) #1 [RFC3447] (with \"type 1\" padding, not the Probabilistic Signature Scheme (PSS)) and ISO 9796-2 [ISO-9796-2], is often preferred, even though it is computationally more expensive, because RSA (with such padding schemes) is deterministic and thus does not require a source of randomness.",
      "ja": "暗号的に安全な乱数源の必要性は、安全な乱数生成が困難な一部のアーキテクチャ、特にスマートカードなどの組み込みシステムにおいて、DSAおよびECDSA署名方式の導入を阻害する要因となることが分かっています。これらのシステムでは、公開鍵暗号標準（PKCS）#1 [RFC3447]（確率的署名方式（PSS）ではなく「タイプ1」パディングを使用）およびISO 9796-2 [ISO-9796-2]で規定されているRSA署名アルゴリズムが、計算コストが高いにもかかわらず、しばしば好まれます。RSA（このようなパディング方式を使用）は決定論的であるため、乱数源を必要としないからです。"
    },
    {
      "indent": 3,
      "text": "The randomized nature of DSA and ECDSA also makes implementations harder to test. Automatic tests cannot reliably detect whether the implementation uses a source of randomness of high enough quality. This makes the implementation process more vulnerable to catastrophic failures, often discovered after the system has been deployed and successfully attacked.",
      "ja": "DSAおよびECDSAのランダム化された性質により、実装のテストも困難になります。自動テストでは、実装が十分に高い品質のランダム性のソースを使用しているかどうかを確実に検出できません。これにより、実装プロセスは致命的な障害に対してより脆弱になり、多くの場合、システムが展開され、攻撃に成功した後に発見されます。"
    },
    {
      "indent": 3,
      "text": "It is possible to turn DSA and ECDSA into deterministic schemes by using a deterministic process for generating the \"random\" value k. That process must fulfill some cryptographic characteristics in order to maintain the properties of verifiability and unforgeability expected from signature schemes; namely, for whoever does not know the signature private key, the mapping from input messages to the corresponding k values must be computationally indistinguishable from what a randomly and uniformly chosen function (from the set of messages to the set of possible k values) would return.",
      "ja": "「ランダムな」値kを生成するための決定論的プロセスを使用することにより、DSAおよびECDSAを決定論的スキームに変えることが可能です。そのプロセスは、署名方式から期待される検証可能性と偽造不可性の特性を維持するために、いくつかの暗号特性を満たさなければなりません。つまり、署名秘密鍵を知らない人にとって、入力メッセージから対応するk値へのマッピングは、ランダムに均一に選択された関数（メッセージのセットから可能なk値のセットへ）が返すものと計算上区別できない必要があります。"
    },
    {
      "indent": 3,
      "text": "This document describes such a procedure. It has the following features:",
      "ja": "このドキュメントでは、そのような手順について説明します。次の機能があります。"
    },
    {
      "indent": 3,
      "text": "o Produced signatures remain fully compatible with plain DSA and ECDSA. Entities that verify the signatures need not be changed or even be aware of the process used to generate k.",
      "ja": "o 作成された署名は、プレーンDSAおよびECDSAとの完全な互換性を維持しています。署名を検証するエンティティは変更する必要がなく、kを生成するために使用されるプロセスを認識する必要さえありません。"
    },
    {
      "indent": 3,
      "text": "o Key pair generation is not altered. Existing private keys can be used with deterministic DSA and ECDSA.",
      "ja": "o 鍵ペアの生成は変更されません。既存の秘密鍵は、確定的DSAおよびECDSAで使用できます。"
    },
    {
      "indent": 3,
      "text": "o Using deterministic DSA and ECDSA implies no extra storage requirement of any secret or public value.",
      "ja": "o 確定的DSAおよびECDSAの使用は、秘密または公開の値の追加のストレージ要件を意味しません。"
    },
    {
      "indent": 3,
      "text": "o Deterministic DSA and ECDSA can be applied over the same inputs as plain DSA and ECDSA, namely a hash value computed over the message that is to be signed, with a cryptographically secure hash function.",
      "ja": "o 確定的DSAおよびECDSAは、プレーンDSAおよびECDSAと同じ入力、つまり、暗号化された安全なハッシュ関数を使用して、署名されるメッセージに対して計算されたハッシュ値に適用できます。"
    },
    {
      "indent": 3,
      "text": "Some relatively arbitrary choices were taken in the definition of deterministic (EC)DSA as specified in this document; this was done in order to make it as universally applicable as possible, so as to maximize usefulness of included test vectors. See Section 3.6 for a discussion of some possible variants.",
      "ja": "このドキュメントで指定されているように、決定論的（EC）DSAの定義では、比較的恣意的な選択がいくつか行われました。これは、含まれるテストベクトルの有用性を最大限に高めるために、可能な限り広く適用できるようにするために行われました。考えられるいくつかのバリアントの説明については、セクション3.6を参照してください。"
    },
    {
      "indent": 3,
      "text": "It shall be noted that key pair generation still requires a source of randomness. In embedded systems where quality of randomness is an issue, it can often be arranged that key pair generation occurs within more controlled conditions (e.g., during a special smartcard initialization procedure or under physical control of sworn agents) or the key might even be generated elsewhere and imported in the device. Deterministic DSA and ECDSA only deal with the need for randomness at the time of signature generation.",
      "ja": "鍵ペアの生成には、依然としてランダム性のソースが必要であることに注意してください。ランダム性の品質が問題となる組み込みシステムでは、キーペアの生成がより制御された条件内（たとえば、特別なスマートカードの初期化手順中または宣誓エージェントの物理的制御下）で発生するか、またはキーが別の場所で生成される可能性があることがよくあります。デバイスにインポートされます。確定的DSAおよびECDSAは、署名生成時のランダム性の必要性のみを扱います。"
    },
    {
      "indent": 0,
      "text": "1.1. Requirements Language",
      "section_title": true,
      "ja": "1.1. 要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119 [RFC2119].",
      "ja": "このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は、 RFC 2119 [RFC2119]で説明されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. DSA and ECDSA Notations",
      "section_title": true,
      "ja": "2. DSAおよびECDSA表記"
    },
    {
      "indent": 3,
      "text": "In this section, we succinctly describe DSA and ECDSA and define our notations. The complete specifications for DSA and ECDSA can be found in [FIPS-186-4] and [X9.62], respectively.",
      "ja": "このセクションでは、DSAとECDSAを簡潔に説明し、表記法を定義します。 DSAとECDSAの完全な仕様は、それぞれ[FIPS-186-4]と[X9.62]にあります。"
    },
    {
      "indent": 0,
      "text": "2.1. Key Parameters",
      "section_title": true,
      "ja": "2.1. 主なパラメータ"
    },
    {
      "indent": 3,
      "text": "DSA and ECDSA work over a large group of prime size, in which the group operation is easy to compute, but the discrete logarithm is computationally infeasible with existing and foreseeable technology. The definition of the group is called the \"key parameters\". Key parameters may be shared between different key pairs with no ill effect on security; this is the usual case with ECDSA in particular.",
      "ja": "DSAとECDSAは、素数サイズの大きなグループで機能します。この場合、グループ演算は簡単に計算できますが、離散対数は、既存の予測可能なテクノロジーでは計算上実行不可能です。グループの定義は「キーパラメータ」と呼ばれます。キーパラメータは、セキュリティに悪影響を与えることなく、異なるキーペア間で共有できます。これは、特にECDSAの通常のケースです。"
    },
    {
      "indent": 3,
      "text": "DSA uses the following key parameters:",
      "ja": "DSAは以下の主要なパラメーターを使用します。"
    },
    {
      "indent": 3,
      "text": "p : a large prime number (at least 1024 bits)",
      "ja": "p : 大きな素数（少なくとも1024ビット）"
    },
    {
      "indent": 3,
      "text": "q : a sufficiently large prime number (at least 160 bits) that is also a divisor of p-1",
      "ja": "q : p-1の約数でもある十分に大きな素数（少なくとも160ビット）"
    },
    {
      "indent": 3,
      "text": "g : a generator for the multiplicative subgroup of order q of integers modulo p",
      "ja": "g : pを法とする整数の次数qの乗法サブグループのジェネレータ"
    },
    {
      "indent": 3,
      "text": "The group on which DSA will be computed consists of the values 'g^j mod p', where '^' denotes exponentiation and j ranges from 0 to q-1 (inclusive). The size of the group is q.",
      "ja": "DSAが計算されるグループは、値 'g^j mod p'で構成されます。ここで、 '^'は指数を示し、jの範囲は0〜q-1（両端を含む）です。グループのサイズはqです。"
    },
    {
      "indent": 3,
      "text": "ECDSA uses the following key parameters:",
      "ja": "ECDSAは以下の主要なパラメーターを使用します。"
    },
    {
      "indent": 3,
      "text": "E : an elliptic curve, defined over a given finite field",
      "ja": "E : 与えられた有限体上で定義された楕円曲線"
    },
    {
      "indent": 3,
      "text": "q : a sufficiently large prime number (at least 160 bits) that is a divisor of the curve order",
      "ja": "q : 曲線次数の約数である十分に大きな素数（少なくとも160ビット）"
    },
    {
      "indent": 3,
      "text": "G : a point of E, of order q",
      "ja": "G : 位数qの楕円曲線E上の点"
    },
    {
      "indent": 3,
      "text": "The group on which ECDSA will be computed consists of the curve points jG (multiplication of point G by integer j) where j ranges from 0 to q-1. G is such that qG = 0 (the \"point at infinity\" on the curve E). The size of the group is q. Note that these notations slightly differ from those described in [X9.62]; we use them in order to match those used for DSA.",
      "ja": "ECDSAが計算されるグループは、カーブポイントjG（ポイントGの整数jによる乗算）で構成されます。jの範囲は0〜q-1です。 GはqG = 0（曲線Eの「無限遠点」）です。グループのサイズはqです。これらの表記法は、[X9.62]で説明されている表記法とは少し異なることに注意してください。 DSAに使用されるものと一致させるために使用します。"
    },
    {
      "indent": 0,
      "text": "2.2. Key Pairs",
      "section_title": true,
      "ja": "2.2. キーペア"
    },
    {
      "indent": 3,
      "text": "A DSA or ECDSA private key is an integer x taken modulo q. The relevant standards prescribe that x shall not be 0; hence, x is an integer in the range [1, q-1].",
      "ja": "DSAまたはECDSA秘密鍵は、qを法として取られる整数xです。関連規格は、xを0にしないことを規定しています。したがって、xは[1、q-1]の範囲の整数です。"
    },
    {
      "indent": 3,
      "text": "A DSA or ECDSA public key is computed from the private key x and the key parameters:",
      "ja": "DSAまたはECDSA公開鍵は、秘密鍵xと鍵パラメーターから計算されます。"
    },
    {
      "indent": 3,
      "text": "o For DSA, the public key is the integer: y = g^x mod p",
      "ja": "o DSAの場合、公開鍵は整数です：y = g^x mod p"
    },
    {
      "indent": 3,
      "text": "o For ECDSA, the public key is the curve point: U = xG",
      "ja": "o ECDSAの場合、公開鍵はカーブポイントです：U = xG"
    },
    {
      "indent": 0,
      "text": "2.3. Integer Conversions",
      "section_title": true,
      "ja": "2.3. 整数変換"
    },
    {
      "indent": 3,
      "text": "Let qlen be the binary length of q. qlen is the smallest integer such that q is less than 2^qlen. This is the size of the binary representation of q without a sign bit (note that q, being a big prime, is odd, thus avoiding any ambiguity about the length of any integer equal to a power of 2). We define five conversion functions, which work on strings of bits, octets, and integers modulo q. qlen is the main parameter for these conversions.",
      "ja": "qlenをqのバイナリ長とする。 qlenは、qが2^qlenより小さいような最小の整数です。これは、符号ビットなしのqのバイナリ表現のサイズです（大きな素数であるqは奇数なので、2のべき乗に等しい整数の長さについてのあいまいさを回避します）。ビット、オクテット、およびqを法とする整数のストリングで機能する5つの変換関数を定義します。 qlenは、これらの変換の主要なパラメーターです。"
    },
    {
      "indent": 3,
      "text": "In the following subsections, we use two other lengths, called blen and rlen. rlen is equal to qlen, rounded up to the next multiple of 8 (if qlen is already a multiple of 8, then rlen equals qlen; otherwise, rlen is slightly larger, up to qlen+7). Note that rlen is unrelated to the value r, the first half of a generated signature. blen is the length (in bits) of an input sequence of bits and may vary between calls. blen may be smaller than, equal to, or larger than qlen.",
      "ja": "以下のサブセクションでは、blenとrlenと呼ばれる他の2つの長さを使用します。 rlenはqlenに等しく、次の8の倍数に切り上げられます（qlenがすでに8の倍数である場合、rlenはqlenに等しくなります。それ以外の場合、rlenはわずかに大きく、qlen + 7まで）。 rlenは、生成された署名の前半である値rとは関係がないことに注意してください。 blenは、ビットの入力シーケンスの長さ（ビット単位）であり、呼び出し間で異なる場合があります。 blenは、qlenよりも小さい、等しい、または大きい場合があります。"
    },
    {
      "indent": 0,
      "text": "2.3.1. Bits and Octets",
      "section_title": true,
      "ja": "2.3.1. ビットとオクテット"
    },
    {
      "indent": 3,
      "text": "Formally, all operations are defined on sequences of bits. A sequence is ordered; the first bit is said to be leftmost, while the last bit is rightmost.",
      "ja": "形式的には、すべての操作はビットのシーケンスで定義されます。シーケンスが順序付けられます。最初のビットは左端で、最後のビットは右端です。"
    },
    {
      "indent": 3,
      "text": "On most software systems, bits are grouped into octets (sequences of eight bits). Binary data, e.g., the output of a hash function, is available as a sequence of octets. Whenever applicable, we consider that bits within an octet are ordered from most significant to least significant: the first (leftmost) bit within an octet has numerical value 128, while the last (rightmost) has numerical value 1.",
      "ja": "ほとんどのソフトウェアシステムでは、ビットはオクテット（8ビットのシーケンス）にグループ化されます。バイナリデータ（ハッシュ関数の出力など）は、オクテットのシーケンスとして利用できます。該当する場合は常に、オクテット内のビットは最上位から最下位の順に並べられていると見なします。オクテット内の最初（左端）のビットは数値128、最後の（右端）のビットは1です。"
    },
    {
      "indent": 0,
      "text": "2.3.2. Bit String to Integer",
      "section_title": true,
      "ja": "2.3.2. 整数へのビット文字列"
    },
    {
      "indent": 0,
      "text": " The bits2int transform takes as input a sequence of blen bits and outputs a non-negative integer that is less than 2^qlen. It consists of the following steps: 1. The sequence is first truncated or expanded to length qlen:",
      "ja": "bits2int変換は、入力としてblenビットのシーケンスを取り、2^qlen未満の非負の整数を出力します。これは次の手順で構成されます。1.シーケンスは最初に切り捨てられるか、長さqlenに拡張されます。"
    },
    {
      "indent": 7,
      "text": "* if qlen < blen, then the qlen leftmost bits are kept, and subsequent bits are discarded;",
      "ja": "* qlen <blenの場合、qlenの左端のビットが保持され、後続のビットは破棄されます。"
    },
    {
      "indent": 7,
      "text": "* otherwise, qlen-blen bits (of value zero) are added to the left of the sequence (i.e., before the input bits in the sequence order).",
      "ja": "* それ以外の場合は、qlen-blenビット（値がゼロ）がシーケンスの左側に追加されます（つまり、シーケンス順の入力ビットの前）。"
    },
    {
      "indent": 3,
      "text": "2. The resulting sequence is then converted to an integer value using the big-endian convention: if input bits are called b_0 (leftmost) to b_(qlen-1) (rightmost), then the resulting value is:",
      "ja": "2. 結果のシーケンスは、ビッグエンディアン規則を使用して整数値に変換されます。入力ビットがb_0（左端）からb_（qlen-1）（右端）と呼ばれる場合、結果の値は次のようになります。"
    },
    {
      "indent": 10,
      "text": "b_0*2^(qlen-1) + b_1*2^(qlen-2) + ... + b_(qlen-1)*2^0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The bits2int transform can also be described in the following way: the input bit sequence (of length blen) is transformed into an integer using the big-endian convention. Then, if blen is greater than qlen, the resulting integer is divided by two to the power blen-qlen (Euclidian division: the remainder is discarded); in many software implementations of arithmetics on big integers, that division is equivalent to a \"right shift\" by blen-qlen bits.",
      "ja": "bits2int変換は、次のように記述することもできます。入力ビットシーケンス（長さblen）は、ビッグエンディアン規則を使用して整数に変換されます。次に、blenがqlenより大きい場合、結果の整数は2のblen-qlenで除算されます（ユークリッド除算：剰余は破棄されます）。大きな整数の算術の多くのソフトウェア実装では、その除算はblen-qlenビットによる「右シフト」に相当します。"
    },
    {
      "indent": 0,
      "text": "2.3.3. Integer to Octet String",
      "section_title": true,
      "ja": "2.3.3. 整数からオクテット文字列へ"
    },
    {
      "indent": 3,
      "text": "An integer value x less than q (and, in particular, a value that has been taken modulo q) can be converted into a sequence of rlen bits, where rlen = 8*ceil(qlen/8). This is the sequence of bits obtained by big-endian encoding. In other words, the sequence bits x_i (for i ranging from 0 to rlen-1) are such that:",
      "ja": "qより小さい整数値x（および、特に、qを法として取られた値）は、rlenビットのシーケンスに変換できます。ここで、rlen = 8 * ceil（qlen / 8）です。これは、ビッグエンディアンエンコーディングによって取得されたビットのシーケンスです。つまり、シーケンスビットx_i（iの範囲は0からrlen-1まで）は次のようになります。"
    },
    {
      "indent": 6,
      "text": "x = x_0*2^(rlen-1) + x_1*2^(rlen-2) + ... + x_(rlen-1)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "We call this transform int2octets. Since rlen is a multiple of 8 (the smallest multiple of 8 that is not smaller than qlen), then the resulting sequence of bits is also a sequence of octets, hence the name.",
      "ja": "この変換をint2octetsと呼びます。 rlenは8の倍数（qlen以上の最小の8の倍数）であるため、結果として得られるビットのシーケンスもオクテットのシーケンス、つまり名前になります。"
    },
    {
      "indent": 0,
      "text": "2.3.4. Bit String to Octet String",
      "section_title": true,
      "ja": "2.3.4. ビット文字列からオクテット文字列"
    },
    {
      "indent": 3,
      "text": "The bits2octets transform takes as input a sequence of blen bits and outputs a sequence of rlen bits. It consists of the following steps:",
      "ja": "bits2octets変換は、入力としてblenビットのシーケンスを取り、rlenビットのシーケンスを出力します。次の手順で構成されます。"
    },
    {
      "indent": 3,
      "text": "1. The input sequence b is converted into an integer value z1 through the bits2int transform:",
      "ja": "1. 入力シーケンスbは、bits2int変換によって整数値z1に変換されます。"
    },
    {
      "indent": 10,
      "text": "z1 = bits2int(b)",
      "ja": "z1 = bits2int（b）"
    },
    {
      "indent": 3,
      "text": "2. z1 is reduced modulo q, yielding z2 (an integer between 0 and q-1, inclusive):",
      "ja": "2. z1はqを法として縮小され、z2（0からq-1までの整数）を生成します。"
    },
    {
      "indent": 10,
      "text": "z2 = z1 mod q",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "Note that since z1 is less than 2^qlen, that modular reduction can be implemented with a simple conditional subtraction: z2 = z1-q if that value is non-negative; otherwise, z2 = z1.",
      "ja": "z1は2^qlen未満であるため、そのモジュラー削減は単純な条件付き減算で実装できることに注意してください。z2= z1-qその値が負でない場合。それ以外の場合、z2 = z1。"
    },
    {
      "indent": 3,
      "text": "3. z2 is transformed into a sequence of octets (a sequence of rlen bits) by applying int2octets.",
      "ja": "3. z2は、int2octetsを適用することにより、オクテットのシーケンス（rlenビットのシーケンス）に変換されます。"
    },
    {
      "indent": 0,
      "text": "2.3.5. Usage",
      "section_title": true,
      "ja": "2.3.5. 使用法"
    },
    {
      "indent": 3,
      "text": "It is worth noting that int2octets is not the reverse of bits2int, even for input sequences of length qlen: int2octets will add some bits on the left, while bits2int will discard some bits on the right. int2octets is the reverse of bits2int only when qlen is a multiple of 8 and bit sequences already have length qlen.",
      "ja": "長さqlenの入力シーケンスであっても、int2octetsはbits2intの逆ではないことに注意してください。int2octetsは左側にいくつかのビットを追加し、bits2intは右側にいくつかのビットを破棄します。 int2octetsは、qlenが8の倍数であり、ビットシーケンスの長さがすでにqlenである場合にのみ、bits2intの逆になります。"
    },
    {
      "indent": 3,
      "text": "bits2int is used during signature generation and verification in standard DSA and ECDSA to transform a hash value (computed over the input message) into an integer modulo q. That is, the integer obtained through bits2int is further reduced modulo q; since that integer is less than 2^qlen, that reduction can be performed with at most one subtraction.",
      "ja": "bits2intは、標準DSAおよびECDSAでの署名の生成および検証中に使用され、ハッシュ値（入力メッセージで計算された）をqを法とした整数に変換します。つまり、bits2intを介して取得された整数は、qを法としてさらに縮小されます。その整数は2^qlenより小さいため、その削減は最大で1つの減算で実行できます。"
    },
    {
      "indent": 3,
      "text": "int2octets is defined under the name \"Integer-to-OctetString\" in Section 2.3.7 of SEC 1 [SEC1]. It is used in the specification of the encoding of an ECDSA private key (x) within an ASN.1-based structure.",
      "ja": "int2octetsは、SEC 1 [SEC1]のセクション2.3.7で「Integer-to-OctetString」という名前で定義されています。これは、ASN.1ベースの構造内のECDSA秘密鍵（x）のエンコードの仕様で使用されます。"
    },
    {
      "indent": 3,
      "text": "bits2octets is not used in standard DSA or ECDSA. We will use it in the specification of deterministic (EC)DSA.",
      "ja": "bits2octetsは、標準DSAまたはECDSAでは使用されません。確定的（EC）DSAの仕様で使用します。"
    },
    {
      "indent": 0,
      "text": "2.4. Signature Generation",
      "section_title": true,
      "ja": "2.4. 署名の生成"
    },
    {
      "indent": 3,
      "text": "Signature generation uses a cryptographic hash function H and an input message m. The message is first processed by H, yielding the value H(m), which is a sequence of bits of length hlen. Normally, H is chosen such that its output length hlen is roughly equal to qlen, since the overall security of the signature scheme will depend on the smallest of hlen and qlen; however, the relevant standards support all combinations of hlen and qlen.",
      "ja": "署名の生成では、暗号化ハッシュ関数Hと入力メッセージmを使用します。メッセージはまずHによって処理され、長さhlenのビットのシーケンスである値H（m）が生成されます。通常、Hはその出力長hlenがqlenにほぼ等しくなるように選択されます。これは、署名方式の全体的なセキュリティがhlenとqlenの最小値に依存するためです。ただし、関連する標準はhlenとqlenのすべての組み合わせをサポートしています。"
    },
    {
      "indent": 3,
      "text": "The following steps are then applied:",
      "ja": "次に、次の手順が適用されます。"
    },
    {
      "indent": 3,
      "text": "1. H(m) is transformed into an integer modulo q using the bits2int transform and an extra modular reduction:",
      "ja": "1. H（m）は、bits2int変換と追加のモジュラー削減を使用して、qを法とした整数に変換されます。"
    },
    {
      "indent": 10,
      "text": "h = bits2int(H(m)) mod q",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "As was noted in the description of bits2octets, the extra modular reduction is no more than a conditional subtraction.",
      "ja": "bits2octetsの説明で述べたように、追加のモジュラー削減は条件付き減算にすぎません。"
    },
    {
      "indent": 3,
      "text": "2. A random value modulo q, dubbed k, is generated. That value shall not be 0; hence, it lies in the [1, q-1] range. Most of the remainder of this document will revolve around the process used to generate k. In plain DSA or ECDSA, k should be selected through a random selection that chooses a value among the q-1 possible values with uniform probability.",
      "ja": "2. qを法とするkと呼ばれる乱数値が生成されます。その値は0であってはなりません。したがって、[1、q-1]の範囲にあります。このドキュメントの残りのほとんどは、kを生成するために使用されるプロセスを中心に展開します。プレーンDSAまたはECDSAでは、ランダムな選択によりkを選択する必要があります。ランダムな選択では、q-1の可能な値の中から一定の確率で値を選択します。"
    },
    {
      "indent": 3,
      "text": "3. A value r (modulo q) is computed from k and the key parameters:",
      "ja": "3. 値r（qを法とする）はkと主要なパラメーターから計算されます。"
    },
    {
      "indent": 7,
      "text": "* For DSA:",
      "ja": "* DSAの場合："
    },
    {
      "indent": 13,
      "text": "r = g^k mod p mod q",
      "ja": "r = g^k mod p mod q"
    },
    {
      "indent": 10,
      "text": "(The exponentiation is performed modulo p, yielding a number between 0 and p-1, which is then further reduced modulo q.)",
      "ja": "（累乗はpを法として実行され、0とp-1の間の数が得られ、さらにqを法として減じられます。）"
    },
    {
      "indent": 7,
      "text": "* For ECDSA: the point kG is computed; its X coordinate (a member of the field over which E is defined) is converted to an integer, which is reduced modulo q, yielding r.",
      "ja": "* ECDSAの場合：ポイントkGが計算されます。そのX座標（Eが定義されているフィールドのメンバー）は整数に変換され、qを法として縮小されてrになります。"
    },
    {
      "indent": 7,
      "text": "If r turns out to be zero, a new k should be selected and r computed again (this is an utterly improbable occurrence).",
      "ja": "rがゼロであることが判明した場合は、新しいkを選択し、rを再計算する必要があります（これはまったくあり得ないことです）。"
    },
    {
      "indent": 3,
      "text": "4. The value s (modulo q) is computed:",
      "ja": "4. 値s（qを法とする）が計算されます。"
    },
    {
      "indent": 10,
      "text": "s = (h+x*r)/k mod q",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "The pair (r, s) is the signature. How a signature is to be encoded is not covered by the DSA and ECDSA standards themselves; a common way is to use a DER-encoded ASN.1 structure (a SEQUENCE of two INTEGERs, for r and s, in that order).",
      "ja": "ペア（r、s）は署名です。署名のエンコード方法は、DSAおよびECDSA標準自体ではカバーされていません。一般的な方法は、DERエンコードされたASN.1構造を使用することです（rとsの順序で、2つのINTEGERのシーケンス）。"
    },
    {
      "indent": 0,
      "text": "3. Deterministic DSA and ECDSA",
      "section_title": true,
      "ja": "3. 確定的DSAおよびECDSA"
    },
    {
      "indent": 3,
      "text": "Deterministic (EC)DSA is the process of generating an (EC)DSA signature over an input message m by using the standard (EC)DSA signature generation process (discussed in the previous section), except that the value k, instead of being randomly generated, is obtained through the process described in this section.",
      "ja": "確定的（EC）DSAは、標準（EC）DSA署名生成プロセス（前のセクションで説明）を使用して、入力メッセージmで（EC）DSA署名を生成するプロセスです。ただし、ランダムにではなく値kを使用します。生成され、このセクションで説明するプロセスを通じて取得されます。"
    },
    {
      "indent": 3,
      "text": "We use the notations described in Section 2.",
      "ja": "セクション2で説明されている表記法を使用します。"
    },
    {
      "indent": 0,
      "text": "3.1. Building Blocks",
      "section_title": true,
      "ja": "3.1. ビルディングブロック"
    },
    {
      "indent": 0,
      "text": "3.1.1. HMAC",
      "section_title": true,
      "ja": "3.1.1. HMAC"
    },
    {
      "indent": 3,
      "text": "HMAC [RFC2104] is a construction of a Message Authentication Code using a hash function and a secret key. Here, we use HMAC with the same hash function H as the one used to process the input message prior to signature generation or verification.",
      "ja": "HMAC [RFC2104]は、ハッシュ関数と秘密鍵を使用したメッセージ認証コードの構築です。ここでは、署名の生成または検証の前に入力メッセージを処理するために使用されるものと同じハッシュ関数Hを持つHMACを使用します。"
    },
    {
      "indent": 3,
      "text": "We denote the process of applying HMAC with key K over data V by:",
      "ja": "データVにキーKを使用してHMACを適用するプロセスを次のように示します。"
    },
    {
      "indent": 6,
      "text": "HMAC_K(V)",
      "ja": "HMAC_K（V）"
    },
    {
      "indent": 3,
      "text": "which returns a sequence of bits of length hlen (the output length of the underlying hash function H).",
      "ja": "これは、長さhlen（基礎となるハッシュ関数Hの出力長）のビットのシーケンスを返します。"
    },
    {
      "indent": 0,
      "text": "3.2. Generation of k",
      "section_title": true,
      "ja": "3.2. kの生成"
    },
    {
      "indent": 3,
      "text": "Given the input message m, the following process is applied:",
      "ja": "入力メッセージmが与えられると、次のプロセスが適用されます。"
    },
    {
      "indent": 3,
      "text": "a. Process m through the hash function H, yielding:",
      "ja": "a. ハッシュ関数Hを介してmを処理すると、次のようになります。"
    },
    {
      "indent": 10,
      "text": "h1 = H(m)",
      "ja": "h1 = H（m）"
    },
    {
      "indent": 7,
      "text": "(h1 is a sequence of hlen bits).",
      "ja": "（h1はhlenビットのシーケンスです）。"
    },
    {
      "indent": 3,
      "text": "b. Set:",
      "ja": "b. セットする："
    },
    {
      "indent": 10,
      "text": "V = 0x01 0x01 0x01 ... 0x01",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "such that the length of V, in bits, is equal to 8*ceil(hlen/8). For instance, on an octet-based system, if H is SHA-256, then V is set to a sequence of 32 octets of value 1. Note that in this step and all subsequent steps, we use the same H function as the one used in step 'a' to process the input message; this choice will be discussed in more detail in Section 3.6.",
      "ja": "Vの長さ（ビット単位）が8 * ceil（hlen / 8）に等しくなるようにします。たとえば、オクテットベースのシステムでは、HがSHA-256の場合、Vは値1の32オクテットのシーケンスに設定されます。このステップと後続のすべてのステップでは、1と同じH関数を使用します。入力メッセージを処理するためにステップ 'a'で使用されます。この選択については、セクション3.6で詳しく説明します。"
    },
    {
      "indent": 3,
      "text": "c. Set:",
      "ja": "c. セットする："
    },
    {
      "indent": 10,
      "text": "K = 0x00 0x00 0x00 ... 0x00",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "such that the length of K, in bits, is equal to 8*ceil(hlen/8).",
      "ja": "Kの長さ（ビット）が8 * ceil（hlen / 8）に等しくなるようにします。"
    },
    {
      "indent": 3,
      "text": "d. Set:",
      "ja": "d. セットする："
    },
    {
      "indent": 10,
      "text": "K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1))",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "where '||' denotes concatenation. In other words, we compute HMAC with key K, over the concatenation of the following, in order: the current value of V, a sequence of eight bits of value 0, the encoding of the (EC)DSA private key x, and the hashed message (possibly truncated and extended as specified by the bits2octets transform). The HMAC result is the new value of K. Note that the private key x is in the [1, q-1] range, hence a proper input for int2octets, yielding rlen bits of output, i.e., an integral number of octets (rlen is a multiple of 8).",
      "ja": "ここで '||'連結を示します。つまり、Vの現在の値、値0の8ビットのシーケンス、（EC）DSA秘密鍵xのエンコーディング、およびハッシュされたメッセージ（bits2octets変換で指定されたように切り捨てられ、拡張される可能性があります）。 HMACの結果はKの新しい値です。秘密鍵xは[1、q-1]の範囲にあるため、int2octetsの適切な入力であり、出力のrlenビット、つまりオクテットの整数（rlenは8の倍数です）。"
    },
    {
      "indent": 3,
      "text": "e. Set:",
      "ja": "e. セットする："
    },
    {
      "indent": 10,
      "text": "V = HMAC_K(V)",
      "ja": "V = HMAC_K（V）"
    },
    {
      "indent": 3,
      "text": "f. Set:",
      "ja": "f. セットする："
    },
    {
      "indent": 10,
      "text": "K = HMAC_K(V || 0x01 || int2octets(x) || bits2octets(h1))",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "Note that the \"internal octet\" is 0x01 this time.",
      "ja": "今回は「内部オクテット」が0x01であることに注意してください。"
    },
    {
      "indent": 3,
      "text": "g. Set:",
      "ja": "g. セットする："
    },
    {
      "indent": 10,
      "text": "V = HMAC_K(V)",
      "ja": "V = HMAC_K（V）"
    },
    {
      "indent": 3,
      "text": "h. Apply the following algorithm until a proper value is found for k:",
      "ja": "h. kの適切な値が見つかるまで、次のアルゴリズムを適用します。"
    },
    {
      "indent": 7,
      "text": "1. Set T to the empty sequence. The length of T (in bits) is denoted tlen; thus, at that point, tlen = 0.",
      "ja": "1. Tを空のシーケンスに設定します。 Tの長さ（ビット単位）はtlenで示されます。したがって、その時点では、tlen = 0です。"
    },
    {
      "indent": 7,
      "text": "2. While tlen < qlen, do the following:",
      "ja": "2. tlen <qlenの間に、次のことを行います。"
    },
    {
      "indent": 14,
      "text": "V = HMAC_K(V)",
      "ja": "V = HMAC_K（V）"
    },
    {
      "indent": 14,
      "text": "T = T || V",
      "ja": "T = T || V"
    },
    {
      "indent": 7,
      "text": "3. Compute:",
      "ja": "3. 計算："
    },
    {
      "indent": 14,
      "text": "k = bits2int(T)",
      "ja": "k = bits2int（T）"
    },
    {
      "indent": 11,
      "text": "If that value of k is within the [1,q-1] range, and is suitable for DSA or ECDSA (i.e., it results in an r value that is not 0; see Section 3.4), then the generation of k is finished. The obtained value of k is used in DSA or ECDSA. Otherwise, compute:",
      "ja": "そのkの値が[1、q-1]の範囲内にあり、DSAまたはECDSAに適している場合（つまり、r値が0ではない場合。セクション3.4を参照）、kの生成は終了します。 。得られたkの値は、DSAまたはECDSAで使用されます。それ以外の場合は、次を計算します。"
    },
    {
      "indent": 14,
      "text": "K = HMAC_K(V || 0x00)",
      "ja": "K = HMAS_K（B || 0x00）"
    },
    {
      "indent": 14,
      "text": "V = HMAC_K(V)",
      "ja": "V = HMAC_K（V）"
    },
    {
      "indent": 11,
      "text": "and loop (try to generate a new T, and so on).",
      "ja": "とループ（新しいTを生成するなど）。"
    },
    {
      "indent": 3,
      "text": "Please note that when k is generated from T, the result of bits2int is compared to q, not reduced modulo q. If the value is not between 1 and q-1, the process loops. Performing a simple modular reduction would induce biases that would be detrimental to signature security.",
      "ja": "kがTから生成される場合、bits2intの結果はqを法として縮約されず、qと比較されることに注意してください。値が1とq-1の間にない場合、プロセスはループします。単純なモジュラー削減を実行すると、署名のセキュリティに悪影響を及ぼすバイアスが発生します。"
    },
    {
      "indent": 0,
      "text": "3.3. Alternate Description of the Generation of k",
      "section_title": true,
      "ja": "3.3. kの生成の代替説明"
    },
    {
      "indent": 3,
      "text": "The process described in the previous section is actually derived from the \"HMAC_DRBG\" pseudorandom number generator, described in [SP800-90A] and Annex D of [X9.62]. Using the terminology from [SP800-90A], the generation of k can be described as such:",
      "ja": "前のセクションで説明したプロセスは、[SP800-90A]および[X9.62]のAnnex Dで説明されている「HMAC_DRBG」疑似乱数ジェネレータから実際に派生しています。 [SP800-90A]の用語を使用すると、kの生成は次のように説明できます。"
    },
    {
      "indent": 3,
      "text": "a. Instantiate HMAC_DRBG using HMAC parameterized with the same hash function H as the one used for processing the message that is to be signed. Instantiation parameters are:",
      "ja": "a. 署名されるメッセージの処理に使用されるものと同じハッシュ関数Hでパラメーター化されたHMACを使用してHMAC_DRBGをインスタンス化します。インスタンス化パラメーターは次のとおりです。"
    },
    {
      "indent": 7,
      "text": "requested_instantiation_security_strength Set this parameter to any value that the HMAC_DRBG implementation will accept, when using H as base hash function.",
      "ja": "requested_instantiation_security_strength Hをベースハッシュ関数として使用するときに、HMAC_DRBG実装が受け入れる任意の値にこのパラメーターを設定します。"
    },
    {
      "indent": 7,
      "text": "prediction_resistance_flag Set this parameter to \"false\".",
      "ja": "predict_resistance_flagこのパラメーターを「false」に設定します。"
    },
    {
      "indent": 7,
      "text": "personalization_string Set this parameter to \"Null\" (the empty bit sequence).",
      "ja": "personalization_stringこのパラメーターを \"Null\"（空のビットシーケンス）に設定します。"
    },
    {
      "indent": 7,
      "text": "entropy_input Use int2octets(x) as entropy string.",
      "ja": "entropy_inputエントロピー文字列としてint2octets（x）を使用します。"
    },
    {
      "indent": 7,
      "text": "nonce Use bits2octets(H(m)) as nonce.",
      "ja": "nonceノンスとしてbits2octets（H（m））を使用します。"
    },
    {
      "indent": 7,
      "text": "Note that the last two parameters are not parameters to the HMAC_DRBG instantiation function per se; instead, those values are requested from the internal Get_entropy_input function during instantiation. For deterministic (EC)DSA, we want HMAC_DRBG to run with the entropy string and nonce that we specify, without accessing an actual entropy source.",
      "ja": "最後の2つのパラメーターは、HMAC_DRBGインスタンス化関数自体のパラメーターではないことに注意してください。代わりに、これらの値はインスタンス化中に内部Get_entropy_input関数から要求されます。確定的（EC）DSAの場合、実際のエントロピーソースにアクセスせずに、指定したエントロピー文字列とノンスでHMAC_DRBGを実行する必要があります。"
    },
    {
      "indent": 3,
      "text": "b. Generate a candidate value for k by requesting qlen bits from HMAC_DRBG and converting the resulting bits into an integer with the bits2int transform. Repeat this step until a value is obtained, which is non-zero, less than q, and suitable for (EC)DSA (see Section 3.4).",
      "ja": "b. HMAC_DRBGからqlenビットを要求し、bits2int変換を使用して結果のビットを整数に変換することにより、kの候補値を生成します。ゼロではなく、q未満で（EC）DSAに適した値が得られるまで、この手順を繰り返します（セクション3.4を参照）。"
    },
    {
      "indent": 3,
      "text": "Note that we instantiate a new HMAC_DRBG instance for each signature generation process. There is no \"personalization string\" and no \"additional input\" when generating bits. The reseed function of HMAC_DRBG is never invoked, neither externally nor as a consequence of the internal HMAC_DRBG processing.",
      "ja": "署名生成プロセスごとに新しいHMAC_DRBGインスタンスをインスタンス化することに注意してください。ビットを生成するとき、「パーソナライゼーション文字列」も「追加入力」もありません。 HMAC_DRBGの再シード機能は、外部的にも内部HMAC_DRBG処理の結果としても呼び出されることはありません。"
    },
    {
      "indent": 3,
      "text": "As shown above, we use the encoding of the private key as \"entropy string\" and the hashed message (truncated and expanded by bits2octets) as \"nonce\". In HMAC_DRBG, the entropy string and nonce are simply concatenated into the initial seed; hence, the split between \"entropy\" and \"nonce\" is quite arbitrary. Using qlen bits for each ought to be compatible with most HMAC_DRBG implementation input requirements.",
      "ja": "上記のように、秘密鍵のエンコーディングを「エントロピー文字列」として使用し、ハッシュされたメッセージ（ビット2オクテットで切り捨てられて拡張された）を「ノンス」として使用します。 HMAC_DRBGでは、エントロピー文字列とノンスが単純に連結されて初期シードになります。したがって、「エントロピー」と「ノンス」の分割は非常に恣意的です。それぞれにqlenビットを使用することは、ほとんどのHMAC_DRBG実装入力要件と互換性があるはずです。"
    },
    {
      "indent": 0,
      "text": "3.4. Usage Notes",
      "section_title": true,
      "ja": "3.4. 使用上の注意"
    },
    {
      "indent": 3,
      "text": "With DSA or ECDSA, the value k is used to compute the first half of the signature, dubbed r (see Section 2.4). The DSA and ECDSA standards mandate that, if r is zero, then a new k should be selected. In that situation, this document specifies that the value k is \"unsuitable\", and the generation process shall keep on looping.",
      "ja": "DSAまたはECDSAでは、値kは署名の前半を計算するために使用され、rと呼ばれます（セクション2.4を参照）。 DSAおよびECDSA規格では、rがゼロの場合、新しいkを選択する必要があります。そのような状況では、このドキュメントでは、値kが「不適切」であり、生成プロセスがループし続けることを指定しています。"
    },
    {
      "indent": 3,
      "text": "This occurrence is utterly improbable. Actually, it would require considerable computational effort (similar to breaking preimage resistance of the hash function) to find a private key and a message that lead to a zero value for r; hitting such a case by pure chance is thus deemed implausible, and an attacker cannot force it with carefully crafted messages. In practice, such a code path will not be triggered and thus can be implemented with little optimization.",
      "ja": "この発生はまったくあり得ません。実際、rの値がゼロになる秘密鍵とメッセージを見つけるには、かなりの計算作業が必要になります（ハッシュ関数のプリイメージの抵抗を壊すのと同様）。したがって、このようなケースを純粋に偶然にヒットすることは妥当ではないと見なされ、攻撃者は注意深く作成されたメッセージでそれを強制することはできません。実際には、このようなコードパスはトリガーされないため、ほとんど最適化することなく実装できます。"
    },
    {
      "indent": 0,
      "text": "3.5. Rationale",
      "section_title": true,
      "ja": "3.5. 根拠"
    },
    {
      "indent": 0,
      "text": " The process described in the previous sections mimics the \"Approved\" generation process of k described in Annex D of [X9.62], with the \"HMAC_DRBG\" pseudorandom number generator. The main difference is that we use the concatenation of the private key x and the hashed message H(m) as the pseudorandom number generator (PRNG) seed. If using a \"security level\" of n bits, then HMAC_DRBG should be used with seed entropy at least n+64 bits; however, the key x should also have been generated with that much entropy, and the length of x is qlen, which is at least equal to 2*n and thus larger than n+64 (DSA and ECDSA, as specified by the standards, require qlen >= 160). It can then be argued that deterministic ECDSA fulfills the entropy requirements of Annex D of [X9.62].",
      "ja": "前のセクションで説明したプロセスは、[X9.62]の付録Dで説明されているkの「承認済み」生成プロセスを模倣し、「HMAC_DRBG」疑似乱数ジェネレータを備えています。主な違いは、秘密鍵xとハッシュされたメッセージH（m）の連結を疑似乱数ジェネレーター（PRNG）シードとして使用することです。 nビットの「セキュリティレベル」を使用する場合、HMAC_DRBGは少なくともn + 64ビットのシードエントロピーで使用する必要があります。ただし、キーxも同じくらいのエントロピーで生成されている必要があり、xの長さはqlenです。これは、少なくとも2 * nに等しく、n + 64よりも大きい（DSAおよびECDSA、規格で指定されているとおり）、 qlen> = 160が必要です）。次に、決定論的ECDSAは、[X9.62]のAnnex Dのエントロピー要件を満たしていると主張することができます。"
    },
    {
      "indent": 3,
      "text": "We use bits2octets(H(m)) instead of H(m) in order to ease integration. Indeed, many existing signature systems offload the message hashing; the signature engine (which has access to the private key) receives only H(m). In some applications, where data bandwidth is constrained, only the first qlen bits of H(m) are transferred to the signature engine, on the basis that the bits2int transform will ignore subsequent bits anyway. Possibly, in some systems, the truncated H(m) could be externally reduced modulo q, since that is the first thing that (EC)DSA performs on the hashed message. With the definition of bits2octets, deterministic (EC)DSA can be applied with the same input.",
      "ja": "統合を容易にするために、H（m）の代わりにbits2octets（H（m））を使用します。実際、多くの既存の署名システムはメッセージハッシュをオフロードします。署名エンジン（秘密鍵にアクセスできる）は、H（m）のみを受け取ります。データ帯域幅が制限されている一部のアプリケーションでは、bits2int変換が後続のビットを無視することに基づいて、H（m）の最初のqlenビットのみが署名エンジンに転送されます。おそらく、一部のシステムでは、切り捨てられたH（m）は、（EC）DSAがハッシュされたメッセージに対して最初に実行するものであるため、qを法として外部的に削減できます。 bits2octetsの定義により、確定的（EC）DSAを同じ入力に適用できます。"
    },
    {
      "indent": 0,
      "text": "3.6. Variants",
      "section_title": true,
      "ja": "3.6. 亜種"
    },
    {
      "indent": 3,
      "text": "Many parts of the specification of deterministic (EC)DSA are quite arbitrary. It is possible to define variants that are NOT \"deterministic (EC)DSA\" but that may nonetheless be useful in some contexts:",
      "ja": "確定的（EC）DSAの仕様の多くの部分は非常に恣意的です。 「確定的（EC）DSA」ではないバリアントを定義することは可能ですが、それでも一部のコンテキストでは役立ちます。"
    },
    {
      "indent": 3,
      "text": "o It is possible to use H(m) directly, instead of bits2octets(H(m)), as part of the HMAC input. As explained in Section 3.5, we use bits2octets(H(m)) in order to ease integration into systems that already use an (EC)DSA signature engine by sending it an already-truncated hash value. Using the whole H(m) does not introduce any vulnerability.",
      "ja": "o HMAC入力の一部として、bits2octets（H（m））の代わりにH（m）を直接使用することが可能です。セクション3.5で説明したように、すでに切り捨てられたハッシュ値を送信することにより、（EC）DSA署名エンジンをすでに使用しているシステムへの統合を容易にするために、bits2octets（H（m））を使用します。 H（m）全体を使用しても、脆弱性は発生しません。"
    },
    {
      "indent": 3,
      "text": "o Additional data may be added to the input of HMAC, concatenated after bits2octets(H(m)):",
      "ja": "o 追加データは、HMACの入力に追加され、bits2octets（H（m））の後に連結されます。"
    },
    {
      "indent": 9,
      "text": "K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "A use case may be a protocol that requires a non-deterministic signature algorithm on a system that does not have access to a high-quality random source. It suffices that the additional data k' is non-repeating (e.g., a signature counter or a monotonic clock) to ensure \"random-looking\" signatures are indistinguishable, in a cryptographic way, from plain (EC)DSA signatures. In [SP800-90A] terminology, k' is the \"additional input\" that can be set as a parameter when generating pseudorandom bits. This variant can be thought of as a \"strengthening\" of the randomness of the source of the additional data k'.",
      "ja": "ユースケースとしては、高品質な乱数源にアクセスできないシステム上で非決定論的な署名アルゴリズムを必要とするプロトコルが挙げられます。追加データk'が非反復的（例えば、署名カウンタや単調クロック）であることで、「ランダムに見える」署名が暗号学的にプレーンな(EC)DSA署名と区別できないことが保証されます。[SP800-90A]の用語では、k'は擬似乱数ビットを生成する際にパラメータとして設定できる「追加入力」です。このバリエーションは、追加データk'の乱数源のランダム性を「強化」するものと考えることができます。"
    },
    {
      "indent": 3,
      "text": "o Instead of using x (the private key) as input to HMAC, it is possible to use additional secret data, stored along with the private key with the same security measures. The entropy of that additional data SHALL be at least n bits, preferably n+64 bits or more, where n is the target security level. Having additional secret data may help in formally proving the security of derandomization, but it implies an extra storage cost and incompatibility with already-generated (EC)DSA private keys.",
      "ja": "o HMACへの入力としてx（秘密鍵）を使用する代わりに、同じセキュリティ対策で秘密鍵とともに保存された追加の秘密データを使用することが可能です。その追加データのエントロピーは、少なくともnビット、できればn + 64ビット以上である必要があります（nはターゲットセキュリティレベル）。追加の秘密データがあることは、ランダム化解除のセキュリティを正式に証明するのに役立ちますが、追加のストレージコストと、すでに生成された（EC）DSA秘密鍵との非互換性を意味します。"
    },
    {
      "indent": 3,
      "text": "o Similarly, the private key could be a value z, from which both x (the \"private key\" in the plain (EC)DSA sense) and another value x', to be used as input to HMAC in the generation of k, would be derived through a suitable Pseudorandom Function (PRF) (such as HMAC_DRBG). This would keep private key storage requirements to a minimum while providing a more easily proven security, but it would impact private key generation and would not be compatible with already-generated key pairs.",
      "ja": "o 同様に、秘密鍵は値zであり、x（プレーン（EC）DSAの意味での「秘密鍵」）と別の値x 'の両方が、kの生成でHMACへの入力として使用されます。適切な疑似ランダム関数（PRF）（HMAC_DRBGなど）を介して導出される。これにより、より簡単に証明できるセキュリティを提供しながら、秘密キーのストレージ要件を最小限に抑えることができますが、秘密キーの生成に影響を与え、すでに生成されたキーペアとの互換性がなくなります。"
    },
    {
      "indent": 3,
      "text": "o In this document, we use the same hash function H for processing the input message and as a parameter to HMAC. Two distinct hash functions could be used, provided that both are adequately secure. The overall security will be limited by the weaker of the two hash functions, i.e., the one with the smaller output. Using a specific, constant hash function for HMAC may be useful for constrained implementations that accept externally hashed messages, regardless of what hash function was used for that, but have resources for implementing only one hash function for HMAC.",
      "ja": "o このドキュメントでは、入力メッセージの処理とHMACへのパラメーターとして同じハッシュ関数Hを使用します。両方が十分に安全であれば、2つの異なるハッシュ関数を使用できます。全体的なセキュリティは、2つのハッシュ関数のうち弱い方、つまり出力が小さい方によって制限されます。 HMACに特定の定数ハッシュ関数を使用すると、どのハッシュ関数が使用されたかに関係なく、外部でハッシュされたメッセージを受け入れるが、HMACにハッシュ関数を1つだけ実装するためのリソースがある制約のある実装に役立ちます。"
    },
    {
      "indent": 3,
      "text": "The main disadvantage of any variant is that it ceases to be verifiable against the test vectors published in this document.",
      "ja": "バリアントの主な短所は、このドキュメントで公開されているテストベクトルに対して検証できないことです。"
    },
    {
      "indent": 0,
      "text": "4. Security Considerations",
      "section_title": true,
      "ja": "4. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "Proper implementation and usage of a cryptographic signature algorithm require taking into account many parameters. In particular, private key generation, storage, access control, and disposal are sensitive operations, which this document does not address in any way. Deterministic (EC)DSA shows how to achieve the security characteristics of a standard DSA or ECDSA signature scheme while removing the need for a source of strong randomness, or even any source of randomness, during signature generation.",
      "ja": "暗号化署名アルゴリズムを適切に実装して使用するには、多くのパラメーターを考慮する必要があります。特に、秘密鍵の生成、保存、アクセス制御、および廃棄は機密性の高い操作であり、このドキュメントではこれについては触れていません。 決定論的な（EC）DSAは、標準のDSAまたはECDSA署名方式のセキュリティ特性を達成しながら、署名の生成時に強力なランダム性のソースまたはランダム性のソースの必要性を排除する方法を示します。"
    },
    {
      "indent": 3,
      "text": "Private key generation, however, absolutely requires such a strongly random source. In situations where deterministic (EC)DSA is to be used due to the lack of an appropriate source of randomness, one must assume that the private key has been generated externally and imported into the signature generation system or was generated in a context where randomness was available. For instance, one can imagine a smartcard that generates its private key while still in the factory under controlled environmental conditions, but for which random data generation cannot be guaranteed once deployed in the field, when physically in the hands of potential attackers.",
      "ja": "ただし、秘密鍵の生成には、このような非常にランダムなソースが絶対に必要です。ランダム性の適切なソースがないために確定的（EC）DSAが使用される状況では、秘密鍵が外部で生成され、署名生成システムにインポートされたか、ランダム性があったコンテキストで生成されたと想定する必要があります。利用可能です。たとえば、制御された環境条件下で工場にいる間に秘密鍵を生成するスマートカードを想像できますが、物理的に攻撃者の手に渡ったときに、フィールドに配置されたランダムデータの生成は保証できません。"
    },
    {
      "indent": 3,
      "text": "Both removal of the random source requirement and the ability to test an implementation against test vectors enhance security of DSA and ECDSA signer implementations, in that they help avoid hard-to-test failure conditions. Deterministic signature schemes may also help in other situations, e.g., to avoid spurious duplicates, when the same data element is signed several times with the same key: with a deterministic signature scheme, the same signature is generated every time, making duplicate detection much easier.",
      "ja": "ランダムソース要件の削除と、テストベクタに対して実装をテストする機能の両方が、テストが困難な障害状態を回避するのに役立つという点で、DSAおよびECDSA署名者実装のセキュリティを強化します。確定的署名方式は他の状況でも役立つ場合があります。たとえば、同じデータ要素が同じキーで何度も署名されている場合、偽の重複を避けることができます。確定的署名方式では、毎回同じ署名が生成され、重複検出がはるかに簡単になります。"
    },
    {
      "indent": 3,
      "text": "Conversely, lack of randomization may have adverse effects in some advanced protocols, e.g., related to anonymity in some voting schemes. As a rule of thumb, deterministic DSA or ECDSA can be used in lieu of the genuine DSA or ECDSA, with no additional security issues, if the overall protocol would tolerate another deterministic signature scheme, in particular RSA as specified in PKCS #1 [RFC3447] (with \"type 1\" padding, not PSS) or ISO 9796-2 [ISO-9796-2]. The list of protocols in which deterministic DSA or ECDSA is appropriate includes Transport Layer Security (TLS) [RFC5246], the Secure SHell (SSH) Protocol [RFC4251], Cryptographic Message Syntax (CMS) [RFC5652] and derivatives, X.509 public key infrastructures [RFC5280], and many others.",
      "ja": "逆に、ランダム化の欠如は、一部の高度なプロトコル、例えば一部の投票方式における匿名性に関わるプロトコルでは悪影響を及ぼす可能性があります。経験則として、プロトコル全体が他の決定論的署名方式、特にPKCS #1 [RFC3447] で規定されているRSA（「タイプ1」パディングを使用し、PSSは使用しない）またはISO 9796-2 [ISO-9796-2] で規定されているRSAを許容する場合、セキュリティ上の問題を追加することなく、純粋なDSAまたはECDSAの代わりに決定論的DSAまたはECDSAを使用できます。決定論的DSAまたはECDSAが適切なプロトコルのリストには、トランスポート層セキュリティ（TLS）[RFC5246]、セキュアシェル（SSH）プロトコル[RFC4251]、暗号化メッセージ構文（CMS）[RFC5652]とその派生プロトコル、X.509公開鍵基盤[RFC5280]など、多数が含まれます。"
    },
    {
      "indent": 3,
      "text": "The construction described in this document is known as a \"derandomization\". This has been proposed for various signature schemes. Security relies on whether the generation of k is indistinguishable from the output of a random oracle. Roughly speaking, HMAC_DRBG is secure in that role as long as HMAC behaves as a PRF (Pseudorandom Function). For details on the security of HMAC and HMAC_DRBG, please refer to [H2008] and [B2006]. For a more formal treatment of derandomization, see [LN2009].",
      "ja": "このドキュメントで説明する構成は、「ランダム化」と呼ばれます。これは、さまざまな署名方式に対して提案されています。セキュリティは、kの生成がランダムオラクルの出力と区別できないかどうかに依存します。大まかに言えば、HMACがPRF（疑似ランダム関数）として動作する限り、HMAC_DRBGはその役割で安全です。 HMACおよびHMAC_DRBGのセキュリティの詳細については、[H2008]および[B2006]を参照してください。非ランダム化のより正式な扱いについては、[LN2009]を参照してください。"
    },
    {
      "indent": 0,
      "text": " One remaining issue with deterministic (EC)DSA, as presented in this document, is the \"double use\" of the private key x, both as the private key in the signature generation algorithm itself and as input to the HMAC_DRBG-based pseudorandom oracle for producing the k value. This requires HMAC_DRBG to keep on being a random oracle, even when the public key (which is computed from x) is also known. Given the lack of common structure between HMAC and discrete logarithms, this seems a reasonable assumption.",
      "ja": "このドキュメントで示されているように、確定的（EC）DSAの残りの問題の1つは、秘密鍵xの「二重使用」です。これは、署名生成アルゴリズム自体の秘密鍵として、およびHMAC_DRBGベースの擬似ランダムオラクルへの入力としての両方です。 k値を生成します。これには、公開鍵（xから計算される）もわかっている場合でも、ランダムなオラクルであり続けるためにHMAC_DRBGが必要です。 HMACと離散対数の間に共通の構造がないことを考えると、これは妥当な仮定のようです。"
    },
    {
      "indent": 3,
      "text": "Side-channel attacks are an important consideration whenever an attacker can accurately measure aspects of an implementation such as the length of time that it takes to perform a signing operation or the power consumed at each point of a signing operation. The determinism of the algorithms described in this note may be useful to an attacker in some forms of side-channel attacks, so implementations SHOULD use defensive measures to avoid leaking the private key through a side channel.",
      "ja": "署名操作の実行にかかる時間や署名操作の各ポイントで消費される電力などの実装の側面を攻撃者が正確に測定できる場合は常に、サイドチャネル攻撃は重要な考慮事項です。このノートで説明されているアルゴリズムの決定論は、サイドチャネル攻撃の一部の形式で攻撃者に役立つ可能性があるため、実装では、サイドチャネルを介した秘密鍵の漏洩を回避するために防御策を使用する必要があります。"
    },
    {
      "indent": 0,
      "text": "5. Intellectual Property Status",
      "section_title": true,
      "ja": "5. 知的財産の状況"
    },
    {
      "indent": 3,
      "text": "To the best of our knowledge, deterministic (EC)DSA is not covered by any active patent. The paper [BDLSY2011] points to two independent publications of the idea of derandomization by Barwood and Wigley, both in early 1997, and also to a patent application by Naccache, M'Raihi, and Levy-dit-Vehel a few months later [NML1997], but the application was withdrawn in 2003. We are not aware of any other patent on the subject.",
      "ja": "私たちの知る限りでは、確定的（EC）DSAは有効な特許の対象ではありません。論文[BDLSY2011]は、BarwoodとWigleyによる非ランダム化のアイデアに関する2つの独立した出版物を、両方とも1997年初頭に指摘し、さらにNaccache、M'Raihi、およびLevy-dit-Vehelによる数か月後の特許出願を指摘しています[NML1997 ]ですが、出願は2003年に取り下げられました。この件に関する他の特許については知りません。"
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6. 参考文献"
    },
    {
      "indent": 0,
      "text": "6.1. Normative References",
      "section_title": true,
      "ja": "6.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[FIPS-186-4] National Institute of Standards and Technology, \"Digital Signature Standard (DSS)\", Federal Information Processing Standards Publication (FIPS PUB) 186-4, July 2013.",
      "ja": "[FIPS-186-4]米国国立標準技術研究所、「デジタル署名標準（DSS）」、連邦情報処理標準出版物（FIPS PUB）186-4、2013年7月。"
    },
    {
      "indent": 3,
      "text": "[RFC2104] Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing for Message Authentication\", RFC 2104, February 1997.",
      "ja": "[RFC2104] Krawczyk、H.、Bellare、M。、およびR. Canetti、「HMAC：Keyed-Hashing for Message Authentication」、RFC 2104、1997年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, March 1997.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、1997年3月。"
    },
    {
      "indent": 3,
      "text": "[SEC1] Certicom Research, \"SEC 1: Elliptic Curve Cryptography (Version 2.0)\", May 2009.",
      "ja": "[SEC1] Certicom Research、「SEC 1：Elliptic Curve Cryptography（Version 2.0）」、2009年5月。"
    },
    {
      "indent": 3,
      "text": "[SP800-90A] National Institute of Standards and Technology, \"Recommendation for Random Number Generation Using Deterministic Random Bit Generators (Revised)\", NIST Special Publication 800-90A, January 2012.",
      "ja": "[SP800-90A]米国国立標準技術研究所、「確定的ランダムビットジェネレーターを使用した乱数生成の推奨（改訂版）」、NIST Special Publication 800-90A、2012年1月。"
    },
    {
      "indent": 3,
      "text": "[X9.62] American National Standards Institute, \"Public Key Cryptography for the Financial Services Industry: The Elliptic Curve Digital Signature Algorithm (ECDSA)\", ANSI X9.62-2005, November 2005.",
      "ja": "[X9.62] American National Standards Institute、「金融サービス業界の公開鍵暗号化：楕円曲線デジタル署名アルゴリズム（ECDSA）」、ANSI X9.62-2005、2005年11月。"
    },
    {
      "indent": 0,
      "text": "6.2. Informative References",
      "section_title": true,
      "ja": "6.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[B2006] Bellare, M., \"New Proofs for NMAC and HMAC: Security without Collision-Resistance\", Crypto 2006, LNCS 4117, August 2006.",
      "ja": "[B2006] Bellare、M。、「NMACとHMACの新しい証明：衝突防止なしのセキュリティ」、Crypto 2006、LNCS 4117、2006年8月。"
    },
    {
      "indent": 3,
      "text": "[BDLSY2011] Bernstein, D., Duif, N., Lange, T., Schwabe, P., and B. Yang, \"High-speed high-security signatures\", Cryptology ePrint Archive Report 2011/368, September 2011.",
      "ja": "[BDLSY2011] Bernstein、D.、Duif、N.、Lange、T.、Schwabe、P。、およびB. Yang、「高速高セキュリティ署名」、Cryptology ePrint Archive Report 2011 / 368、2011年9月。"
    },
    {
      "indent": 3,
      "text": "[FIPS-180-4] National Institute of Standards and Technology, \"Secure Hash Standard (SHS)\", Federal Information Processing Standards Publication (FIPS PUB) 180-4, March 2012.",
      "ja": "[FIPS-180-4]米国国立標準技術研究所、「Secure Hash Standard（SHS）」、連邦情報処理標準出版物（FIPS PUB）180-4、2012年3月。"
    },
    {
      "indent": 3,
      "text": "[H2008] Hirose, S., \"Security Analysis of DRBG Using HMAC in NIST SP 800-90\", Information Security Applications (WISA 2008), LNCS 5379, September 2008.",
      "ja": "[H2008] Hirose、S。、「NIST SP 800-90でHMACを使用したDRBGのセキュリティ分析」、情報セキュリティアプリケーション（WISA 2008）、LNCS 5379、2008年9月。"
    },
    {
      "indent": 3,
      "text": "[ISO-9796-2] International Organization for Standardization, \"Information technology -- Security techniques -- Digital signature schemes giving message recovery -- Part 2: Integer factorization based mechanisms\", ISO/ IEC 9796-2:2010, December 2010.",
      "ja": "[ISO-9796-2]国際標準化機構、「情報技術-セキュリティ技術-メッセージ回復を提供するデジタル署名方式-パート2：整数分解ベースのメカニズム」、ISO / IEC 9796-2：2010、2010年12月。"
    },
    {
      "indent": 3,
      "text": "[LN2009] Leurent, G. and P. Nguyen, \"How Risky is the Random-Oracle Model?\", Cryptology ePrint Archive Report 2008/ 441, July 2009, <http://eprint.iacr.org/2008/441>.",
      "ja": "[LN2009] Leurent、G。およびP. Nguyen、「ランダムオラクルモデルはどのように危険ですか？」、Cryptology ePrint Archive Report 2008 / 441、2009年7月、<http://eprint.iacr.org/2008/441> 。"
    },
    {
      "indent": 3,
      "text": "[NML1997] Naccache, D., M'Raihi, D., and F. Levy-dit-Vehel, \"PSEUDO-RANDOM GENERATOR BASED ON A HASH CODING FUNCTION FOR CRYPTOGRAPHIC SYSTEMS REQUIRING RANDOM DRAWING\", WIPO patent publication WO/1998/051038, May 1998.",
      "ja": "[NML1997] Naccache、D.、M'Raihi、D。、およびF. Levy-dit-Vehel、「ランダムな描画を必要とする暗号システムのハッシュコーディング関数に基づく疑似ランダムジェネレータ」、WIPO特許公開WO / 1998 / 051038、1998年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC3447] Jonsson, J. and B. Kaliski, \"Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1\", RFC 3447, February 2003.",
      "ja": "[RFC3447] Jonsson、J。およびB. Kaliski、「Public-Key Cryptography Standards（PKCS）＃1：RSA Cryptography Specifications Version 2.1」、RFC 3447、2003年2月。"
    },
    {
      "indent": 3,
      "text": "[RFC4251] Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH) Protocol Architecture\", RFC 4251, January 2006.",
      "ja": "[RFC4251] Ylonen、T。およびC. Lonvick、「The Secure Shell（SSH）Protocol Architecture」、RFC 4251、2006年1月。"
    },
    {
      "indent": 3,
      "text": "[RFC5246] Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS) Protocol Version 1.2\", RFC 5246, August 2008.",
      "ja": "[RFC5246] Dierks、T。およびE. Rescorla、「The Transport Layer Security（TLS）Protocol Version 1.2」、RFC 5246、2008年8月。"
    },
    {
      "indent": 3,
      "text": "[RFC5280] Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., and W. Polk, \"Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile\", RFC 5280, May 2008.",
      "ja": "[RFC5280] Cooper、D.、Santesson、S.、Farrell、S.、Boeyen、S.、Housley、R。、およびW. Polk、「Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List（CRL）Profile \"、RFC 5280、2008年5月。"
    },
    {
      "indent": 3,
      "text": "[RFC5652] Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70, RFC 5652, September 2009.",
      "ja": "[RFC5652] Housley、R。、「Cryptographic Message Syntax（CMS）」、STD 70、RFC 5652、2009年9月。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Examples",
      "section_title": true,
      "ja": "付録A.例"
    },
    {
      "indent": 0,
      "text": "A.1. Detailed Example",
      "section_title": true,
      "ja": "A.1. 詳細な例"
    },
    {
      "indent": 3,
      "text": "We detail here the intermediate values obtained during the generation of k on an example message and key. We use a binary curve because that specific curve is standard and has a group order length (qlen) that is not a multiple of 8; this illustrates the fine details of how conversions are performed between integers and bit sequences.",
      "ja": "ここでは、メッセージとキーの例でkの生成中に取得された中間値について詳しく説明します。特定の曲線が標準であり、8の倍数ではないグループ次数の長さ（qlen）を持っているので、バイナリ曲線を使用します。これは、整数とビットシーケンス間で変換が実行される方法の詳細を示しています。"
    },
    {
      "indent": 0,
      "text": "A.1.1. Key Pair",
      "section_title": true,
      "ja": "A.1.1. キーペア"
    },
    {
      "indent": 3,
      "text": "We consider ECDSA on the curve K-163 described in [FIPS-186-4] (also known as \"ansix9t163k1\" in [X9.62]). The curve is defined over a field GF(2^163): field elements are encoded into 163-bit strings. The order of the conventional base point is the prime value:",
      "ja": "[FIPS-186-4]で説明されている曲線K-163（[X9.62]では「ansix9t163k1」とも呼ばれる）でECDSAを検討します。曲線はフィールドGF（2^163）で定義されます。フィールド要素は163ビットの文字列にエンコードされます。従来のベースポイントの次数は素数です。"
    },
    {
      "indent": 6,
      "text": "q = 0x4000000000000000000020108A2E0CC0D99F8A5EF",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "which has length qlen = 163 bits.",
      "ja": "長さqlen = 163ビットです。"
    },
    {
      "indent": 3,
      "text": "Our private key is:",
      "ja": "私たちの秘密鍵は："
    },
    {
      "indent": 6,
      "text": "x = 0x09A4D6792295A7F730FC3F2B49CBC0F62E862272F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The corresponding public key is the curve point U = xG. This point has two coordinates, which are elements of the field GF(2^163). These elements can be converted to integers using the procedure described in Section A.5.6 of [X9.62], yielding the two public point coordinates:",
      "ja": "対応する公開鍵は、曲線ポイントU = xGです。このポイントには、フィールドGF（2^163）の要素である2つの座標があります。これらの要素は、[X9.62]のセクションA.5.6で説明されている手順を使用して整数に変換でき、2つのパブリックポイント座標が得られます。"
    },
    {
      "indent": 6,
      "text": "Ux = 0x79AEE090DB05EC252D5CB4452F356BE198A4FF96F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "Uy = 0x782E29634DDC9A31EF40386E896BAA18B53AFA5A3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.1.2. Generation of k",
      "section_title": true,
      "ja": "A.1.2. kの生成"
    },
    {
      "indent": 3,
      "text": "In this example, we use the hash function SHA-256 [FIPS-180-4]. The input message is the UTF-8 encoding of the string \"sample\" (6 octets, i.e., 48 bits).",
      "ja": "この例では、ハッシュ関数SHA-256 [FIPS-180-4]を使用します。入力メッセージは、文字列「サンプル」のUTF-8エンコーディングです（6オクテット、つまり48ビット）。"
    },
    {
      "indent": 3,
      "text": "The hashed input message h1 = SHA-256(m) is:",
      "ja": "ハッシュされた入力メッセージh1 = SHA-256（m）は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "h1\n   AF 2B DB E1 AA 9B 6E C1 E2 AD E1 D6 94 F4 1F C7\n   1A 83 1D 02 68 E9 89 15 62 11 3D 8A 62 AD D1 BF",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "(32 octets; each octet value is listed in hexadecimal notation).",
      "ja": "（32オクテット。各オクテット値は16進表記でリストされます）。"
    },
    {
      "indent": 3,
      "text": "We convert the private key x to a sequence of octets using the int2octets transform:",
      "ja": "int2octets変換を使用して、秘密鍵xをオクテットのシーケンスに変換します。"
    },
    {
      "indent": 3,
      "text": "int2octets(x)\n   00 9A 4D 67 92 29 5A 7F 73 0F C3 F2 B4 9C BC 0F\n   62 E8 62 27 2F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note: Although the specific value of x would numerically fit in 160 bits, i.e., 20 octets, we still encode x into 21 octets, because the encoding length is driven by the length of q, which is 163 bits.",
      "ja": "注：xの特定の値は160ビット、つまり20オクテットに数値的に適合しますが、エンコード長はqの長さ（163ビット）によって決まるため、xを21オクテットにエンコードします。"
    },
    {
      "indent": 3,
      "text": "We also truncate and/or expand the hashed message using bits2octets:",
      "ja": "また、bits2octetsを使用して、ハッシュされたメッセージを切り捨てたり拡張したりします。"
    },
    {
      "indent": 3,
      "text": "bits2octets(h1)\n   01 79 5E DF 0D 54 DB 76 0F 15 6D 0D AC 04 C0 32\n   2B 3A 20 42 24",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The steps b to g (see Section 3.2) then compute the values for the K and V variables. These variables are sequences of 256 bits (the hash function output length, rounded up to a multiple of 8). We reproduce here the successive values:",
      "ja": "ステップbからg（セクション3.2を参照）は、KおよびV変数の値を計算します。これらの変数は256ビットのシーケンスです（ハッシュ関数の出力長、8の倍数に切り上げ）。ここでは、連続する値を再現します。"
    },
    {
      "indent": 3,
      "text": "V after step b:\n   01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\n   01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\n\nK after step c:\n   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\nK after step d:\n   09 99 9A 9B FE F9 72 D3 34 69 11 88 3F AD 79 51\n   D2 3F 2C 8B 47 F4 20 22 2D 11 71 EE EE AC 5A B8\n\nV after step e:\n   D5 F4 03 0F 75 5E E8 6A A1 0B BA 8C 09 DF 11 4F\n   F6 B6 11 1C 23 85 00 D1 3C 73 43 A8 C0 1B EC F7\n\nK after step f:\n   0C F2 FE 96 D5 61 9C 9E F5 3C B7 41 7D 49 D3 7E\n   A6 8A 4F FE D0 D7 E6 23 E3 86 89 28 99 11 BD 57\n\nV after step g:\n   78 34 57 C1 CF 31 48 A8 F2 A9 AE 73 ED 47 2F A9\n   8E D9 CD 92 5D 8E 96 4C E0 76 4D EF 3F 84 2B 9A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "In step h, we perform the final loop. Since we use HMAC with SHA-256, which produces 256 bits worth of output, and we need only 163 bits for T, a single HMAC invocation yields the following T:",
      "ja": "ステップhでは、最後のループを実行します。 SHA-256でHMACを使用して256ビット相当の出力を生成し、Tに必要なのは163ビットだけなので、1回のHMAC呼び出しで次のTが得られます。"
    },
    {
      "indent": 3,
      "text": "T (first try)\n   93 05 A4 6D E7 FF 8E B1 07 19 4D EB D3 FD 48 AA\n   20 D5 E7 65 6C BE 0E A6 9D 2A 8D 4E 7C 67 31 4A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "which, when converted to an integer with bits2int, yields a first candidate for k:",
      "ja": "これは、bits2intを使用して整数に変換すると、kの最初の候補になります。"
    },
    {
      "indent": 6,
      "text": "k1 = 0x4982D236F3FFC758838CA6F5E9FEA455106AF3B2B",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Since that value is greater than q-1, we have to loop. This first entails computing new values for K and V:",
      "ja": "その値はq-1より大きいため、ループする必要があります。これは最初に、KとVの新しい値の計算を伴います。"
    },
    {
      "indent": 3,
      "text": "new K\n   75 CB 5C 05 B2 A7 8C 3D 81 DF 12 D7 4D 7B E0 A0\n   E9 4A B1 98 15 78 1D 4D 8E 29 02 A7 9D 0A 66 99\n\nnew V\n   DC B9 CA 12 61 07 A9 C2 7C E7 7B A5 8E A8 71 C8\n   C9 12 D8 35 EA DD C3 05 F2 44 5D 88 F6 6C 4C 43",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "then a new T:",
      "ja": "次に新しいT："
    },
    {
      "indent": 3,
      "text": "T (second try)\n   C7 0C 78 60 8A 3B 5B E9 28 9B E9 0E F6 E8 1A 9E\n   2C 15 16 D5 75 1D 2F 75 F5 00 33 E4 5F 73 BD EB",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "and a new candidate for k:",
      "ja": "そしてkの新しい候補："
    },
    {
      "indent": 6,
      "text": "k2 = 0x63863C30451DADF4944DF4877B740D4F160A8B6AB",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Since k2 is also greater than q-1, we loop again:",
      "ja": "k2もq-1より大きいため、再びループします。"
    },
    {
      "indent": 3,
      "text": "new K (2)\n   0A 5A 64 B9 9C 05 95 20 10 36 86 CB 6F 36 BC FC\n   A7 88 EB 3B CF 69 BA 66 A5 BB 08 0B 05 93 BA 53\n\nnew V (2)\n   0B 3B 19 68 11 B1 9F 6C 6F 72 9C 43 F3 5B CF 0D\n   FD 72 5F 17 CA 34 30 E8 72 14 53 E5 55 50 A1 8F\n\nT (third try)\n   47 5E 80 E9 92 14 05 67 FC C3 A5 0D AB 90 FE 84\n   BC D7 BB 03 63 8E 9C 46 56 A0 6F 37 F6 50 8A 7C",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "and we finally get an acceptable value for k:",
      "ja": "最後に、kの許容値を取得します。"
    },
    {
      "indent": 6,
      "text": "k = 0x23AF4074C90A02B3FE61D286D5C87F425E6BDD81B",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.1.3. Signature",
      "section_title": true,
      "ja": "A.1.3. 署名"
    },
    {
      "indent": 3,
      "text": "With our private key and the value of k that we just generated, we can now compute the signature using the standard ECDSA mechanisms. First, the point kG is computed, and the X coordinate of that point is converted to an integer and then reduced modulo q, yielding the first signature half:",
      "ja": "生成した秘密鍵とkの値を使用して、標準のECDSAメカニズムを使用して署名を計算できます。最初に、点kGが計算され、その点のX座標が整数に変換されてから、qを法として減じられ、最初の署名の半分が得られます。"
    },
    {
      "indent": 6,
      "text": "r = 0x113A63990598A3828C407C0F4D2438D990DF99A7F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "which we use, together with x (the private key), k (which we computed above), and h = bits2int(h1), to compute the second signature half:",
      "ja": "これをx（秘密鍵）、k（上記で計算）、およびh = bits2int（h1）とともに使用して、2番目の署名の半分を計算します。"
    },
    {
      "indent": 6,
      "text": "s = 0x1313A2E03F5412DDB296A22E2C455335545672D9F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "An ECDSA signature is a pair of integers. In many protocols that require a signature to be a sequence of bits (or octets), it is customary to encode the signature as an ASN.1 SEQUENCE of two INTEGER values, with DER rules. This results in the following 48-octet signature:",
      "ja": "ECDSA署名は整数のペアです。一連のビット（またはオクテット）である署名を必要とする多くのプロトコルでは、DER規則を使用して、署名を2つのINTEGER値のASN.1 SEQUENCEとしてエンコードするのが通例です。これにより、次の48オクテットの署名が生成されます。"
    },
    {
      "indent": 6,
      "text": "30 2E 02 15 01 13 A6 39 90 59 8A 38 28 C4 07 C0 F4 D2 43 8D 99 0D F9 9A 7F 02 15 01 31 3A 2E 03 F5 41 2D DB 29 6A 22 E2 C4 55 33 55 45 67 2D 9F",
      "ja": "302Е02 15 01 13Ашзя90 598А38 28Цч07 0ФчД2чз8Дяя0ДФяЯАЩФ02 15 01 31ЗА2E 03 F5 41 2D DB 29 6A 22 E2 C4 55 33 55 45 67 2D 9F"
    },
    {
      "indent": 0,
      "text": "A.2. Test Vectors",
      "section_title": true,
      "ja": "A.2. テストベクトル"
    },
    {
      "indent": 3,
      "text": "In the following sections, we give test vectors for various key sizes and hash functions, both for DSA and ECDSA.",
      "ja": "次のセクションでは、DSAとECDSAの両方について、さまざまなキーサイズとハッシュ関数のテストベクトルを示します。"
    },
    {
      "indent": 3,
      "text": "All numbers are given in hexadecimal notation. Each signature consists of two integers, named r and s; many implementations will encode those integers into a single ASN.1 structure or with some other encoding convention, which is outside of the scope of this document. We also show the k value used internally.",
      "ja": "すべての数値は16進表記で示されています。各署名は、rおよびsという名前の2つの整数で構成されます。多くの実装は、これらの整数を単一のASN.1構造にエンコードするか、このドキュメントの範囲外である他のエンコード規則でエンコードします。内部的に使用されるk値も表示します。"
    },
    {
      "indent": 3,
      "text": "For every key, we list ten signatures, corresponding to two distinct input messages, and five of the SHA [FIPS-180-4] functions: SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512. The two input messages are the UTF-8 encoding of the strings \"sample\" and \"test\" (without the quotes), of length 48 and 32 bits, respectively.",
      "ja": "すべてのキーについて、2つの異なる入力メッセージに対応する10個の署名と、5個のSHA [FIPS-180-4]関数（SHA-1、SHA-224、SHA-256、SHA-384、SHA-512）をリストします。 2つの入力メッセージは、文字列 \"sample\"および \"test\"（引用符なし）のUTF-8エンコーディングで、それぞれ48ビットと32ビットです。"
    },
    {
      "indent": 3,
      "text": "The ECDSA examples use the standard curves described in [FIPS-186-4].",
      "ja": "ECDSAの例では、[FIPS-186-4]で説明されている標準曲線を使用します。"
    },
    {
      "indent": 0,
      "text": "A.2.1. DSA, 1024 Bits",
      "section_title": true,
      "ja": "A.2.1. DSA、1024ビット"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "key parameters:",
      "ja": "重要なパラメータ："
    },
    {
      "indent": 3,
      "text": "p = 86F5CA03DCFEB225063FF830A0C769B9DD9D6153AD91D7CE27F787C43278B447\n    E6533B86B18BED6E8A48B784A14C252C5BE0DBF60B86D6385BD2F12FB763ED88\n    73ABFD3F5BA2E0A8C0A59082EAC056935E529DAF7C610467899C77ADEDFC846C\n    881870B7B19B2B58F9BE0521A17002E3BDD6B86685EE90B3D9A1B02B782B1779",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "q = 996F967F6C8E388D9E28D01E205FBA957A5698B1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "g = 07B0F92546150B62514BB771E2A0C0CE387F03BDA6C56B505209FF25FD3C133D\n    89BBCD97E904E09114D9A7DEFDEADFC9078EA544D2E401AEECC40BB9FBBF78FD\n    87995A10A1C27CB7789B594BA7EFB5C4326A9FE59A070E136DB77175464ADCA4\n    17BE5DCE2F40D10A46A3A3943F26AB7FD9C0398FF8C76EE0A56826A8A88F1DBD",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 411602CB19A6CCC34494D79D98EF1E7ED5AF25F7",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key:",
      "ja": "公開鍵："
    },
    {
      "indent": 3,
      "text": "y = 5DF5E01DED31D0297E274E1691C192FE5868FEF9E19A84776454B100CF16F653\n    92195A38B90523E2542EE61871C0440CB87C322FC4B4D2EC5E1E7EC766E1BE8D\n    4CE935437DC11C3C8FD426338933EBFE739CB3465F4D3668C5E473508253B1E6\n    82F65CBDC4FAE93C2EA212390E54905A86E2223170B44EAA7DA5DD9FFCFB7F3B",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 7BDB6B0FF756E1BB5D53583EF979082F9AD5BD5B\nr = 2E1A0C2562B2912CAAF89186FB0F42001585DA55\ns = 29EFB6B0AFF2D7A68EB70CA313022253B9A88DF5",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 562097C06782D60C3037BA7BE104774344687649\nr = 4BC3B686AEA70145856814A6F1BB53346F02101E\ns = 410697B92295D994D21EDD2F4ADA85566F6F94C1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "   With SHA-256, message = \"sample\":\n   k = 519BA0546D0C39202A7D34D7DFA5E760B318BCFB\n   r = 81F2F5850BE5BC123C43F71A3033E9384611C545\n   s = 4CDD914B65EB6C66A8AAAD27299BEE6B035F5E89\n   With SHA-384, message = \"sample\":\n   k = 95897CD7BBB944AA932DBC579C1C09EB6FCFC595\n   r = 07F2108557EE0E3921BC1774F1CA9B410B4CE65A\n   s = 54DF70456C86FAC10FAB47C1949AB83F2C6F7595",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"sample\":\nk = 09ECE7CA27D0F5A4DD4E556C9DF1D21D28104F8B\nr = 16C3491F9B8C3FBBDD5E7A7B667057F0D8EE8E1B\ns = 02C36A127A7B89EDBB72E4FFBC71DABC7D4FC69C",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"test\":\nk = 5C842DF4F9E344EE09F056838B42C7A17F4A6433\nr = 42AB2052FD43E123F0607F115052A67DCD9C5C77\ns = 183916B0230D45B9931491D4C6B0BD2FB4AAF088",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = 4598B8EFC1A53BC8AECD58D1ABBB0C0C71E67297\nr = 6868E9964E36C1689F6037F91F28D5F2C30610F2\ns = 49CEC3ACDC83018C5BD2674ECAAD35B8CD22940F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = 5A67592E8128E03A417B0484410FB72C0B630E1A\nr = 22518C127299B0F6FDC9872B282B9E70D0790812\ns = 6837EC18F150D55DE95B5E29BE7AF5D01E4FE160",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 220156B761F6CA5E6C9F1B9CF9C24BE25F98CD89\nr = 854CF929B58D73C3CBFDC421E8D5430CD6DB5E66\ns = 91D0E0F53E22F898D158380676A871A157CDA622",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 65D2C2EEB175E370F28C75BFCDC028D22C7DBE9C\nr = 8EA47E475BA8AC6F2D821DA3BD212D11A3DEB9A0\ns = 7C670C7AD72B6C050C109E1790008097125433E8",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.2. DSA, 2048 Bits",
      "section_title": true,
      "ja": "A.2.2. DSA、2048ビット"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "key parameters:",
      "ja": "重要なパラメータ："
    },
    {
      "indent": 3,
      "text": "p = 9DB6FB5951B66BB6FE1E140F1D2CE5502374161FD6538DF1648218642F0B5C48\n    C8F7A41AADFA187324B87674FA1822B00F1ECF8136943D7C55757264E5A1A44F\n    FE012E9936E00C1D3E9310B01C7D179805D3058B2A9F4BB6F9716BFE6117C6B5\n    B3CC4D9BE341104AD4A80AD6C94E005F4B993E14F091EB51743BF33050C38DE2\n    35567E1B34C3D6A5C0CEAA1A0F368213C3D19843D0B4B09DCB9FC72D39C8DE41\n    F1BF14D4BB4563CA28371621CAD3324B6A2D392145BEBFAC748805236F5CA2FE\n    92B871CD8F9C36D3292B5509CA8CAA77A2ADFC7BFD77DDA6F71125A7456FEA15\n    3E433256A2261C6A06ED3693797E7995FAD5AABBCFBE3EDA2741E375404AE25B",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "q = F2C3119374CE76C9356990B465374A17F23F9ED35089BD969F61C6DDE9998C1F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "g = 5C7FF6B06F8F143FE8288433493E4769C4D988ACE5BE25A0E24809670716C613\n    D7B0CEE6932F8FAA7C44D2CB24523DA53FBE4F6EC3595892D1AA58C4328A06C4\n    6A15662E7EAA703A1DECF8BBB2D05DBE2EB956C142A338661D10461C0D135472\n    085057F3494309FFA73C611F78B32ADBB5740C361C9F35BE90997DB2014E2EF5\n    AA61782F52ABEB8BD6432C4DD097BC5423B285DAFB60DC364E8161F4A2A35ACA\n    3A10B1C4D203CC76A470A33AFDCBDD92959859ABD8B56E1725252D78EAC66E71\n    BA9AE3F1DD2487199874393CD4D832186800654760E1E34C09E4D155179F9EC0\n    DC4473F996BDCE6EED1CABED8B6F116F7AD9CF505DF0F998E34AB27514B0FFE7",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 69C7548C21D0DFEA6B9A51C9EAD4E27C33D3B3F180316E5BCAB92C933F0E4DBC",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key:",
      "ja": "公開鍵："
    },
    {
      "indent": 3,
      "text": "y = 667098C654426C78D7F8201EAC6C203EF030D43605032C2F1FA937E5237DBD94\n    9F34A0A2564FE126DC8B715C5141802CE0979C8246463C40E6B6BDAA2513FA61\n    1728716C2E4FD53BC95B89E69949D96512E873B9C8F8DFD499CC312882561ADE\n    CB31F658E934C0C197F2C4D96B05CBAD67381E7B768891E4DA3843D24D94CDFB\n    5126E9B8BF21E8358EE0E0A30EF13FD6A664C0DCE3731F7FB49A4845A4FD8254\n    687972A2D382599C9BAC4E0ED7998193078913032558134976410B89D2C171D1\n    23AC35FD977219597AA7D15C1A9A428E59194F75C721EBCBCFAE44696A499AFA\n    74E04299F132026601638CB87AB79190D4A0986315DA8EEC6561C938996BEADF",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 0,
      "text": "   With SHA-1, message = \"sample\":\n   k = 888FA6F7738A41BDC9846466ABDB8174C0338250AE50CE955CA16230F9CBD53E\n   r = 3A1B2DBD7489D6ED7E608FD036C83AF396E290DBD602408E8677DAABD6E7445A\n   s = D26FCBA19FA3E3058FFC02CA1596CDBB6E0D20CB37B06054F7E36DED0CDBBCCF\n   With SHA-224, message = \"sample\":\n   k = BC372967702082E1AA4FCE892209F71AE4AD25A6DFD869334E6F153BD0C4D806\n   r = DC9F4DEADA8D8FF588E98FED0AB690FFCE858DC8C79376450EB6B76C24537E2C\n   s = A65A9C3BC7BABE286B195D5DA68616DA8D47FA0097F36DD19F517327DC848CEC",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = 8926A27C40484216F052F4427CFD5647338B7B3939BC6573AF4333569D597C52\nr = EACE8BDBBE353C432A795D9EC556C6D021F7A03F42C36E9BC87E4AC7932CC809\ns = 7081E175455F9247B812B74583E9E94F9EA79BD640DC962533B0680793A38D53",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = C345D5AB3DA0A5BCB7EC8F8FB7A7E96069E03B206371EF7D83E39068EC564920\nr = B2DA945E91858834FD9BF616EBAC151EDBC4B45D27D0DD4A7F6A22739F45C00B\ns = 19048B63D9FD6BCA1D9BAE3664E1BCB97F7276C306130969F63F38FA8319021B",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"sample\":\nk = 5A12994431785485B3F5F067221517791B85A597B7A9436995C89ED0374668FC\nr = 2016ED092DC5FB669B8EFB3D1F31A91EECB199879BE0CF78F02BA062CB4C942E\ns = D0C76F84B5F091E141572A639A4FB8C230807EEA7D55C8A154A224400AFF2351",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"test\":\nk = 6EEA486F9D41A037B2C640BC5645694FF8FF4B98D066A25F76BE641CCB24BA4F\nr = C18270A93CFC6063F57A4DFA86024F700D980E4CF4E2CB65A504397273D98EA0\ns = 414F22E5F31A8B6D33295C7539C1C1BA3A6160D7D68D50AC0D3A5BEAC2884FAA",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = 06BD4C05ED74719106223BE33F2D95DA6B3B541DAD7BFBD7AC508213B6DA6670\nr = 272ABA31572F6CC55E30BF616B7A265312018DD325BE031BE0CC82AA17870EA3\ns = E9CC286A52CCE201586722D36D1E917EB96A4EBDB47932F9576AC645B3A60806",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = 1D6CE6DDA1C5D37307839CD03AB0A5CBB18E60D800937D67DFB4479AAC8DEAD7\nr = 8190012A1969F9957D56FCCAAD223186F423398D58EF5B3CEFD5A4146A4476F0\ns = 7452A53F7075D417B4B013B278D1BB8BBD21863F5E7B1CEE679CF2188E1AB19E",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 206E61F73DBE1B2DC8BE736B22B079E9DACD974DB00EEBBC5B64CAD39CF9F91C\nr = 239E66DDBE8F8C230A3D071D601B6FFBDFB5901F94D444C6AF56F732BEB954BE\ns = 6BD737513D5E72FE85D1C750E0F73921FE299B945AAD1C802F15C26A43D34961",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = AFF1651E4CD6036D57AA8B2A05CCF1A9D5A40166340ECBBDC55BE10B568AA0AA\nr = 89EC4BB1400ECCFF8E7D9AA515CD1DE7803F2DAFF09693EE7FD1353E90A68307\ns = C9F0BDABCC0D880BB137A994CC7F3980CE91CC10FAF529FC46565B15CEA854E1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.3. ECDSA, 192 Bits (Prime Field)",
      "section_title": true,
      "ja": "A.2.3. ECDSA、192ビット（プライムフィールド）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST P-192",
      "ja": "曲線：NIST P-192"
    },
    {
      "indent": 3,
      "text": "q = FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\n(qlen = 192 bits)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 6FAB034934E4C0FC9AE67F5B5659A9D7D1FEFD187EE09FD4",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = AC2C77F529F91689FEA0EA5EFEC7F210D8EEA0B9E047ED56",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Uy = 3BC723E57670BD4887EBC732C523063D0A7C957BC97C1C43",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 37D7CA00D2C7B0E5E412AC03BD44BA837FDD5B28CD3B0021\nr = 98C6BD12B23EAF5E2A2045132086BE3EB8EBD62ABF6698FF\ns = 57A22B07DEA9530F8DE9471B1DC6624472E8E2844BC25B64",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 4381526B3FC1E7128F202E194505592F01D5FF4C5AF015D8\nr = A1F00DAD97AEEC91C95585F36200C65F3C01812AA60378F5\ns = E07EC1304C7C6C9DEBBE980B9692668F81D4DE7922A0F97A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = 32B1B6D7D42A05CB449065727A84804FB1A3E34D8F261496\nr = 4B0B8CE98A92866A2820E20AA6B75B56382E0F9BFD5ECB55\ns = CCDB006926EA9565CBADC840829D8C384E06DE1F1E381B85",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = 4730005C4FCB01834C063A7B6760096DBE284B8252EF4311\nr = DA63BF0B9ABCF948FBB1E9167F136145F7A20426DCC287D5\ns = C3AA2C960972BD7A2003A57E1C4C77F0578F8AE95E31EC5E",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "   With SHA-512, message = \"sample\":\n   k = A2AC7AB055E4F20692D49209544C203A7D1F2C0BFBC75DB1\n   r = 4D60C5AB1996BD848343B31C00850205E2EA6922DAC2E4B8\n   s = 3F6E837448F027A1BF4B34E796E32A811CBB4050908D8F67\n   With SHA-1, message = \"test\":\n   k = D9CF9C3D3297D3260773A1DA7418DB5537AB8DD93DE7FA25\n   r = 0F2141A0EBBC44D2E1AF90A50EBCFCE5E197B3B7D4DE036D\n   s = EB18BC9E1F3D7387500CB99CF5F7C157070A8961E38700B7",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = F5DC805F76EF851800700CCE82E7B98D8911B7D510059FBE\nr = 6945A1C1D1B2206B8145548F633BB61CEF04891BAF26ED34\ns = B7FB7FDFC339C0B9BD61A9F5A8EAF9BE58FC5CBA2CB15293",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = 5C4CE89CF56D9E7C77C8585339B006B97B5F0680B4306C6C\nr = 3A718BD8B4926C3B52EE6BBE67EF79B18CB6EB62B1AD97AE\ns = 5662E6848A4A19B1F1AE2F72ACD4B8BBE50F1EAC65D9124F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 5AFEFB5D3393261B828DB6C91FBC68C230727B030C975693\nr = B234B60B4DB75A733E19280A7A6034BD6B1EE88AF5332367\ns = 7994090B2D59BB782BE57E74A44C9A1C700413F8ABEFE77A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 0758753A5254759C7CFBAD2E2D9B0792EEE44136C9480527\nr = FE4F4AE86A58B6507946715934FE2D8FF9D95B6B098FE739\ns = 74CF5605C98FBA0E1EF34D4B5A1577A7DCF59457CAE52290",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.4. ECDSA, 224 Bits (Prime Field)",
      "section_title": true,
      "ja": "A.2.4. ECDSA、224ビット（プライムフィールド）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST P-224",
      "ja": "曲線：NIST P-224"
    },
    {
      "indent": 3,
      "text": "q = FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\n(qlen = 224 bits)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = F220266E1105BFE3083E03EC7A3A654651F45E37167E88600BF257C1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 00CF08DA5AD719E42707FA431292DEA11244D64FC51610D94B130D6C",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Uy = EEAB6F3DEBE455E3DBF85416F7030CBD94F34F2D6F232C69F3C1385A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 7EEFADD91110D8DE6C2C470831387C50D3357F7F4D477054B8B426BC\nr = 22226F9D40A96E19C4A301CE5B74B115303C0F3A4FD30FC257FB57AC\ns = 66D1CDD83E3AF75605DD6E2FEFF196D30AA7ED7A2EDF7AF475403D69",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = C1D1F2F10881088301880506805FEB4825FE09ACB6816C36991AA06D\nr = 1CDFE6662DDE1E4A1EC4CDEDF6A1F5A2FB7FBD9145C12113E6ABFD3E\ns = A6694FD7718A21053F225D3F46197CA699D45006C06F871808F43EBC",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = AD3029E0278F80643DE33917CE6908C70A8FF50A411F06E41DEDFCDC\nr = 61AA3DA010E8E8406C656BC477A7A7189895E7E840CDFE8FF42307BA\ns = BC814050DAB5D23770879494F9E0A680DC1AF7161991BDE692B10101",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = 52B40F5A9D3D13040F494E83D3906C6079F29981035C7BD51E5CAC40\nr = 0B115E5E36F0F9EC81F1325A5952878D745E19D7BB3EABFABA77E953\ns = 830F34CCDFE826CCFDC81EB4129772E20E122348A2BBD889A1B1AF1D",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "   With SHA-512, message = \"sample\":\n   k = 9DB103FFEDEDF9CFDBA05184F925400C1653B8501BAB89CEA0FBEC14\n   r = 074BD1D979D5F32BF958DDC61E4FB4872ADCAFEB2256497CDAC30397\n   s = A4CECA196C3D5A1FF31027B33185DC8EE43F288B21AB342E5D8EB084\n   With SHA-1, message = \"test\":\n   k = 2519178F82C3F0E4F87ED5883A4E114E5B7A6E374043D8EFD329C253\n   r = DEAA646EC2AF2EA8AD53ED66B2E2DDAA49A12EFD8356561451F3E21C\n   s = 95987796F6CF2062AB8135271DE56AE55366C045F6D9593F53787BD2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = DF8B38D40DCA3E077D0AC520BF56B6D565134D9B5F2EAE0D34900524\nr = C441CE8E261DED634E4CF84910E4C5D1D22C5CF3B732BB204DBEF019\ns = 902F42847A63BDC5F6046ADA114953120F99442D76510150F372A3F4",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = FF86F57924DA248D6E44E8154EB69F0AE2AEBAEE9931D0B5A969F904\nr = AD04DDE87B84747A243A631EA47A1BA6D1FAA059149AD2440DE6FBA6\ns = 178D49B1AE90E3D8B629BE3DB5683915F4E8C99FDF6E666CF37ADCFD",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 7046742B839478C1B5BD31DB2E862AD868E1A45C863585B5F22BDC2D\nr = 389B92682E399B26518A95506B52C03BC9379A9DADF3391A21FB0EA4\ns = 414A718ED3249FF6DBC5B50C27F71F01F070944DA22AB1F78F559AAB",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = E39C2AA4EA6BE2306C72126D40ED77BF9739BB4D6EF2BBB1DCB6169D\nr = 049F050477C5ADD858CAC56208394B5A55BAEBBE887FDF765047C17C\ns = 077EB13E7005929CEFA3CD0403C7CDCC077ADF4E44F3C41B2F60ECFF",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.5. ECDSA, 256 Bits (Prime Field)",
      "section_title": true,
      "ja": "A.2.5. ECDSA、256ビット（Prime Field）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST P-256",
      "ja": "曲線：NIST P-256"
    },
    {
      "indent": 3,
      "text": "q = FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\n(qlen = 256 bits)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = C9AFA9D845BA75166B5C215767B1D6934E50C3DB36E89B127B8A622B120F6721",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Uy = 7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 882905F1227FD620FBF2ABF21244F0BA83D0DC3A9103DBBEE43A1FB858109DB4\nr = 61340C88C3AAEBEB4F6D667F672CA9759A6CCAA9FA8811313039EE4A35471D32\ns = 6D7F147DAC089441BB2E2FE8F7A3FA264B9C475098FDCF6E00D7C996E1B8B7EB",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 103F90EE9DC52E5E7FB5132B7033C63066D194321491862059967C715985D473\nr = 53B2FFF5D1752B2C689DF257C04C40A587FABABB3F6FC2702F1343AF7CA9AA3F\ns = B9AFB64FDC03DC1A131C7D2386D11E349F070AA432A4ACC918BEA988BF75C74C",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = A6E3C57DD01ABE90086538398355DD4C3B17AA873382B0F24D6129493D8AAD60\nr = EFD48B2AACB6A8FD1140DD9CD45E81D69D2C877B56AAF991C34D0EA84EAF3716\ns = F7CB1C942D657C41D436C7A1B6E29F65F3E900DBB9AFF4064DC4AB2F843ACDA8",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = 09F634B188CEFD98E7EC88B1AA9852D734D0BC272F7D2A47DECC6EBEB375AAD4\nr = 0EAFEA039B20E9B42309FB1D89E213057CBF973DC0CFC8F129EDDDC800EF7719\ns = 4861F0491E6998B9455193E34E7B0D284DDD7149A74B95B9261F13ABDE940954",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "   With SHA-512, message = \"sample\":\n   k = 5FA81C63109BADB88C1F367B47DA606DA28CAD69AA22C4FE6AD7DF73A7173AA5\n   r = 8496A60B5E9B47C825488827E0495B0E3FA109EC4568FD3F8D1097678EB97F00\n   s = 2362AB1ADBE2B8ADF9CB9EDAB740EA6049C028114F2460F96554F61FAE3302FE\n   With SHA-1, message = \"test\":\n   k = 8C9520267C55D6B980DF741E56B4ADEE114D84FBFA2E62137954164028632A2E\n   r = 0CBCC86FD6ABD1D99E703E1EC50069EE5C0B4BA4B9AC60E409E8EC5910D81A89\n   s = 01B9D7B73DFAA60D5651EC4591A0136F87653E0FD780C3B1BC872FFDEAE479B1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = 669F4426F2688B8BE0DB3A6BD1989BDAEFFF84B649EEB84F3DD26080F667FAA7\nr = C37EDB6F0AE79D47C3C27E962FA269BB4F441770357E114EE511F662EC34A692\ns = C820053A05791E521FCAAD6042D40AEA1D6B1A540138558F47D0719800E18F2D",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = D16B6AE827F17175E040871A1C7EC3500192C4C92677336EC2537ACAEE0008E0\nr = F1ABB023518351CD71D881567B1EA663ED3EFCF6C5132B354F28D3B0B7D38367\ns = 019F4113742A2B14BD25926B49C649155F267E60D3814B4C0CC84250E46F0083",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 16AEFFA357260B04B1DD199693960740066C1A8F3E8EDD79070AA914D361B3B8\nr = 83910E8B48BB0C74244EBDF7F07A1C5413D61472BD941EF3920E623FBCCEBEB6\ns = 8DDBEC54CF8CD5874883841D712142A56A8D0F218F5003CB0296B6B509619F2C",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 6915D11632ACA3C40D5D51C08DAF9C555933819548784480E93499000D9F0B7F\nr = 461D93F31B6540894788FD206C07CFA0CC35F46FA3C91816FFF1040AD1581A04\ns = 39AF9F15DE0DB8D97E72719C74820D304CE5226E32DEDAE67519E840D1194E55",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.6. ECDSA, 384 Bits (Prime Field)",
      "section_title": true,
      "ja": "A.2.6. ECDSA、384ビット（プライムフィールド）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST P-384",
      "ja": "曲線：NIST P-384"
    },
    {
      "indent": 3,
      "text": "q = FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF\n    581A0DB248B0A77AECEC196ACCC52973\n(qlen = 384 bits)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 6B9D3DAD2E1B8C1C05B19875B6659F4DE23C3B667BF297BA9AA47740787137D8\n    96D5724E4C70A825F872C9EA60D2EDF5",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64\n     DEF8F0EA9055866064A254515480BC13",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Uy = 8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1\n     288B231C3AE0D4FE7344FD2533264720",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 4471EF7518BB2C7C20F62EAE1C387AD0C5E8E470995DB4ACF694466E6AB09663\n    0F29E5938D25106C3C340045A2DB01A7\nr = EC748D839243D6FBEF4FC5C4859A7DFFD7F3ABDDF72014540C16D73309834FA3\n    7B9BA002899F6FDA3A4A9386790D4EB2\ns = A3BCFA947BEEF4732BF247AC17F71676CB31A847B9FF0CBC9C9ED4C1A5B3FACF\n    26F49CA031D4857570CCB5CA4424A443",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = A4E4D2F0E729EB786B31FC20AD5D849E304450E0AE8E3E341134A5C1AFA03CAB\n    8083EE4E3C45B06A5899EA56C51B5879\nr = 42356E76B55A6D9B4631C865445DBE54E056D3B3431766D0509244793C3F9366\n    450F76EE3DE43F5A125333A6BE060122\ns = 9DA0C81787064021E78DF658F2FBB0B042BF304665DB721F077A4298B095E483\n    4C082C03D83028EFBF93A3C23940CA8D",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = 180AE9F9AEC5438A44BC159A1FCB277C7BE54FA20E7CF404B490650A8ACC414E\n    375572342863C899F9F2EDF9747A9B60\nr = 21B13D1E013C7FA1392D03C5F99AF8B30C570C6F98D4EA8E354B63A21D3DAA33\n    BDE1E888E63355D92FA2B3C36D8FB2CD\ns = F3AA443FB107745BF4BD77CB3891674632068A10CA67E3D45DB2266FA7D1FEEB\n    EFDC63ECCD1AC42EC0CB8668A4FA0AB0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = 94ED910D1A099DAD3254E9242AE85ABDE4BA15168EAF0CA87A555FD56D10FBCA\n    2907E3E83BA95368623B8C4686915CF9\nr = 94EDBB92A5ECB8AAD4736E56C691916B3F88140666CE9FA73D64C4EA95AD133C\n    81A648152E44ACF96E36DD1E80FABE46\ns = 99EF4AEB15F178CEA1FE40DB2603138F130E740A19624526203B6351D0A3A94F\n    A329C145786E679E7B82C71A38628AC8",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"sample\":\nk = 92FC3C7183A883E24216D1141F1A8976C5B0DD797DFA597E3D7B32198BD35331\n    A4E966532593A52980D0E3AAA5E10EC3\nr = ED0959D5880AB2D869AE7F6C2915C6D60F96507F9CB3E047C0046861DA4A799C\n    FE30F35CC900056D7C99CD7882433709\ns = 512C8CCEEE3890A84058CE1E22DBC2198F42323CE8ACA9135329F03C068E5112\n    DC7CC3EF3446DEFCEB01A45C2667FDD5",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"test\":\nk = 66CC2C8F4D303FC962E5FF6A27BD79F84EC812DDAE58CF5243B64A4AD8094D47\n    EC3727F3A3C186C15054492E30698497\nr = 4BC35D3A50EF4E30576F58CD96CE6BF638025EE624004A1F7789A8B8E43D0678\n    ACD9D29876DAF46638645F7F404B11C7\ns = D5A6326C494ED3FF614703878961C0FDE7B2C278F9A65FD8C4B7186201A29916\n    95BA1C84541327E966FA7B50F7382282",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = 18FA39DB95AA5F561F30FA3591DC59C0FA3653A80DAFFA0B48D1A4C6DFCBFF6E\n    3D33BE4DC5EB8886A8ECD093F2935726\nr = E8C9D0B6EA72A0E7837FEA1D14A1A9557F29FAA45D3E7EE888FC5BF954B5E624\n    64A9A817C47FF78B8C11066B24080E72\ns = 07041D4A7A0379AC7232FF72E6F77B6DDB8F09B16CCE0EC3286B2BD43FA8C614\n    1C53EA5ABEF0D8231077A04540A96B66",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = 0CFAC37587532347DC3389FDC98286BBA8C73807285B184C83E62E26C401C0FA\n    A48DD070BA79921A3457ABFF2D630AD7\nr = 6D6DEFAC9AB64DABAFE36C6BF510352A4CC27001263638E5B16D9BB51D451559\n    F918EEDAF2293BE5B475CC8F0188636B\ns = 2D46F3BECBCC523D5F1A1256BF0C9B024D879BA9E838144C8BA6BAEB4B53B47D\n    51AB373F9845C0514EEFB14024787265",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 015EE46A5BF88773ED9123A5AB0807962D193719503C527B031B4C2D225092AD\n    A71F4A459BC0DA98ADB95837DB8312EA\nr = 8203B63D3C853E8D77227FB377BCF7B7B772E97892A80F36AB775D509D7A5FEB\n    0542A7F0812998DA8F1DD3CA3CF023DB\ns = DDD0760448D42D8A43AF45AF836FCE4DE8BE06B485E9B61B827C2F13173923E0\n    6A739F040649A667BF3B828246BAA5A5",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 3780C4F67CB15518B6ACAE34C9F83568D2E12E47DEAB6C50A4E4EE5319D1E8CE\n    0E2CC8A136036DC4B9C00E6888F66B6C\nr = A0D5D090C9980FAF3C2CE57B7AE951D31977DD11C775D314AF55F76C676447D0\n    6FB6495CD21B4B6E340FC236584FB277\ns = 976984E59B4C77B0E8E4460DCA3D9F20E07B9BB1F63BEEFAF576F6B2E8B22463\n    4A2092CD3792E0159AD9CEE37659C736",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.7. ECDSA, 521 Bits (Prime Field)",
      "section_title": true,
      "ja": "A.2.7. ECDSA、521ビット（プライムフィールド）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST P-521",
      "ja": "曲線：NIST P-521"
    },
    {
      "indent": 3,
      "text": "q = 1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n    FFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386\n    409\n(qlen = 521 bits)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 0FAD06DAA62BA3B25D2FB40133DA757205DE67F5BB0018FEE8C86E1B68C7E75C\n    AA896EB32F1F47C70855836A6D16FCC1466F6D8FBEC67DB89EC0C08B0E996B83\n    538",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 1894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD3\n     71123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F502\n     3A4\n\nUy = 0493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A2\n     8A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDF\n     CF5",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 089C071B419E1C2820962321787258469511958E80582E95D8378E0C2CCDB3CB\n    42BEDE42F50E3FA3C71F5A76724281D31D9C89F0F91FC1BE4918DB1C03A5838D\n    0F9\nr = 0343B6EC45728975EA5CBA6659BBB6062A5FF89EEA58BE3C80B619F322C87910\n    FE092F7D45BB0F8EEE01ED3F20BABEC079D202AE677B243AB40B5431D497C55D\n    75D\ns = 0E7B0E675A9B24413D448B8CC119D2BF7B2D2DF032741C096634D6D65D0DBE3D\n    5694625FB9E8104D3B842C1B0E2D0B98BEA19341E8676AEF66AE4EBA3D5475D5\n    D16\n",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 121415EC2CD7726330A61F7F3FA5DE14BE9436019C4DB8CB4041F3B54CF31BE0\n    493EE3F427FB906393D895A19C9523F3A1D54BB8702BD4AA9C99DAB2597B9211\n    3F3\nr = 1776331CFCDF927D666E032E00CF776187BC9FDD8E69D0DABB4109FFE1B5E2A3\n    0715F4CC923A4A5E94D2503E9ACFED92857B7F31D7152E0F8C00C15FF3D87E2E\n    D2E\ns = 050CB5265417FE2320BBB5A122B8E1A32BD699089851128E360E620A30C7E17B\n    A41A666AF126CE100E5799B153B60528D5300D08489CA9178FB610A2006C254B\n    41F\n\nWith SHA-256, message = \"sample\":\nk = 0EDF38AFCAAECAB4383358B34D67C9F2216C8382AAEA44A3DAD5FDC9C3257576\n    1793FEF24EB0FC276DFC4F6E3EC476752F043CF01415387470BCBD8678ED2C7E\n    1A0\nr = 1511BB4D675114FE266FC4372B87682BAECC01D3CC62CF2303C92B3526012659\n    D16876E25C7C1E57648F23B73564D67F61C6F14D527D54972810421E7D87589E\n    1A7\ns = 04A171143A83163D6DF460AAF61522695F207A58B95C0644D87E52AA1A347916\n    E4F7A72930B1BC06DBE22CE3F58264AFD23704CBB63B29B931F7DE6C9D949A7E\n    CFC\n\nWith SHA-384, message = \"sample\":\nk = 1546A108BC23A15D6F21872F7DED661FA8431DDBD922D0DCDB77CC878C8553FF\n    AD064C95A920A750AC9137E527390D2D92F153E66196966EA554D9ADFCB109C4\n    211\nr = 1EA842A0E17D2DE4F92C15315C63DDF72685C18195C2BB95E572B9C5136CA4B4\n    B576AD712A52BE9730627D16054BA40CC0B8D3FF035B12AE75168397F5D50C67\n    451\ns = 1F21A3CEE066E1961025FB048BD5FE2B7924D0CD797BABE0A83B66F1E35EEAF5\n    FDE143FA85DC394A7DEE766523393784484BDF3E00114A1C857CDE1AA203DB65\n    D61\n\nWith SHA-512, message = \"sample\":\nk = 1DAE2EA071F8110DC26882D4D5EAE0621A3256FC8847FB9022E2B7D28E6F1019\n    8B1574FDD03A9053C08A1854A168AA5A57470EC97DD5CE090124EF52A2F7ECBF\n    FD3\nr = 0C328FAFCBD79DD77850370C46325D987CB525569FB63C5D3BC53950E6D4C5F1\n    74E25A1EE9017B5D450606ADD152B534931D7D4E8455CC91F9B15BF05EC36E37\n    7FA\ns = 0617CCE7CF5064806C467F678D3B4080D6F1CC50AF26CA209417308281B68AF2\n    82623EAA63E5B5C0723D8B8C37FF0777B1A20F8CCB1DCCC43997F1EE0E44DA4A\n    67A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"test\":\nk = 0BB9F2BF4FE1038CCF4DABD7139A56F6FD8BB1386561BD3C6A4FC818B20DF5DD\n    BA80795A947107A1AB9D12DAA615B1ADE4F7A9DC05E8E6311150F47F5C57CE8B\n    222\nr = 13BAD9F29ABE20DE37EBEB823C252CA0F63361284015A3BF430A46AAA80B87B0\n    693F0694BD88AFE4E661FC33B094CD3B7963BED5A727ED8BD6A3A202ABE009D0\n    367\ns = 1E9BB81FF7944CA409AD138DBBEE228E1AFCC0C890FC78EC8604639CB0DBDC90\n    F717A99EAD9D272855D00162EE9527567DD6A92CBD629805C0445282BBC91679\n    7FF\n\nWith SHA-224, message = \"test\":\nk = 040D09FCF3C8A5F62CF4FB223CBBB2B9937F6B0577C27020A99602C25A011369\n    87E452988781484EDBBCF1C47E554E7FC901BC3085E5206D9F619CFF07E73D6F\n    706\nr = 1C7ED902E123E6815546065A2C4AF977B22AA8EADDB68B2C1110E7EA44D42086\n    BFE4A34B67DDC0E17E96536E358219B23A706C6A6E16BA77B65E1C595D43CAE1\n    7FB\ns = 177336676304FCB343CE028B38E7B4FBA76C1C1B277DA18CAD2A8478B2A9A9F5\n    BEC0F3BA04F35DB3E4263569EC6AADE8C92746E4C82F8299AE1B8F1739F8FD51\n    9A4\n\nWith SHA-256, message = \"test\":\nk = 01DE74955EFAABC4C4F17F8E84D881D1310B5392D7700275F82F145C61E84384\n    1AF09035BF7A6210F5A431A6A9E81C9323354A9E69135D44EBD2FCAA7731B909\n    258\nr = 00E871C4A14F993C6C7369501900C4BC1E9C7B0B4BA44E04868B30B41D807104\n    2EB28C4C250411D0CE08CD197E4188EA4876F279F90B3D8D74A3C76E6F1E4656\n    AA8\ns = 0CD52DBAA33B063C3A6CD8058A1FB0A46A4754B034FCC644766CA14DA8CA5CA9\n    FDE00E88C1AD60CCBA759025299079D7A427EC3CC5B619BFBC828E7769BCD694\n    E86\n\nWith SHA-384, message = \"test\":\nk = 1F1FC4A349A7DA9A9E116BFDD055DC08E78252FF8E23AC276AC88B1770AE0B5D\n    CEB1ED14A4916B769A523CE1E90BA22846AF11DF8B300C38818F713DADD85DE0\n    C88\nr = 14BEE21A18B6D8B3C93FAB08D43E739707953244FDBE924FA926D76669E7AC8C\n    89DF62ED8975C2D8397A65A49DCC09F6B0AC62272741924D479354D74FF60755\n    78C\ns = 133330865C067A0EAF72362A65E2D7BC4E461E8C8995C3B6226A21BD1AA78F0E\n    D94FE536A0DCA35534F0CD1510C41525D163FE9D74D134881E35141ED5E8E95B\n    979",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 16200813020EC986863BEDFC1B121F605C1215645018AEA1A7B215A564DE9EB1\n    B38A67AA1128B80CE391C4FB71187654AAA3431027BFC7F395766CA988C964DC\n    56D\nr = 13E99020ABF5CEE7525D16B69B229652AB6BDF2AFFCAEF38773B4B7D08725F10\n    CDB93482FDCC54EDCEE91ECA4166B2A7C6265EF0CE2BD7051B7CEF945BABD47E\n    E6D\ns = 1FBD0013C674AA79CB39849527916CE301C66EA7CE8B80682786AD60F98F7E78\n    A19CA69EFF5C57400E3B3A0AD66CE0978214D13BAF4E9AC60752F7B155E2DE4D\n    CE3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.8. ECDSA, 163 Bits (Binary Field, Koblitz Curve)",
      "section_title": true,
      "ja": "A.2.8. ECDSA、163ビット（バイナリフィールド、コブリッツ曲線）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST K-163",
      "ja": "曲線：NIST K-163"
    },
    {
      "indent": 3,
      "text": "q = 4000000000000000000020108A2E0CC0D99F8A5EF\n(qlen = 163 bits)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 09A4D6792295A7F730FC3F2B49CBC0F62E862272F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 79AEE090DB05EC252D5CB4452F356BE198A4FF96F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Uy = 782E29634DDC9A31EF40386E896BAA18B53AFA5A3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 09744429FA741D12DE2BE8316E35E84DB9E5DF1CD\nr = 30C45B80BA0E1406C4EFBBB7000D6DE4FA465D505\ns = 38D87DF89493522FC4CD7DE1553BD9DBBA2123011",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 323E7B28BFD64E6082F5B12110AA87BC0D6A6E159\nr = 38A2749F7EA13BD5DA0C76C842F512D5A65FFAF32\ns = 064F841F70112B793FD773F5606BFA5AC2A04C1E8",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = 23AF4074C90A02B3FE61D286D5C87F425E6BDD81B\nr = 113A63990598A3828C407C0F4D2438D990DF99A7F\ns = 1313A2E03F5412DDB296A22E2C455335545672D9F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = 2132ABE0ED518487D3E4FA7FD24F8BED1F29CCFCE\nr = 34D4DE955871BB84FEA4E7D068BA5E9A11BD8B6C4\ns = 2BAAF4D4FD57F175C405A2F39F9755D9045C820BD",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "   With SHA-512, message = \"sample\":\n   k = 00BBCC2F39939388FDFE841892537EC7B1FF33AA3\n   r = 38E487F218D696A7323B891F0CCF055D895B77ADC\n   s = 0972D7721093F9B3835A5EB7F0442FA8DCAA873C4\n   With SHA-1, message = \"test\":\n   k = 14CAB9192F39C8A0EA8E81B4B87574228C99CD681\n   r = 1375BEF93F21582F601497036A7DC8014A99C2B79\n   s = 254B7F1472FFFEE9002D081BB8CE819CCE6E687F9",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = 091DD986F38EB936BE053DD6ACE3419D2642ADE8D\nr = 110F17EF209957214E35E8C2E83CBE73B3BFDEE2C\ns = 057D5022392D359851B95DEC2444012502A5349CB",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = 193649CE51F0CFF0784CFC47628F4FA854A93F7A2\nr = 0354D5CD24F9C41F85D02E856FA2B0001C83AF53E\ns = 020B200677731CD4FE48612A92F72A19853A82B65",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 37C73C6F8B404EC83DA17A6EBCA724B3FF1F7EEBA\nr = 11B6A84206515495AD8DBB2E5785D6D018D75817E\ns = 1A7D4C1E17D4030A5D748ADEA785C77A54581F6D0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 331AD98D3186F73967B1E0B120C80B1E22EFC2988\nr = 148934745B351F6367FF5BB56B1848A2F508902A9\ns = 36214B19444FAB504DBA61D4D6FF2D2F9640F4837",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.9. ECDSA, 233 Bits (Binary Field, Koblitz Curve)",
      "section_title": true,
      "ja": "A.2.9. ECDSA、233ビット（バイナリフィールド、コブリッツ曲線）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST K-233",
      "ja": "曲線：NIST K-233"
    },
    {
      "indent": 3,
      "text": "q = 8000000000000000000000000000069D5BB915BCD46EFB1AD5F173ABDF\n(qlen = 232 bits)\n",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 103B2142BDC2A3C3B55080D09DF1808F79336DA2399F5CA7171D1BE9B0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 0682886F36C68473C1A221720C2B12B9BE13458BA907E1C4736595779F2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Uy = 1B20639B41BE0927090999B7817A3B3928D20503A39546044EC13A10309",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 273179E3E12C69591AD3DD9C7CCE3985820E3913AB6696EB14486DDBCF\nr = 5474541C988A9A1F73899F55EF28963DFFBBF0C2B1A1EE787C6A76C6A4\ns = 46301F9EC6624257BFC70D72186F17898EDBD0A3522560A88DD1B7D45A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 71626A309D9CD80AD0B975D757FE6BF4B84E49F8F34C780070D7746F19\nr = 667F2FCE3E1C497EBD8E4B7C6372A8234003FE4ED6D4515814E7E11430\ns = 6A1C41340DAA730320DB9475F10E29A127D7AE3432F155E1F7954E1B57",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = 73552F9CAC5774F74F485FA253871F2109A0C86040552EAA67DBA92DC9\nr = 38AD9C1D2CB29906E7D63C24601AC55736B438FB14F4093D6C32F63A10\ns = 647AAD2599C21B6EE89BE7FF957D98F684B7921DE1FD3CC82C079624F4",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = 17D726A67539C609BD99E29AA3737EF247724B71455C3B6310034038C8\nr = 0C6510F57559C36FBCFF8C7BA4B81853DC618AD0BAAB03CFFDF3FD09FD\ns = 0AD331EE1C9B91A88BA77997235769C60AD07EE69E11F7137E17C5CF67",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "   With SHA-512, message = \"sample\":\n   k = 0E535C328774CDE546BE3AF5D7FCD263872F107E807435105BA2FDC166\n   r = 47C4AC1B344028CC740BA7BB9F8AA59D6390E3158153D4F2ADE4B74950\n   s = 26CE0CDE18A1B884B3EE1A879C13B42F11BB7C85F7A3745C8BECEC8E6E\n   With SHA-1, message = \"test\":\n   k = 1D8BBF5CB6EFFA270A1CDC22C81E269F0CC16E27151E0A460BA9B51AFF\n   r = 4780B2DE4BAA5613872179AD90664249842E8B96FCD5653B55DD63EED4\n   s = 6AF46BA322E21D4A88DAEC1650EF38774231276266D6A45ED6A64ECB44",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = 67634D0ABA2C9BF7AE54846F26DCD166E7100654BCE6FDC96667631AA2\nr = 61D9CC8C842DF19B3D9F4BDA0D0E14A957357ADABC239444610FB39AEA\ns = 66432278891CB594BA8D08A0C556053D15917E53449E03C2EF88474CF6",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = 2CE5AEDC155ACC0DDC5E679EBACFD21308362E5EFC05C5E99B2557A8D7\nr = 05E4E6B4DB0E13034E7F1F2E5DBAB766D37C15AE4056C7EE607C8AC7F4\ns = 5FC46AA489BF828B34FBAD25EC432190F161BEA8F60D3FCADB0EE3B725",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 1B4BD3903E74FD0B31E23F956C70062014DFEFEE21832032EA5352A055\nr = 50F1EFEDFFEC1088024620280EE0D7641542E4D4B5D61DB32358FC571B\ns = 4614EAE449927A9EB2FCC42EA3E955B43D194087719511A007EC9217A5",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 1775ED919CA491B5B014C5D5E86AF53578B5A7976378F192AF665CB705\nr = 6FE6D0D3A953BB66BB01BC6B9EDFAD9F35E88277E5768D1B214395320F\ns = 7C01A236E4BFF0A771050AD01EC1D24025D3130BBD9E4E81978EB3EC09",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.10. ECDSA, 283 Bits (Binary Field, Koblitz Curve)",
      "section_title": true,
      "ja": "A.2.10. ECDSA、283ビット（バイナリフィールド、コブリッツ曲線）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST K-283",
      "ja": "曲線：NIST K-283"
    },
    {
      "indent": 3,
      "text": "q = 1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9AE2ED07577265DFF7F94451E061 E163C61 (qlen = 281 bits)",
      "ja": "q = 1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9AE2ED07577265DFF7F94451E061 E163C61（qlen = 281ビット）"
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 06A0777356E87B89BA1ED3A3D845357BE332173C8F7A65BDC7DB4FAB3C4CC79A CC8194E",
      "ja": "x = 06A0777356E87B89BA1ED3A3D845357BE332173C8F7A65BDC7DB4FAB3C4CC79A CC8194E"
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 25330D0A651D5A20DC6389BC02345117725640AEC3C126612CE444EDD19649BD ECC03D6",
      "ja": "Ux = 25330D0A651D5A20DC6389BC02345117725640AEC3C126612CE444EDD19649BD ECC03D6"
    },
    {
      "indent": 3,
      "text": "Uy = 505BD60A4B67182474EC4D1C668A73140F70504A68F39EFCD972487E9530E050 8A76193",
      "ja": "Uy = 505BD60A4B67182474EC4D1C668A73140F70504A68F39EFCD972487E9530E050 8A76193"
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\": k = 0A96F788DECAF6C9DBE24DC75ABA6EAAE85E7AB003C8D4F83CB1540625B2993B F445692 r = 1B66D1E33FBDB6E107A69B610995C93C744CEBAEAF623CB42737C27D60188BD1 D045A68 s = 02E45B62C9C258643532FD536594B46C63B063946494F95DAFF8759FD5525023 24295C5",
      "ja": "SHA-1を使用した場合、メッセージ= \"sample\"：k = 0A96F788DECAF6C9DBE24DC75ABA6EAAE85E7AB003C8D4F83CB1540625B2993B F445692 r = 1B66D1E33FBDB6E107A69B610995C93C744CEBAEA462459B46B46B63B64B63B6363BB63B6363BB63B63B63B63B63B6363B64C63B64B63B63B63B64B63B63B64C63B64B63B64B63B64B63B64B63B63B64B63B64C63B64B63B64C63A64C63B64B63B64B63B63B63B64C63B64C63B64C63B64B63B64C63B64C63B64C63B64C63B64C63B64C63B64C63B64C64C64B64C64B64C64B64C64B64B64C6D64E64B64B64E64E64B64B64E64E64E64E64E64〜断念された"
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\": k = 1B4C4E3B2F6B08B5991BD2BDDE277A7016DA527AD0AAE5BC61B64C5A0EE63E8B 502EF61 r = 018CF2F371BE86BB62E02B27CDE56DDAC83CCFBB3141FC59AEE022B66AC1A60D BBD8B76 s = 1854E02A381295EA7F184CEE71AB7222D6974522D3B99B309B1A8025EB84118A 28BF20E",
      "ja": "SHA-224と、メッセージ= \"サンプル\"：K = 1B4C4E3B2F6B08B5991BD2BDDE277A7016DA527AD0AAE5BC61B64C5A0EE63E8B 502EF61 R = 018CF2F371BE86BB62E02B27CDE56DDAC83CCFBB3141FC59AEE022B66AC1A60D BBD8B76 S = 1854E02A381295EA7F184CEE71AB7222D6974522D3B99B309B1A8025EB84118A 28BF20E"
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\": k = 1CEB9E8E0DFF53CE687DEB81339ACA3C98E7A657D5A9499EF779F887A934408E CBE5A38 r = 19E90AA3DE5FB20AED22879F92C6FED278D9C9B9293CC5E94922CD952C9DBF20 DF1753A s = 135AA7443B6A25D11BB64AC482E04D47902D017752882BD72527114F46CF8BB5 6C5A8C3",
      "ja": "SHA-256、メッセージ= \"サンプル\"：K = 1CEB9E8E0DFF53CE687DEB81339ACA3C98E7A657D5A9499EF779F887A934408E CBE5A38 R = 19E90AA3DE5FB20AED22879F92C6FED278D9C9B9293CC5E94922CD952C9DBF20 DF1753A S = 135AA7443B6A25D11BB64AC482E04D47902D017752882BD72527114F46CF8BB5 6C5A8C3"
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\": k = 1460A5C41745A5763A9D548AE62F2C3630BBED71B6AA549D7F829C22442A728C 5D965DA r = 0F8C1CA9C221AD9907A136F787D33BA56B0495A40E86E671C940FD767EDD75EB 6001A49 s = 1071A56915DEE89E22E511975AA09D00CDC4AA7F5054CBE83F5977EE6F8E1CC3 1EC43FD",
      "ja": "K = 1460A5C41745A5763A9D548AE62F2C3630BBED71B6AA549D7F829C22442A728C 5D965DA R = 0F8C1CA9C221AD9907A136F787D33BA56B0495A40E86E671C940FD767EDD75EB 6001A49 S = 1071A56915DEE89E22E511975AA09D00CDC4AA7F5054CBE83F5977EE6F8E1CC3 1EC43FD：SHA-384、メッセージ= \"サンプル\" と"
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"sample\": k = 00F3B59FCB5C1A01A1A2A0019E98C244DFF61502D6E6B9C4E957EDDCEB258EF4 DBEF04A r = 1D0008CF4BA4A701BEF70771934C2A4A87386155A2354140E2ED52E18553C35B 47D9E50 s = 0D15F4FA1B7A4D41D9843578E22EF98773179103DC4FF0DD1F74A6B5642841B9 1056F78",
      "ja": "SHA-512と、メッセージ= \"サンプル\"：K = 00F3B59FCB5C1A01A1A2A0019E98C244DFF61502D6E6B9C4E957EDDCEB258EF4 DBEF04A R = 1D0008CF4BA4A701BEF70771934C2A4A87386155A2354140E2ED52E18553C35B 47D9E50 S = 0D15F4FA1B7A4D41D9843578E22EF98773179103DC4FF0DD1F74A6B5642841B9 1056F78"
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"test\": k = 168B5F8C0881D4026C08AC5894A2239D219FA9F4DA0600ADAA56D5A1781AF81F 08A726E r = 140932FA7307666A8CCB1E1A09656CC40F5932965841ABD5E8E43559D93CF231 1B02767 s = 16A2FD46DA497E5E739DED67F426308C45C2E16528BF2A17EB5D65964FD88B77 0FBB9C6",
      "ja": "With SHA-1, message = \"test\": k = 168B5F8C0881D4026C08AC5894A2239D219FA9F4DA0600ADAA56D5A1781AF81F 08A726E r = 140932FA7307666A8CCB1E1A09656CC40F5932965841ABD5E8E43559D93CF231 1B02767 s = 16A2FD46DA497E5E739DED67F426308C45C2E16528BF2A17EB5D65964FD88B77 0FBB9C6"
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\": k = 045E13EA645CE01D9B25EA38C8A8A170E04C83BB7F231EE3152209FE10EC8B2E 565536C r = 0E72AF7E39CD72EF21E61964D87C838F977485FA6A7E999000AFA97A381B2445 FCEE541 s = 1644FF7D848DA1A040F77515082C27C763B1B4BF332BCF5D08251C6B57D80631 9778208",
      "ja": "SHA-224を使用した場合、メッセージ= \"test\"：k = 045E13EA645CE01D9B25EA38C8A8A170E04C83BB7F231EE3152209FE10EC8B2E 565536C r = 0E72AF7E39CD72EF21E61964D87C838F977485FA6ABFB761400B1104B1974B104B1176B104B1176BFFB761400B1104B1104B1540B1400B1400B1540B1400B1104B1540B1104B1540B1104B1540B1540B1540B1540B1540B1540B1540B1C98B1974B0154C1104B1C1C1C1C1C1C98C0F0f0c0c068bb68c68cbbc68bbc68なさいなさい"
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\": k = 0B585A7A68F51089691D6EDE2B43FC4451F66C10E65F134B963D4CBD4EB844B0 E1469A6 r = 158FAEB2470B306C57764AFC8528174589008449E11DB8B36994B607A65956A5 9715531 s = 0521BC667CA1CA42B5649E78A3D76823C678B7BB3CD58D2E93CD791D53043A6F 83F1FD1",
      "ja": "SHA-256を使用した場合、メッセージ= \"test\"：k = 0B585A7A68F51089691D6EDE2B43FC4451F66C10E65F134B963D4CBD4EB844B0 E1469A6 r = 158FAEB2470B306C57764AFC8528174589008449552B53A3DBE3DBE3DBE3DBEBDB3B3E9C3B3A3C3C3C3C3C3E3C0e0e0e0e0e0e0e0e0e0e0e0e8e8e8e8e5e8e3e00合成乗車"
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\": k = 1E88738E14482A09EE16A73D490A7FE8739DF500039538D5C4B6C8D6D7F208D6 CA56760 r = 1CC4DC5479E0F34C4339631A45AA690580060BF0EB518184C983E0E618C3B93A AB14BBE s = 0284D72FF8AFA83DE364502CBA0494BB06D40AE08F9D9746E747EA87240E589B A0683B7",
      "ja": "With SHA-384, message = \"test\": k = 1E88738E14482A09EE16A73D490A7FE8739DF500039538D5C4B6C8D6D7F208D6 CA56760 r = 1CC4DC5479E0F34C4339631A45AA690580060BF0EB518184C983E0E618C3B93A AB14BBE s = 0284D72FF8AFA83DE364502CBA0494BB06D40AE08F9D9746E747EA87240E589B A0683B7"
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\": k = 00E5F24A223BD459653F682763C3BB322D4EE75DD89C63D4DC61518D543E7658 5076BBA r = 1E7912517C6899732E09756B1660F6B96635D638283DF9A8A11D30E008895D7F 5C9C7F3 s = 0887E75CBD0B7DD9DE30ED79BDB3D78E4F1121C5EAFF5946918F594F88D36364 4789DA7",
      "ja": "SHA-512の場合、メッセージ= \"test\"：k = 00E5F24A223BD459653F682763C3BB322D4EE75DD89C63D4DC61518D543E7658 5076BBA r = 1E7912517C6899732E09756B1660F6B96635D638283DF9F7F79D79F7D79F7D79F79D79F79D79F79D79F79F79C79D7FB3E79F7F7C75D79F7C8E7F75C3E7F75C3D7F8E7F75C3D7F8F7C75D7F75C7D75F7C75D7F75C7D75F8C7D75F7C7D88F7C7D7F8C7D7F8C7D8F6D0E0C7E7D8E7D8E7D8E0短0c"
    },
    {
      "indent": 0,
      "text": "A.2.11. ECDSA, 409 Bits (Binary Field, Koblitz Curve)",
      "section_title": true,
      "ja": "A.2.11. ECDSA、409ビット（バイナリフィールド、コブリッツ曲線）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST K-409",
      "ja": "曲線：NIST K-409"
    },
    {
      "indent": 3,
      "text": "q = 7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5F83B2D4EA20 400EC4557D5ED3E3E7CA5B4B5C83B8E01E5FCF (qlen = 407 bits)",
      "ja": "q = 7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5F83B2D4EA20 400EC4557D5ED3E3E7CA5B4B5C83B8E01E5FCF（qlen = 407ビット）"
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 29C16768F01D1B8A89FDA85E2EFD73A09558B92A178A2931F359E4D70AD853E5\n    69CDAF16DAA569758FB4E73089E4525D8BBFCF",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 0CF923F523FE34A6E863D8BA45FB1FE6D784C8F219C414EEF4DB8362DBBD3CA7\n     1AEB28F568668D5D7A0093E2B84F6FAD759DB42",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Uy = 13B1C374D5132978A1B1123EBBE9A5C54D1A9D56B09AFDB4ADE93CCD7C4D332E\n     2916F7D4B9D18578EE3C2E2DE4D2ECE0DE63549",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 7866E5247F9A3556F983C86E81EDA696AC8489DB40A2862F278603982D304F08\n    B2B6E1E7848534BEAF1330D37A1CF84C7994C1\nr = 7192EE99EC7AFE23E02CB1F9850D1ECE620475EDA6B65D04984029408EC1E5A6\n    476BC940D81F218FC31D979814CAC6E78340FA\ns = 1DE75DE97CBE740FC79A6B5B22BC2B7832C687E6960F0B8173D5D8BE2A75AC6C\n    A43438BAF69C669CE6D64E0FB93BC5854E0F81",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 512340DB682C7B8EBE407BF1AA54194DFE85D49025FE0F632C9B8A06A996F2FC\n    D0D73C752FB09D23DB8FBE50605DC25DF0745C\nr = 41C8EDF39D5E4E76A04D24E6BFD4B2EC35F99CD2483478FD8B0A03E99379576E\n    DACC4167590B7D9C387857A5130B1220CB771F\ns = 659652EEAC9747BCAD58034B25362B6AA61836E1BA50E2F37630813050D43457\n    E62EAB0F13AE197E6CFE0244F983107555E269",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = 782385F18BAF5A36A588637A76DFAB05739A14163BF723A4417B74BD1469D37A\n    C9E8CCE6AEC8FF63F37B815AAF14A876EED962\nr = 49EC220D6D24980693E6D33B191532EAB4C5D924E97E305E2C1CCFE6F1EAEF96\n    C17F6EC27D1E06191023615368628A7E0BD6A9\ns = 1A4AB1DD9BAAA21F77C503E1B39E770FFD44718349D54BA4CF08F688CE89D7D7\n    C5F7213F225944BE5F7C9BA42B8BEE382F8AF9",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = 4DA637CB2E5C90E486744E45A73935DD698D4597E736DA332A06EDA8B26D5ABC\n    6153EC2ECE14981CF3E5E023F36FFA55EEA6D7\nr = 562BB99EE027644EC04E493C5E81B41F261F6BD18FB2FAE3AFEAD91FAB8DD44A\n    FA910B13B9C79C87555225219E44E72245BB7C\ns = 25BA5F28047DDDBDA7ED7E49DA31B62B20FD9C7E5B8988817BBF738B3F4DFDD2\n    DCD06EE6DF2A1B744C850DAF952C12B9A56774",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"sample\":\nk = 57055B293ECFDFE983CEF716166091E573275C53906A39EADC25C89C5EC8D7A7\n    E5629FCFDFAD514E1348161C9A34EA1C42D58C\nr = 16C7E7FB33B5577F7CF6F77762F0F2D531C6E7A3528BD2CF582498C1A48F2007\n    89E9DF7B754029DA0D7E3CE96A2DC760932606\ns = 2729617EFBF80DA5D2F201AC7910D3404A992C39921C2F65F8CF4601392DFE93\n    3E6457EAFDBD13DFE160D243100378B55C290A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"test\":\nk = 545453D8DC05D220F9A12EF322D0B855E664C72835FABE8A41211453EB8A7CFF\n    950D80773839D0043A46852DDA5A536E02291F\nr = 565648A5BAD24E747A7D7531FA9DBDFCB184ECFEFDB00A319459242B68D0989E\n    52BED4107AED35C27D8ECA10E876ACA48006C9\ns = 7420BA6FF72ECC5C92B7CA0309258B5879F26393DB22753B9EC5DF905500A042\n    28AC08880C485E2AC8834E13E8FA44FA57BF18",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = 3C5352929D4EBE3CCE87A2DCE380F0D2B33C901E61ABC530DAF3506544AB0930\n    AB9BFD553E51FCDA44F06CD2F49E17E07DB519\nr = 251DFE54EAEC8A781ADF8A623F7F36B4ABFC7EE0AE78C8406E93B5C3932A8120\n    AB8DFC49D8E243C7C30CB5B1E021BADBDF9CA4\ns = 77854C2E72EAA6924CC0B5F6751379D132569843B1C7885978DBBAA6678967F6\n    43A50DBB06E6EA6102FFAB7766A57C3887BD22",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = 251E32DEE10ED5EA4AD7370DF3EFF091E467D5531CA59DE3AA791763715E1169\n    AB5E18C2A11CD473B0044FB45308E8542F2EB0\nr = 58075FF7E8D36844EED0FC3F78B7CFFDEEF6ADE5982D5636552A081923E24841\n    C9E37DF2C8C4BF2F2F7A174927F3B7E6A0BEB2\ns = 0A737469D013A31B91E781CE201100FDE1FA488ABF2252C025C678462D715AD3\n    078C9D049E06555CABDF37878CFB909553FF51",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 11C540EA46C5038FE28BB66E2E9E9A04C9FE9567ADF33D56745953D44C1DC8B5\n    B92922F53A174E431C0ED8267D919329F19014\nr = 1C5C88642EA216682244E46E24B7CE9AAEF9B3F97E585577D158C3CBC3C59825\n    0A53F6D46DFB1E2DD9DC302E7DA4F0CAAFF291\ns = 1D3FD721C35872C74514359F88AD983E170E5DE5B31AFC0BE12E9F4AB2B2538C\n    7797686BA955C1D042FD1F8CDC482775579F11",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 59527CE953BC09DF5E85155CAE7BB1D7F342265F41635545B06044F844ECB4FA\n    6476E7D47420ADC8041E75460EC0A4EC760E95\nr = 1A32CD7764149DF79349DBF79451F4585BB490BD63A200700D7111B45DDA4140\n    00AE1B0A69AEACBA1364DD7719968AAD123F93\ns = 582AB1076CAFAE23A76244B82341AEFC4C6D8D8060A62A352C33187720C8A37F\n    3DAC227E62758B11DF1562FD249941C1679F82",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.12. ECDSA, 571 Bits (Binary Field, Koblitz Curve)",
      "section_title": true,
      "ja": "A.2.12. ECDSA、571ビット（バイナリフィールド、コブリッツ曲線）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST K-571",
      "ja": "curve: NIST K-571"
    },
    {
      "indent": 3,
      "text": "q = 2000000000000000000000000000000000000000000000000000000000000000\n    0000000131850E1F19A63E4B391A8DB917F4138B630D84BE5D639381E91DEB45\n    CFE778F637C1001\n(qlen = 570 bits)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 0C16F58550D824ED7B95569D4445375D3A490BC7E0194C41A39DEB732C29396C\n    DF1D66DE02DD1460A816606F3BEC0F32202C7BD18A32D87506466AA92032F131\n    4ED7B19762B0D22",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 6CFB0DF7541CDD4C41EF319EA88E849EFC8605D97779148082EC991C463ED323\n     19596F9FDF4779C17CAF20EFD9BEB57E9F4ED55BFC52A2FA15CA23BC62B7BF01\n     9DB59793DD77318\n\nUy = 1CFC91102F7759A561BD8D5B51AAAEEC7F40E659D67870361990D6DE29F6B4F7\n     E18AE13BDE5EA5C1F77B23D676F44050C9DBFCCDD7B3756328DDA059779AAE84\n     46FC5158A75C227",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "Signatures:"
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 17F7E360B21BEAE4A757A19ACA77FB404D273F05719A86EAD9D7B3F4D5ED7B46\n    30584BB153CF7DCD5A87CCA101BD7EA9ECA0CE5EE27CA985833560000BB52B6B\n    BE068740A45B267\nr = 0767913F96C82E38B7146A505938B79EC07E9AA3214377651BE968B52C039D3E\n    4837B4A2DE26C481C4E1DE96F4D9DE63845D9B32E26D0D332725678E3CE57F66\n    8A5E3108FB6CEA5\ns = 109F89F55FA39FF465E40EBCF869A9B1DB425AEA53AB4ECBCE3C310572F79315\n    F5D4891461372A0C36E63871BEDDBB3BA2042C6410B67311F1A185589FF4C987\n    DBA02F9D992B9DF\n",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 0B599D068A1A00498EE0B9AD6F388521F594BD3F234E47F7A1DB6490D7B57D60\n    B0101B36F39CC22885F78641C69411279706F0989E6991E5D5B53619E43EFB39\n    7E25E0814EF02BC\nr = 010774B9F14DE6C9525131AD61531FA30987170D43782E9FB84FF0D70F093946\n    DF75ECB69D400FE39B12D58C67C19DCE96335CEC1D9AADE004FE5B498AB8A940\n    D46C8444348686A\ns = 06DFE9AA5FEA6CF2CEDC06EE1F9FD9853D411F0B958F1C9C519C90A85F6D24C1\n    C3435B3CDF4E207B4A67467C87B7543F6C0948DD382D24D1E48B3763EC27D4D3\n    2A0151C240CC5E0\n\nWith SHA-256, message = \"sample\":\nk = 0F79D53E63D89FB87F4D9E6DC5949F5D9388BCFE9EBCB4C2F7CE497814CF40E8\n    45705F8F18DBF0F860DE0B1CC4A433EF74A5741F3202E958C082E0B76E16ECD5\n    866AA0F5F3DF300\nr = 1604BE98D1A27CEC2D3FA4BD07B42799E07743071E4905D7DCE7F6992B21A27F\n    14F55D0FE5A7810DF65CF07F2F2554658817E5A88D952282EA1B8310514C0B40\n    FFF46F159965168\ns = 18249377C654B8588475510F7B797081F68C2F8CCCE49F730353B2DA3364B1CD\n    3E984813E11BB791824038EA367BA74583AB97A69AF2D77FA691AA694E348E15\n    DA76F5A44EC1F40\n\nWith SHA-384, message = \"sample\":\nk = 0308253C022D25F8A9EBCD24459DD6596590BDEC7895618EEE8A2623A98D2A2B\n    2E7594EE6B7AD3A39D70D68CB4ED01CB28E2129F8E2CC0CC8DC7780657E28BCD\n    655F0BE9B7D35A2\nr = 1E6D7FB237040EA1904CCBF0984B81B866DE10D8AA93B06364C4A46F6C9573FA\n    288C8BDDCC0C6B984E6AA75B42E7BF82FF34D51DFFBD7C87FDBFAD971656185B\n    D12E4B8372F4BF1\ns = 04F94550072ADA7E8C82B7E83577DD39959577799CDABCEA60E267F36F1BEB98\n    1ABF24E722A7F031582D2CC5D80DAA7C0DEEBBE1AC5E729A6DBB34A5D645B698\n    719FCA409FBA370\n\nWith SHA-512, message = \"sample\":\nk = 0C5EE7070AF55F84EBC43A0D481458CEDE1DCEBB57720A3C92F59B4941A044FE\n    CFF4F703940F3121773595E880333772ACF822F2449E17C64DA286BCD65711DD\n    5DA44D7155BF004\nr = 086C9E048EADD7D3D2908501086F3AF449A01AF6BEB2026DC381B39530BCDDBE\n    8E854251CBD5C31E6976553813C11213E4761CB8CA2E5352240AD9FB9C635D55\n    FAB13AE42E4EE4F\ns = 09FEE0A68F322B380217FCF6ABFF15D78C432BD8DD82E18B6BA877C01C860E24\n    410F5150A44F979920147826219766ECB4E2E11A151B6A15BB8E2E825AC95BCC\n    A228D8A1C9D3568\n",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"test\":\nk = 1D056563469E933E4BE064585D84602D430983BFBFD6885A94BA484DF9A7AB03\n    1AD6AC090A433D8EEDC0A7643EA2A9BC3B6299E8ABA933B4C1F2652BB49DAEE8\n    33155C8F1319908\nr = 1D055F499A3F7E3FC73D6E7D517B470879BDCB14ABC938369F23643C7B96D024\n    2C1FF326FDAF1CCC8593612ACE982209658E73C24C9EC493B785608669DA74A5\n    B7C9A1D8EA843BC\ns = 1621376C53CFE3390A0520D2C657B1FF0EBB10E4B9C2510EDC39D04FEBAF12B8\n    502B098A8B8F842EA6E8EB9D55CFEF94B7FF6D145AC3FFCE71BD978FEA3EF819\n    4D4AB5293A8F3EA\n\nWith SHA-224, message = \"test\":\nk = 1DA875065B9D94DBE75C61848D69578BCC267935792624F9887B53C9AF9E43CA\n    BFC42E4C3F9A456BA89E717D24F1412F33CFD297A7A4D403B18B5438654C74D5\n    92D5022125E0C6B\nr = 18709BDE4E9B73D046CE0D48842C97063DA54DCCA28DCB087168FA37DA2BF5FD\n    BE4720EE48D49EDE4DD5BD31AC0149DB8297BD410F9BC02A11EB79B60C8EE63A\n    F51B65267D71881\ns = 12D8B9E98FBF1D264D78669E236319D8FFD8426C56AFB10C76471EE88D7F0AB1\n    B158E685B6D93C850D47FB1D02E4B24527473DB60B8D1AEF26CEEBD3467B65A7\n    0FFDDC0DBB64D5F\n\nWith SHA-256, message = \"test\":\nk = 04DDD0707E81BB56EA2D1D45D7FAFDBDD56912CAE224086802FEA1018DB306C4\n    FB8D93338DBF6841CE6C6AB1506E9A848D2C0463E0889268843DEE4ACB552CFF\n    CB858784ED116B2\nr = 1F5BF6B044048E0E310309FFDAC825290A69634A0D3592DBEE7BE71F69E45412\n    F766AC92E174CC99AABAA5C9C89FCB187DFDBCC7A26765DB6D9F1EEC8A6127BB\n    DFA5801E44E3BEC\ns = 1B44CBFB233BFA2A98D5E8B2F0B2C27F9494BEAA77FEB59CDE3E7AE9CB2E385B\n    E8DA7B80D7944AA71E0654E5067E9A70E88E68833054EED49F28283F02B22912\n    3995AF37A6089F0\n\nWith SHA-384, message = \"test\":\nk = 0141B53DC6E569D8C0C0718A58A5714204502FDA146E7E2133E56D19E905B794\n    13457437095DE13CF68B5CF5C54A1F2E198A55D974FC3E507AFC0ACF95ED391C\n    93CC79E3B3FE37C\nr = 11F61A6EFAB6D83053D9C52665B3542FF3F63BD5913E527BDBA07FBAF34BC766\n    C2EC83163C5273243AA834C75FDDD1BC8A2BEAD388CD06C4EBA1962D645EEB35\n    E92D44E8F2E081D\ns = 16BF6341876F051DF224770CC8BA0E4D48B3332568A2B014BC80827BAA89DE18\n    D1AEBC73E3BE8F85A8008C682AAC7D5F0E9FB5ECBEFBB637E30E4A0F226D2C2A\n    A3E569BB54AB72B",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 14842F97F263587A164B215DD0F912C588A88DC4AB6AF4C530ADC1226F16E086\n    D62C14435E6BFAB56F019886C88922D2321914EE41A8F746AAA2B964822E4AC6\n    F40EE2492B66824\nr = 0F1E50353A39EA64CDF23081D6BB4B2A91DD73E99D3DD5A1AA1C49B4F6E34A66\n    5EAD24FD530B9103D522609A395AF3EF174C85206F67EF84835ED1632E0F6BAB\n    718EA90DF9E2DA0\ns = 0B385004D7596625028E3FDE72282DE4EDC5B4CE33C1127F21CC37527C90B730\n    7AE7D09281B840AEBCECAA711B00718103DDB32B3E9F6A9FBC6AF23E224A73B9\n    435F619D9C62527",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.13. ECDSA, 163 Bits (Binary Field, Pseudorandom Curve)",
      "section_title": true,
      "ja": "A.2.13. ECDSA, 163 Bits (Binary Field, Pseudorandom Curve)"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "Key pair:"
    },
    {
      "indent": 3,
      "text": "curve: NIST B-163",
      "ja": "曲線：NIST B-163"
    },
    {
      "indent": 3,
      "text": "q = 40000000000000000000292FE77E70C12A4234C33\n(qlen = 163 bits)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 35318FC447D48D7E6BC93B48617DDDEDF26AA658F",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 126CF562D95A1D77D387BA75A3EA3A1407F23425A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Uy = 7D7CB5273C94DA8CA93049AFDA18721C24672BD71",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "Signatures:"
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 0707A94C3D352E0A9FE49FB12F264992152A20004\nr = 153FEBD179A69B6122DEBF5BC61EB947B24C93526\ns = 37AC9C670F8CF18045049BAE7DD35553545C19E49",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 3B24C5E2C2D935314EABF57A6484289B291ADFE3F\nr = 0A379E69C44F9C16EA3215EA39EB1A9B5D58CC955\ns = 04BAFF5308DA2A7FE2C1742769265AD3ED1D24E74",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = 3D7086A59E6981064A9CDB684653F3A81B6EC0F0B\nr = 134E00F78FC1CB9501675D91C401DE20DDF228CDC\ns = 373273AEC6C36CB7BAFBB1903A5F5EA6A1D50B624",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = 3B1E4443443486C7251A68EF184A936F05F8B17C7\nr = 29430B935AF8E77519B0CA4F6903B0B82E6A21A66\ns = 1EA1415306E9353FA5AA54BC7C2581DFBB888440D",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "   With SHA-512, message = \"sample\":\n   k = 2EDF5CFCAC7553C17421FDF54AD1D2EF928A879D2\n   r = 0B2F177A99F9DF2D51CCAF55F015F326E4B65E7A0\n   s = 0DF1FB4487E9B120C5E970EFE48F55E406306C3A1\n   With SHA-1, message = \"test\":\n   k = 10024F5B324CBC8954BA6ADB320CD3AB9296983B4\n   r = 256D4079C6C7169B8BC92529D701776A269D56308\n   s = 341D3FFEC9F1EB6A6ACBE88E3C86A1C8FDEB8B8E1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = 34F46DE59606D56C75406BFB459537A7CC280AA62\nr = 28ECC6F1272CE80EA59DCF32F7AC2D861BA803393\ns = 0AD4AE2C06E60183C1567D2B82F19421FE3053CE2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = 38145E3FFCA94E4DDACC20AD6E0997BD0E3B669D2\nr = 227DF377B3FA50F90C1CB3CDCBBDBA552C1D35104\ns = 1F7BEAD92583FE920D353F368C1960D0E88B46A56",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 375813210ECE9C4D7AB42DDC3C55F89189CF6DFFD\nr = 11811DAFEEA441845B6118A0DFEE8A0061231337D\ns = 36258301865EE48C5C6F91D63F62695002AB55B57",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 25AD8B393BC1E9363600FDA1A2AB6DF40079179A3\nr = 3B6BB95CA823BE2ED8E3972FF516EB8972D765571\ns = 13DC6F420628969DF900C3FCC48220B38BE24A541",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.14. ECDSA, 233 Bits (Binary Field, Pseudorandom Curve)",
      "section_title": true,
      "ja": "A.2.14. ECDSA, 233 Bits (Binary Field, Pseudorandom Curve)"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST B-233",
      "ja": "曲線：NIST B-233"
    },
    {
      "indent": 3,
      "text": "q = 1000000000000000000000000000013E974E72F8A6922031D2603CFE0D7\n(qlen = 233 bits)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 07ADC13DD5BF34D1DDEEB50B2CE23B5F5E6D18067306D60C5F6FF11E5D3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 0FB348B3246B473AA7FBB2A01B78D61B62C4221D0F9AB55FC72DB3DF478",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Uy = 1162FA1F6C6ACF7FD8D19FC7D74BDD9104076E833898BC4C042A6E6BEBF",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "Signatures:"
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 0A4E0B67A3A081C1B35D7BECEB5FE72A918B422B907145DB5416ED751CE\nr = 015CC6FD78BB06E0878E71465515EA5A21A2C18E6FC77B4B158DBEB3944\ns = 0822A4A6C2EB2DF213A5E90BF40377956365EE8C4B4A5A4E2EB9270CB6A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 0F2B1C1E80BEB58283AAA79857F7B83BDF724120D0913606FD07F7FFB2C\nr = 05D9920B53471148E10502AB49AB7A3F11084820A074FD89883CF51BC1A\ns = 04D3938900C0A9AAA7080D1DFEB56CFB0FADABE4214536C7ED5117ED13A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = 034A53897B0BBDB484302E19BF3F9B34A2ABFED639D109A388DC52006B5\nr = 0A797F3B8AEFCE7456202DF1E46CCC291EA5A49DA3D4BDDA9A4B62D5E0D\ns = 01F6F81DA55C22DA4152134C661588F4BD6F82FDBAF0C5877096B070DC2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = 04D4670B28990BC92EEB49840B482A1FA03FE028D09F3D21F89C67ECA85\nr = 015E85A8D46225DD7E314A1C4289731FC14DECE949349FE535D11043B85\ns = 03F189D37F50493EFD5111A129443A662AB3C6B289129AD8C0CAC85119C",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "   With SHA-512, message = \"sample\":\n   k = 0DE108AAADA760A14F42C057EF81C0A31AF6B82E8FBCA8DC86E443AB549\n   r = 03B62A4BF783919098B1E42F496E65F7621F01D1D466C46940F0F132A95\n   s = 0F4BE031C6E5239E7DAA014CBBF1ED19425E49DAEB426EC9DF4C28A2E30\n   With SHA-1, message = \"test\":\n   k = 0250C5C90A4E2A3F8849FEBA87F0D0AE630AB18CBABB84F4FFFB36CEAC0\n   r = 02F1FEDC57BE203E4C8C6B8C1CEB35E13C1FCD956AB41E3BD4C8A6EFB1F\n   s = 05738EC8A8EDEA8E435EE7266AD3EDE1EEFC2CEBE2BE1D614008D5D2951",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = 07BDB6A7FD080D9EC2FC84BFF9E3E15750789DC04290C84FED00E109BBD\nr = 0CCE175124D3586BA7486F7146894C65C2A4A5A1904658E5C7F9DF5FA5D\ns = 08804B456D847ACE5CA86D97BF79FD6335E5B17F6C0D964B5D0036C867E",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = 00376886E89013F7FF4B5214D56A30D49C99F53F211A3AFE01AA2BDE12D\nr = 035C3D6DFEEA1CFB29B93BE3FDB91A7B130951770C2690C16833A159677\ns = 0600F7301D12AB376B56D4459774159ADB51F97E282FF384406AFD53A02",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 03726870DE75613C5E529E453F4D92631C03D08A7F63813E497D4CB3877\nr = 061602FC8068BFD5FB86027B97455D200EC603057446CCE4D76DB8EF42C\ns = 03396DD0D59C067BB999B422D9883736CF9311DFD6951F91033BD03CA8D",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 09CE5810F1AC68810B0DFFBB6BEEF2E0053BB937969AE7886F9D064A8C4\nr = 07E12CB60FDD614958E8E34B3C12DDFF35D85A9C5800E31EA2CC2EF63B1\ns = 0E8970FD99D836F3CC1C807A2C58760DE6EDAA23705A82B9CB1CE93FECC",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.15. ECDSA, 283 Bits (Binary Field, Pseudorandom Curve)",
      "section_title": true,
      "ja": "A.2.15. ECDSA、283ビット（バイナリフィールド、疑似ランダム曲線）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST B-283",
      "ja": "curve: NIST B-283"
    },
    {
      "indent": 3,
      "text": "q = 3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF90399660FC938A90165B042A7CE FADB307 (qlen = 282 bits)",
      "ja": "q = 3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF90399660FC938A90165B042A7CE FADB307（qlen = 282ビット）"
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 14510D4BC44F2D26F4553942C98073C1BD35545CEABB5CC138853C5158D2729E A408836",
      "ja": "x = 14510D4BC44F2D26F4553942C98073C1BD35545CEABB5CC138853C5158D2729E A408836"
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 17E3409A13C399F0CA8A192F028D46E3446BCFFCDF51FF8A905ED2DED786E74F 9C3E8A9",
      "ja": "Ux = 17E3409A13C399F0CA8A192F028D46E3446BCFFCDF51FF8A905ED2DED786E74F 9C3E8A9"
    },
    {
      "indent": 3,
      "text": "Uy = 47EFCBCC31C01D86D1992F7BFAC0277DBD02A6D289274099A2C0F039C8F59F31 8371B0E",
      "ja": "Uy = 47EFCBCC31C01D86D1992F7BFAC0277DBD02A6D289274099A2C0F039C8F59F31 8371B0E"
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\": k = 277F389559667E8AE4B65DC056F8CE2872E1917E7CC59D17D485B0B98343206F BCCD441 r = 201E18D48C6DB3D5D097C4DCE1E25587E1501FC3CF47BDB5B4289D79E273D6A9 ACB8285 s = 151AE05712B024CE617358260774C8CA8B0E7A7E72EF8229BF2ACE7609560CB3 0322C4F",
      "ja": "With SHA-1, message = \"sample\": k = 277F389559667E8AE4B65DC056F8CE2872E1917E7CC59D17D485B0B98343206F BCCD441 r = 201E18D48C6DB3D5D097C4DCE1E25587E1501FC3CF47BDB5B4289D79E273D6A9 ACB8285 s = 151AE05712B024CE617358260774C8CA8B0E7A7E72EF8229BF2ACE7609560CB3 0322C4F"
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\": k = 14CC8FCFEECD6B999B4DC6084EBB06FDED0B44D5C507802CC7A5E9ECF36E69DA 6AE23C6 r = 143E878DDFD4DF40D97B8CD638B3C4706501C2201CF7108F2FB91478C11D6947 3246925 s = 0CBF1B9717FEEA3AABB09D9654110144267098E0E1E8D0289A6211BE0EEDFDD8 6A3DB79",
      "ja": "SHA-224を使用した場合、メッセージ= \"sample\"：k = 14CC8FCFEECD6B999B4DC6084EBB06FDED0B44D5C507802CC7A5E9ECF36E69DA 6AE23C6 r = 143E878DDFD4DF40D97B8CD638B3C4706501289220CF14108A1104EA49E010432BEABE1974C1974EA09E0A0104A0104A049E0E0E0"
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\": k = 38C9D662188982943E080B794A4CFB0732DBA37C6F40D5B8CFADED6FF31C5452 BA3F877 r = 29FD82497FB3E5CEF65579272138DE59E2B666B8689466572B3B69A172CEE83B E145659 s = 05A89D9166B40795AF0FE5958201B9C0523E500013CA12B4840EA2BC53F25F9B 3CE87C0",
      "ja": "With SHA-256, message = \"sample\": k = 38C9D662188982943E080B794A4CFB0732DBA37C6F40D5B8CFADED6FF31C5452 BA3F877 r = 29FD82497FB3E5CEF65579272138DE59E2B666B8689466572B3B69A172CEE83B E145659 s = 05A89D9166B40795AF0FE5958201B9C0523E500013CA12B4840EA2BC53F25F9B 3CE87C0"
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\": k = 21B7265DEBF90E6F988CFFDB62B121A02105226C652807CC324ED6FB119A287A 72680AB r = 2F00689C1BFCD2A8C7A41E0DE55AE182E6463A152828EF89FE3525139B660329 4E69353 s = 1744514FE0A37447250C8A329EAAADA81572226CABA16F39270EE5DD03F27B1F 665EB5D",
      "ja": "SHA-384の場合、メッセージ= \"sample\"：k = 21B7265DEBF90E6F988CFFDB62B121A02105226C652807CC324ED6FB119A287A 72680AB r = 2F00689C1BFCD2A8C7A41E0DE55AE182E6463A152828EF89FE3525139B660329 4E69353AABEAA250ACAAAA270AA12A120AAFA270A03A14A14AA540AAA120AA120A3A540A3A9A540A3A9A120AA3A9A120A3A9AA540A3C9C9A9A9A9A0C0C0A0"
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"sample\": k = 20583259DC179D9DA8E5387E89BFF2A3090788CF1496BCABFE7D45BB120B0C81 1EB8980 r = 0DA43A9ADFAA6AD767998A054C6A8F1CF77A562924628D73C62761847AD8286E 0D91B47 s = 1D118733AE2C88357827CAFC6F68ABC25C80C640532925E95CFE66D40F8792F3 AC44C42",
      "ja": "SHA-512と、メッセージ= \"サンプル\"：K = 20583259DC179D9DA8E5387E89BFF2A3090788CF1496BCABFE7D45BB120B0C81 1EB8980 R = 0DA43A9ADFAA6AD767998A054C6A8F1CF77A562924628D73C62761847AD8286E 0D91B47 S = 1D118733AE2C88357827CAFC6F68ABC25C80C640532925E95CFE66D40F8792F3 AC44C42"
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"test\": k = 0185C57A743D5BA06193CE2AA47B07EF3D6067E5AE1A6469BCD3FC510128BA56 4409D82 r = 05A408133919F2CDCDBE5E4C14FBC706C1F71BADAFEF41F5DE4EC27272FC1CA9 366FBB2 s = 012966272872C097FEA7BCE64FAB1A81982A773E26F6E4EF7C99969846E67CA9 CBE1692",
      "ja": "SHA-1を使用した場合、メッセージ= \"test\"：k = 0185C57A743D5BA06193CE2AA47B07EF3D6067E5AE1A6469BCD3FC510128BA56 4409D82 r = 05A408133919F2CDCDBE5E4C14FBC706C1F71BADAFEF41F5DE4EC27272A2C9A6A6A6A9C926F6DE4EC27272A2C9A6A6A9B9C9AFAB9C9A6A9AB9C9A6B9C9A6B9C9A6A9C96A6B9C9A6B9C9A9C096A6E9A9C096B0A9C0A9F0E6E0E0E0E"
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\": k = 2E5C1F00677A0E015EC3F799FA9E9A004309DBD784640EAAF5E1CE64D3045B9F E9C1FA1 r = 08F3824E40C16FF1DDA8DC992776D26F4A5981AB5092956C4FDBB4F1AE0A711E EAA10E5 s = 0A64B91EFADB213E11483FB61C73E3EF63D3B44EEFC56EA401B99DCC60CC28E9 9F0F1FA",
      "ja": "K = 2E5C1F00677A0E015EC3F799FA9E9A004309DBD784640EAAF5E1CE64D3045B9F E9C1FA1 R = 08F3824E40C16FF1DDA8DC992776D26F4A5981AB5092956C4FDBB4F1AE0A711E EAA10E5 S = 0A64B91EFADB213E11483FB61C73E3EF63D3B44EEFC56EA401B99DCC60CC28E9 9F0F1FA：SHA-224、メッセージ= \"テスト\" と"
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\": k = 018A7D44F2B4341FEFE68F6BD8894960F97E08124AAB92C1FFBBE90450FCC935 6C9AAA5 r = 3597B406F5329D11A79E887847E5EC60861CCBB19EC61F252DB7BD549C699951 C182796 s = 0A6A100B997BC622D91701D9F5C6F6D3815517E577622DA69D3A0E8917C1CBE6 3ACD345",
      "ja": "SHA-256を使用した場合、メッセージ= \"test\"：k = 018A7D44F2B4341FEFE68F6BD8894960F97E08124AAB92C1FFBBE90450FCC935 6C9AAA5 r = 3597B406F5329D11A79E887847E5EC60861CC6D17AB700A6700A175A6A175A6700A756A17A756A005D175A6A175A6974C6956A6974A6974A6974A6974C1956A6974A6974A6974A6176A6974A6974C1956A622D1"
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\": k = 3C75397BA4CF1B931877076AF29F2E2F4231B117AB4B8E039F7F9704DE1BD352 2F150B6 r = 1BB490926E5A1FDC7C5AA86D0835F9B994EDA315CA408002AF54A298728D422E BF59E4C s = 36C682CFC9E2C89A782BFD3A191609D1F0C1910D5FD6981442070393159D65FB CC0A8BA",
      "ja": "SHA-384、メッセージを= \"テスト\"：K = 3C75397BA4CF1B931877076AF29F2E2F4231B117AB4B8E039F7F9704DE1BD352 2F150B6 R = 1BB490926E5A1FDC7C5AA86D0835F9B994EDA315CA408002AF54A298728D422E BF59E4C S = 36C682CFC9E2C89A782BFD3A191609D1F0C1910D5FD6981442070393159D65FB CC0A8BA"
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\": k = 14E66B18441FA54C21E3492D0611D2B48E19DE3108D915FD5CA08E786327A267 5F11074 r = 19944AA68F9778C2E3D6E240947613E6DA60EFCE9B9B2C063FF5466D72745B5A 0B25BA2 s = 03F1567B3C5B02DF15C874F0EE22850824693D5ADC4663BAA19E384E550B1DD4 1F31EE6",
      "ja": "SHA-512を使用した場合、メッセージ= \"test\"：k = 14E66B18441FA54C21E3492D0611D2B48E19DE3108D915FD5CA08E786327A267 5F11074 r = 19944AA68F9778C2E3D6E240947613E6DA60EFCE9B5B5B5B5ABF3BF5BBF540B03A5B5A5B540C0154A5B3B3C540C0540C0540"
    },
    {
      "indent": 0,
      "text": "A.2.16. ECDSA, 409 Bits (Binary Field, Pseudorandom Curve)",
      "section_title": true,
      "ja": "A.2.16. ECDSA、409ビット（バイナリフィールド、疑似ランダム曲線）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST B-409",
      "ja": "曲線：NIST B-409"
    },
    {
      "indent": 3,
      "text": "q = 10000000000000000000000000000000000000000000000000001E2AAD6A612F 33307BE5FA47C3C9E052F838164CD37D9A21173 (qlen = 409 bits)",
      "ja": "q = 10000000000000000000000000000000000000000000000000001E2AAD6A612F 33307BE5FA47C3C9E052F838164CD37D9A21173 (qlen = 409 bits)"
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "秘密鍵："
    },
    {
      "indent": 3,
      "text": "x = 0494994CC325B08E7B4CE038BD9436F90B5E59A2C13C3140CD3AE07C04A01FC4\n    89F572CE0569A6DB7B8060393DE76330C624177",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "public key: U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 1A7055961CF1DA4B9A015B18B1524EF01FDD9B93FAEFC26FB1F2F828A7227B70\n     31925DA0AC1A8A075C3B33554B222EA859C17E7",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Uy = 18105C042F290736088F30AEC7AE7732A45DE47BCE0940113AB8132516D1E059\n     B0F581FD581A9A3CB3A0AC42A1962738ADB86E6",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\":\nk = 042D8A2B34402757EB2CCFDDC3E6E96A7ADD3FDA547FC10A0CB77CFC720B4F9E\n    16EEAAA2A8CC4E4A4B5DBF7D8AC4EA491859E60\nr = 0D8783188E1A540E2022D389E1D35B32F56F8C2BB5636B8ABF7718806B27A713\n    EBAE37F63ECD4B61445CEF5801B62594EF3E982\ns = 03A6B4A80E204DB0DE12E7415C13C9EC091C52935658316B4A0C591216A38791\n    54BEB1712560E346E7EF26517707435B55C3141",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\":\nk = 0C933F1DC4C70838C2AD16564715ACAF545BCDD8DC203D25AF3EC63949C65CB2\n    E68AC1F60CA7EACA2A823F4E240927AA82CEEC5\nr = 0EE4F39ACC2E03CE96C3D9FCBAFA5C22C89053662F8D4117752A9B10F09ADFDA\n    59DB061E247FE5321D6B170EE758ACE1BE4D157\ns = 00A2B83265B456A430A8BF27DCC8A9488B3F126C10F0D6D64BF7B8A218FAAF20\n    E51A295A3AE78F205E5A4A6AE224C3639F1BB34",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\":\nk = 08EC42D13A3909A20C41BEBD2DFED8CACCE56C7A7D1251DF43F3E9E289DAE00E\n    239F6960924AC451E125B784CB687C7F23283FD\nr = 02D8B1B31E33E74D7EB46C30FDE5AD2CA04EC8FE08FBA0E73BA5E568953AC5EA\n    307C072942238DFC07F4A4D7C7C6A9F86436D17\ns = 079F7D471E6CB73234AF7F7C381D2CE15DE35BAF8BB68393B73235B3A26EC2DF\n    4842CE433FB492D6E074E604D4870024D42189A",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\":\nk = 0DA881BCE3BA851485879EF8AC585A63F1540B9198ECB8A1096D70CB25A104E2\n    F8A96B108AE76CB49CF34491ABC70E9D2AAD450\nr = 07BC638B7E7CE6FEE5E9C64A0F966D722D01BB4BC3F3A35F30D4CDDA92DFC5F7\n    F0B4BBFE8065D9AD452FD77A1914BE3A2440C18\ns = 06D904429850521B28A32CBF55C7C0FDF35DC4E0BDA2552C7BF68A171E970E67\n    88ACC0B9521EACB4796E057C70DD9B95FED5BFB",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"sample\":\nk = 0750926FFAD7FF5DE85DF7960B3A4F9E3D38CF5A049BFC89739C48D42B34FBEE\n    03D2C047025134CC3145B60AFD22A68DF0A7FB2\nr = 05D178DECAFD2D02A3DA0D8BA1C4C1D95EE083C760DF782193A9F7B4A8BE6FC5\n    C21FD60613BCA65C063A61226E050A680B3ABD4\ns = 013B7581E98F6A63FBBCB3E49BCDA60F816DB230B888506D105DC229600497C3\n    B46588C784BE3AA9343BEF82F7C9C80AEB63C3B",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"test\":\nk = 017E167EAB1850A3B38EE66BFE2270F2F6BFDAC5E2D227D47B20E75F0719161E\n    6C74E9F23088F0C58B1E63BC6F185AD2EF4EAE6\nr = 049F54E7C10D2732B4638473053782C6919218BBEFCEC8B51640FC193E832291\n    F05FA12371E9B448417B3290193F08EE9319195\ns = 0499E267DEC84E02F6F108B10E82172C414F15B1B7364BE8BFD66ADC0C5DE23F\n    EE3DF0D811134C25AFE0E05A6672F98889F28F1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\":\nk = 01ADEB94C19951B460A146B8275D81638C07735B38A525D76023AAF26AA8A058\n    590E1D5B1E78AB3C91608BDA67CFFBE6FC8A6CC\nr = 0B1527FFAA7DD7C7E46B628587A5BEC0539A2D04D3CF27C54841C2544E1BBDB4\n    2FDBDAAF8671A4CA86DFD619B1E3732D7BB56F2\ns = 0442C68C044868DF4832C807F1EDDEBF7F5052A64B826FD03451440794063F52\n    B022DF304F47403D4069234CA9EB4C964B37C02",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\":\nk = 06EBA3D58D0E0DFC406D67FC72EF0C943624CF40019D1E48C3B54CCAB0594AFD\n    5DEE30AEBAA22E693DBCFECAD1A85D774313DAD\nr = 0BB27755B991D6D31757BCBF68CB01225A38E1CFA20F775E861055DD108ED7EA\n    455E4B96B2F6F7CD6C6EC2B3C70C3EDDEB9743B\ns = 0C5BE90980E7F444B5F7A12C9E9AC7A04CA81412822DD5AD1BE7C45D5032555E\n    A070864245CF69266871FEB8CD1B7EDC30EF6D5",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\":\nk = 0A45B787DB44C06DEAB846511EEDBF7BFCFD3BD2C11D965C92FC195F67328F36\n    A2DC83C0352885DAB96B55B02FCF49DCCB0E2DA\nr = 04EFEB7098772187907C87B33E0FBBA4584226C50C11E98CA7AAC6986F8D3BE0\n    44E5B52D201A410B852536527724CA5F8CE6549\ns = 09574102FEB3EF87E6D66B94119F5A6062950FF4F902EA1E6BD9E2037F33FF99\n    1E31F5956C23AFE48FCDC557FD6F088C7C9B2B3",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\":\nk = 0B90F8A0E757E81D4EA6891766729C96A6D01F9AEDC0D334932D1F81CC4E1973\n    A4F01C33555FF08530A5098CADB6EDAE268ABB5\nr = 07E0249C68536AE2AEC2EC30090340DA49E6DC9E9EEC8F85E5AABFB234B6DA7D\n    2E9524028CF821F21C6019770474CC40B01FAF6\ns = 08125B5A03FB44AE81EA46D446130C2A415ECCA265910CA69D55F2453E16CD7B\n    2DFA4E28C50FA8137F9C0C6CEE4CD37ABCCF6D8",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2.17. ECDSA, 571 Bits (Binary Field, Pseudorandom Curve)",
      "section_title": true,
      "ja": "A.2.17. ECDSA、571ビット（バイナリフィールド、疑似ランダム曲線）"
    },
    {
      "indent": 3,
      "text": "Key pair:",
      "ja": "キーペア："
    },
    {
      "indent": 3,
      "text": "curve: NIST B-571",
      "ja": "curve: NIST B-571"
    },
    {
      "indent": 3,
      "text": "q = 3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF FFFFFFFE661CE18FF55987308059B186823851EC7DD9CA1161DE93D5174D66E8 382E9BB2FE84E47 (qlen = 570 bits)",
      "ja": "q = 3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF FFFFFFFE661CE18FF55987308059B186823851EC7DD9CA1161DE93D5174D66E8 382E9BB2FE84E47（qlen = 570ビット）"
    },
    {
      "indent": 3,
      "text": "private key:",
      "ja": "private key:"
    },
    {
      "indent": 3,
      "text": "x = 028A04857F24C1C082DF0D909C0E72F453F2E2340CCB071F0E389BCA2575DA19 124198C57174929AD26E348CF63F78D28021EF5A9BF2D5CBEAF6B7CCB6C4DA82 4DD5C82CFB24E11",
      "ja": "x = 028A04857F24C1C082DF0D909C0E72F453F2E2340CCB071F0E389BCA2575DA19 124198C57174929AD26E348CF63F78D28021EF5A9BF2D5CBEAF6B7CCB6C4DA82 4DD5C82CFB24E11"
    },
    {
      "indent": 3,
      "text": "public key: U = xG",
      "ja": "公開鍵：U = xG"
    },
    {
      "indent": 3,
      "text": "Ux = 4B4B3CE9377550140B62C1061763AA524814DDCEF37B00CD5CDE94F7792BB0E9 6758E55DA2E9FEA8FF2A8B6830AE1D57A9CA7A77FCB0836BF43EA5454CDD9FEA D5CCFE7375C6A83",
      "ja": "Ux = 4B4B3CE9377550140B62C1061763AA524814DDCEF37B00CD5CDE94F7792BB0E9 6758E55DA2E9FEA8FF2A8B6830AE1D57A9CA7A77FCB0836BF43EA5454CDD9FEA D5CCFE7375C6A83"
    },
    {
      "indent": 3,
      "text": "Uy = 4453B18F261E7A0E7570CD72F235EA750438E43946FBEBD2518B696954767AA7 849C1719E18E1C51652C28CA853426F15C09AA4B579487338ABC7F33768FADD6 1B5A3A6443A8189",
      "ja": "Uy = 4453B18F261E7A0E7570CD72F235EA750438E43946FBEBD2518B696954767AA7 849C1719E18E1C51652C28CA853426F15C09AA4B579487338ABC7F33768FADD6 1B5A3A6443A8189"
    },
    {
      "indent": 3,
      "text": "Signatures:",
      "ja": "署名："
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"sample\": k = 2669FAFEF848AF67D437D4A151C3C5D3F9AA8BB66EDC35F090C9118F95BA0041 B0993BE2EF55DAAF36B5B3A737C40DB1F6E3D93D97B8419AD6E1BB8A5D4A0E9B 2E76832D4E7B862 r = 147D3EB0EDA9F2152DFD014363D6A9CE816D7A1467D326A625FC4AB0C786E1B7 4DDF7CD4D0E99541391B266C704BB6B6E8DCCD27B460802E0867143727AA4155 55454321EFE5CB6 s = 17319571CAF533D90D2E78A64060B9C53169AB7FC908947B3EDADC54C79CCF0A 7920B4C64A4EAB6282AFE9A459677CDA37FD6DD50BEF18709590FE18B923BDF7 4A66B189A850819",
      "ja": "With SHA-1, message = \"sample\": k = 2669FAFEF848AF67D437D4A151C3C5D3F9AA8BB66EDC35F090C9118F95BA0041 B0993BE2EF55DAAF36B5B3A737C40DB1F6E3D93D97B8419AD6E1BB8A5D4A0E9B 2E76832D4E7B862 r = 147D3EB0EDA9F2152DFD014363D6A9CE816D7A1467D326A625FC4AB0C786E1B7 4DDF7CD4D0E99541391B266C704BB6B6E8DCCD27B460802E0867143727AA4155 55454321EFE5CB6 s = 17319571CAF533D90D2E78A64060B9C53169AB7FC908947B3EDADC54C79CCF0A 7920B4C64A4EAB6282AFE9A459677CDA37FD6DD50BEF18709590FE18B923BDF7 4A66B189A850819"
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"sample\": k = 2EAFAD4AC8644DEB29095BBAA88D19F31316434F1766AD4423E0B54DD2FE0C05 E307758581B0DAED2902683BBC7C47B00E63E3E429BA54EA6BA3AEC33A94C9A2 4A6EF8E27B7677A r = 10F4B63E79B2E54E4F4F6A2DBC786D8F4A143ECA7B2AD97810F6472AC6AE2085 3222854553BE1D44A7974599DB7061AE8560DF57F2675BE5F9DD94ABAF3D47F1 582B318E459748B s = 3BBEA07C6B269C2B7FE9AE4DDB118338D0C2F0022920A7F9DCFCB7489594C03B 536A9900C4EA6A10410007222D3DAE1A96F291C4C9275D75D98EB290DC0EEF17 6037B2C7A7A39A3",
      "ja": "With SHA-224, message = \"sample\": k = 2EAFAD4AC8644DEB29095BBAA88D19F31316434F1766AD4423E0B54DD2FE0C05 E307758581B0DAED2902683BBC7C47B00E63E3E429BA54EA6BA3AEC33A94C9A2 4A6EF8E27B7677A r = 10F4B63E79B2E54E4F4F6A2DBC786D8F4A143ECA7B2AD97810F6472AC6AE2085 3222854553BE1D44A7974599DB7061AE8560DF57F2675BE5F9DD94ABAF3D47F1 582B318E459748B s = 3BBEA07C6B269C2B7FE9AE4DDB118338D0C2F0022920A7F9DCFCB7489594C03B 536A9900C4EA6A10410007222D3DAE1A96F291C4C9275D75D98EB290DC0EEF17 6037B2C7A7A39A3"
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"sample\": k = 15C2C6B7D1A070274484774E558B69FDFA193BDB7A23F27C2CD24298CE1B22A6 CC9B7FB8CABFD6CF7C6B1CF3251E5A1CDDD16FBFED28DE79935BB2C631B8B8EA 9CC4BCC937E669E r = 213EF9F3B0CFC4BF996B8AF3A7E1F6CACD2B87C8C63820000800AC787F17EC99 C04BCEDF29A8413CFF83142BB88A50EF8D9A086AF4EB03E97C567500C21D8657 14D832E03C6D054 s = 3D32322559B094E20D8935E250B6EC139AC4AAB77920812C119AF419FB62B332 C8D226C6C9362AE3C1E4AABE19359B8428EA74EC8FBE83C8618C2BCCB6B43FBA A0F2CCB7D303945",
      "ja": "SHA-256、メッセージ= \"サンプル\"：K = 15C2C6B7D1A070274484774E558B69FDFA193BDB7A23F27C2CD24298CE1B22A6 CC9B7FB8CABFD6CF7C6B1CF3251E5A1CDDD16FBFED28DE79935BB2C631B8B8EA 9CC4BCC937E669E R = 213EF9F3B0CFC4BF996B8AF3A7E1F6CACD2B87C8C63820000800AC787F17EC99 C04BCEDF29A8413CFF83142BB88A50EF8D9A086AF4EB03E97C567500C21D8657 14D832E03C6D054 S = 3D32322559B094E20D8935E250B6EC139AC4AAB77920812C119AF419FB62B332 C8D226C6C9362AE3C1E4AABE19359B8428EA74EC8FBE83C8618C2BCCB6B43FBA A0F2CCB7D303945"
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"sample\": k = 0FEF0B68CB49453A4C6ECBF1708DBEEFC885C57FDAFB88417AAEFA5B1C35017B 4B498507937ADCE2F1D9EFFA5FE8F5AEB116B804FD182A6CF1518FDB62D53F60 A0FF6EB707D856B r = 375D8F49C656A0BBD21D3F54CDA287D853C4BB1849983CD891EF6CD6BB56A62B 687807C16685C2C9BCA2663C33696ACCE344C45F3910B1DF806204FF731ECB28 9C100EF4D1805EC s = 1CDEC6F46DFEEE44BCE71D41C60550DC67CF98D6C91363625AC2553E4368D2DF B734A8E8C72E118A76ACDB0E58697940A0F3DF49E72894BD799450FC9E550CC0 4B9FF9B0380021C",
      "ja": "SHA-384と、メッセージ= \"サンプル\"：K = 0FEF0B68CB49453A4C6ECBF1708DBEEFC885C57FDAFB88417AAEFA5B1C35017B 4B498507937ADCE2F1D9EFFA5FE8F5AEB116B804FD182A6CF1518FDB62D53F60 A0FF6EB707D856B R = 375D8F49C656A0BBD21D3F54CDA287D853C4BB1849983CD891EF6CD6BB56A62B 687807C16685C2C9BCA2663C33696ACCE344C45F3910B1DF806204FF731ECB28 9C100EF4D1805EC S = 1CDEC6F46DFEEE44BCE71D41C60550DC67CF98D6C91363625AC2553E4368D2DF B734A8E8C72E118A76ACDB0E58697940A0F3DF49E72894BD799450FC9E550CC0 4B9FF9B0380021C"
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"sample\": k = 3FF373833A06C791D7AD586AFA3990F6EF76999C35246C4AD0D519BFF180CA18 80E11F2FB38B764854A0AE3BECDDB50F05AC4FCEE542F207C0A6229E2E19652F 0E647B9C4882193 r = 1C26F40D940A7EAA0EB1E62991028057D91FEDA0366B606F6C434C361F04E545 A6A51A435E26416F6838FFA260C617E798E946B57215284182BE55F29A355E60 24FE32A47289CF0 s = 3691DE4369D921FE94EDDA67CB71FBBEC9A436787478063EB1CC778B3DCDC1C4 162662752D28DEEDF6F32A269C82D1DB80C87CE4D3B662E03AC347806E3F19D1 8D6D4DE7358DF7E",
      "ja": "SHA-512と、メッセージ= \"サンプル\"：K = 3FF373833A06C791D7AD586AFA3990F6EF76999C35246C4AD0D519BFF180CA18 80E11F2FB38B764854A0AE3BECDDB50F05AC4FCEE542F207C0A6229E2E19652F 0E647B9C4882193 R = 1C26F40D940A7EAA0EB1E62991028057D91FEDA0366B606F6C434C361F04E545 A6A51A435E26416F6838FFA260C617E798E946B57215284182BE55F29A355E60 24FE32A47289CF0 S = 3691DE4369D921FE94EDDA67CB71FBBEC9A436787478063EB1CC778B3DCDC1C4 162662752D28DEEDF6F32A269C82D1DB80C87CE4D3B662E03AC347806E3F19D1 8D6D4DE7358DF7E"
    },
    {
      "indent": 3,
      "text": "With SHA-1, message = \"test\": k = 019B506FD472675A7140E429AA5510DCDDC21004206EEC1B39B28A688A8FD324 138F12503A4EFB64F934840DFBA2B4797CFC18B8BD0B31BBFF3CA66A4339E4EF 9D771B15279D1DC r = 133F5414F2A9BC41466D339B79376038A64D045E5B0F792A98E5A7AA87E0AD01 6419E5F8D176007D5C9C10B5FD9E2E0AB8331B195797C0358BA05ECBF24ACE59 C5F368A6C0997CC s = 3D16743AE9F00F0B1A500F738719C5582550FEB64689DA241665C4CE4F328BA0 E34A7EF527ED13BFA5889FD2D1D214C11EB17D6BC338E05A56F41CAFF1AF7B8D 574DB62EF0D0F21",
      "ja": "With SHA-1, message = \"test\": k = 019B506FD472675A7140E429AA5510DCDDC21004206EEC1B39B28A688A8FD324 138F12503A4EFB64F934840DFBA2B4797CFC18B8BD0B31BBFF3CA66A4339E4EF 9D771B15279D1DC r = 133F5414F2A9BC41466D339B79376038A64D045E5B0F792A98E5A7AA87E0AD01 6419E5F8D176007D5C9C10B5FD9E2E0AB8331B195797C0358BA05ECBF24ACE59 C5F368A6C0997CC s = 3D16743AE9F00F0B1A500F738719C5582550FEB64689DA241665C4CE4F328BA0 E34A7EF527ED13BFA5889FD2D1D214C11EB17D6BC338E05A56F41CAFF1AF7B8D 574DB62EF0D0F21"
    },
    {
      "indent": 3,
      "text": "With SHA-224, message = \"test\": k = 333C711F8C62F205F926593220233B06228285261D34026232F6F729620C6DE1 2220F282F4206D223226705608688B20B8BA86D8DFE54F07A37EC48F253283AC 33C3F5102C8CC3E r = 3048E76506C5C43D92B2E33F62B33E3111CEEB87F6C7DF7C7C01E3CDA28FA5E8 BE04B5B23AA03C0C70FEF8F723CBCEBFF0B7A52A3F5C8B84B741B4F6157E69A5 FB0524B48F31828 s = 2C99078CCFE5C82102B8D006E3703E020C46C87C75163A2CD839C885550BA5CB 501AC282D29A1C26D26773B60FBE05AAB62BFA0BA32127563D42F7669C97784C 8897C22CFB4B8FA",
      "ja": "K = 333C711F8C62F205F926593220233B06228285261D34026232F6F729620C6DE1 2220F282F4206D223226705608688B20B8BA86D8DFE54F07A37EC48F253283AC 33C3F5102C8CC3EのR = 3048E76506C5C43D92B2E33F62B33E3111CEEB87F6C7DF7C7C01E3CDA28FA5E8 BE04B5B23AA03C0C70FEF8F723CBCEBFF0B7A52A3F5C8B84B741B4F6157E69A5 FB0524B48F31828 S = 2C99078CCFE5C82102B8D006E3703E020C46C87C75163A2CD839C885550BA5CB 501AC282D29A1C26D26773B60FBE05AAB62BFA0BA32127563D42F7669C97784C 8897C22CFB4B8FA：SHA-224、メッセージ= \"テスト\" と"
    },
    {
      "indent": 3,
      "text": "With SHA-256, message = \"test\": k = 328E02CF07C7B5B6D3749D8302F1AE5BFAA8F239398459AF4A2C859C7727A812 3A7FE9BE8B228413FC8DC0E9DE16AF3F8F43005107F9989A5D97A5C4455DA895 E81336710A3FB2C r = 184BC808506E11A65D628B457FDA60952803C604CC7181B59BD25AEE1411A66D 12A777F3A0DC99E1190C58D0037807A95E5080FA1B2E5CCAA37B50D401CFFC34 17C005AEE963469 s = 27280D45F81B19334DBDB07B7E63FE8F39AC7E9AE14DE1D2A6884D2101850289 D70EE400F26ACA5E7D73F534A14568478E59D00594981ABE6A1BA18554C13EB5 E03921E4DC98333",
      "ja": "SHA-256、メッセージ= \"テスト\" K = 328E02CF07C7B5B6D3749D8302F1AE5BFAA8F239398459AF4A2C859C7727A812 3A7FE9BE8B228413FC8DC0E9DE16AF3F8F43005107F9989A5D97A5C4455DA895 E81336710A3FB2C R = 184BC808506E11A65D628B457FDA60952803C604CC7181B59BD25AEE1411A66D 12A777F3A0DC99E1190C58D0037807A95E5080FA1B2E5CCAA37B50D401CFFC34 17C005AEE963469 S = 27280D45F81B19334DBDB07B7E63FE8F39AC7E9AE14DE1D2A6884D2101850289 D70EE400F26ACA5E7D73F534A14568478E59D00594981ABE6A1BA18554C13EB5 E03921E4DC98333"
    },
    {
      "indent": 3,
      "text": "With SHA-384, message = \"test\": k = 2A77E29EAD9E811A9FDA0284C14CDFA1D9F8FA712DA59D530A06CDE54187E250 AD1D4FB5788161938B8DE049616399C5A56B0737C9564C9D4D845A4C6A7CDFCB FF0F01A82BE672E r = 319EE57912E7B0FAA1FBB145B0505849A89C6DB1EC06EA20A6A7EDE072A6268A F6FD9C809C7E422A5F33C6C3326EAD7402467DF3272A1B2726C1C20975950F0F 50D8324578F13EC s = 2CF3EA27EADD0612DD2F96F46E89AB894B01A10DF985C5FC099CFFE0EA083EB4 4BE682B08BFE405DAD5F37D0A2C59015BA41027E24B99F8F75A70B6B7385BF39 BBEA02513EB880C",
      "ja": "K = 2A77E29EAD9E811A9FDA0284C14CDFA1D9F8FA712DA59D530A06CDE54187E250 AD1D4FB5788161938B8DE049616399C5A56B0737C9564C9D4D845A4C6A7CDFCB FF0F01A82BE672E R = 319EE57912E7B0FAA1FBB145B0505​​849A89C6DB1EC06EA20A6A7EDE072A6268A F6FD9C809C7E422A5F33C6C3326EAD7402467DF3272A1B2726C1C20975950F0F 50D8324578F13EC S = 2CF3EA27EADD0612DD2F96F46E89AB894B01A10DF985C5FC099CFFE0EA083EB4 4BE682B08BFE405DAD5F37D0A2C59015BA41027E24B99F8F75A70B6B7385BF39 BBEA02513EB880C：SHA-384、メッセージ= \"テスト\" と"
    },
    {
      "indent": 3,
      "text": "With SHA-512, message = \"test\": k = 21CE6EE4A2C72C9F93BDB3B552F4A633B8C20C200F894F008643240184BE57BB 282A1645E47FBBE131E899B4C61244EFC2486D88CDBD1DD4A65EBDD837019D02 628D0DCD6ED8FB5 r = 2AA1888EAB05F7B00B6A784C4F7081D2C833D50794D9FEAF6E22B8BE728A2A90 BFCABDC803162020AA629718295A1489EE7ED0ECB8AAA197B9BDFC49D18DDD78 FC85A48F9715544 s = 0AA5371FE5CA671D6ED9665849C37F394FED85D51FEF72DA2B5F28EDFB2C6479 CA63320C19596F5E1101988E2C619E302DD05112F47E8823040CE540CD3E90DC F41DBC461744EE9",
      "ja": "SHA-512、メッセージを= \"テスト\"：K = 21CE6EE4A2C72C9F93BDB3B552F4A633B8C20C200F894F008643240184BE57BB 282A1645E47FBBE131E899B4C61244EFC2486D88CDBD1DD4A65EBDD837019D02 628D0DCD6ED8FB5 R = 2AA1888EAB05F7B00B6A784C4F7081D2C833D50794D9FEAF6E22B8BE728A2A90 BFCABDC803162020AA629718295A1489EE7ED0ECB8AAA197B9BDFC49D18DDD78 FC85A48F9715544 S = 0AA5371FE5CA671D6ED9665849C37F394FED85D51FEF72DA2B5F28EDFB2C6479 CA63320C19596F5E1101988E2C619E302DD05112F47E8823040CE540CD3E90DC F41DBC461744EE9"
    },
    {
      "indent": 0,
      "text": "A.3. Sample Code",
      "section_title": true,
      "ja": "A.3. サンプルコード"
    },
    {
      "indent": 3,
      "text": "We include here a sample implementation of deterministic DSA. It is meant for illustration purposes; for instance, this code makes no attempt at avoiding side-channel leakage of the private key. It is written in the Java programming language. The actual generation of the \"random\" value k is done in the computek() method. The Java virtual machine (JVM) is assumed to provide the implementation of the hash function and of HMAC.",
      "ja": "ここでは、確定的DSAのサンプル実装を含めます。説明のためのものです。たとえば、このコードは、秘密鍵のサイドチャネル漏洩を回避しようとはしません。 Javaプログラミング言語で書かれています。 「ランダムな」値kの実際の生成は、computek()メソッドで行われます。 Java仮想マシン（JVM）は、ハッシュ関数とHMACの実装を提供すると想定されています。"
    },
    {
      "indent": 2,
      "text": "// ==================================================================",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "import java.math.BigInteger;\nimport java.security.InvalidKeyException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "/**\n * Deterministic DSA signature generation.  This is a sample\n * implementation designed to illustrate how deterministic DSA\n * chooses the pseudorandom value k when signing a given message.\n * This implementation was NOT optimized or hardened against\n * side-channel leaks.\n *\n * An instance is created with a hash function name, which must be\n * supported by the underlying Java virtual machine (\"SHA-1\" and\n * \"SHA-256\" should work everywhere).  The data to sign is input\n * through the {@code update()} methods.  The private key is set with\n * {@link #setPrivateKey}.  The signature is obtained by calling\n * {@link #sign}; alternatively, {@link #signHash} can be used to\n * sign some data that has been externally hashed.  The private key\n * MUST be set before generating the signature itself, but message\n * data can be input before setting the key.\n *\n * Instances are NOT thread-safe.  However, once a signature has\n * been generated, the same instance can be used again for another\n * signature; {@link #setPrivateKey} need not be called again if the\n * private key has not changed.  {@link #reset} can also be called to\n * cancel previously input data.  Generating a signature with {@link\n * #sign} (not {@link #signHash}) also implicitly causes a\n * reset.\n *\n * ------------------------------------------------------------------\n * Copyright (c) 2013 IETF Trust and the persons identified as\n * authors of the code.  All rights reserved.\n *",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "* Redistribution and use in source and binary forms, with or without\n* modification, is permitted pursuant to, and subject to the license\n* terms contained in, the Simplified BSD License set forth in Section\n* 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents\n* (http://trustee.ietf.org/license-info).\n*\n* Technical remarks and questions can be addressed to:\n* pornin@bolet.org\n* ------------------------------------------------------------------\n*/",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "public class DeterministicDSA {",
      "ja": "パブリッククラスDeterministicDSA {"
    },
    {
      "indent": 10,
      "text": "private String macName;\nprivate MessageDigest dig;\nprivate Mac hmac;\nprivate BigInteger p, q, g, x;\nprivate int qlen, rlen, rolen, holen;\nprivate byte[] bx;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "/**\n * Create an instance, using the specified hash function.\n * The name is used to obtain from the JVM an implementation\n * of the hash function and an implementation of HMAC.\n *\n * @param hashName   the hash function name\n * @throws IllegalArgumentException  on unsupported name\n */\npublic DeterministicDSA(String hashName)\n{\n        try {\n                dig = MessageDigest.getInstance(hashName);\n        } catch (NoSuchAlgorithmException nsae) {\n                throw new IllegalArgumentException(nsae);\n        }\n        if (hashName.indexOf('-') < 0) {\n                macName = \"Hmac\" + hashName;\n        } else {\n                StringBuilder sb = new StringBuilder();\n                sb.append(\"Hmac\");\n                int n = hashName.length();\n                for (int i = 0; i < n; i ++) {\n                        char c = hashName.charAt(i);\n                        if (c != '-') {\n                                sb.append(c);\n                        }\n                }\n                macName = sb.toString();",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "        }\n        try {\n                hmac = Mac.getInstance(macName);\n        } catch (NoSuchAlgorithmException nsae) {\n                throw new IllegalArgumentException(nsae);\n        }\n        holen = hmac.getMacLength();\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "/**\n * Set the private key.\n *\n * @param p   key parameter: field modulus\n * @param q   key parameter: subgroup order\n * @param g   key parameter: generator\n * @param x   private key\n */\npublic void setPrivateKey(BigInteger p, BigInteger q,\n        BigInteger g, BigInteger x)\n{\n        /*\n         * Perform some basic sanity checks.  We do not\n         * check primality of p or q because that would\n         * be too expensive.\n         *\n         * We reject keys where q is longer than 999 bits,\n         * because it would complicate signature encoding.\n         * Normal DSA keys do not have a q longer than 256\n         * bits anyway.\n         */\n        if (p == null || q == null || g == null || x == null\n                || p.signum() <= 0 || q.signum() <= 0\n                || g.signum() <= 0 || x.signum() <= 0\n                || x.compareTo(q) >= 0 || q.compareTo(p) >= 0\n                || q.bitLength() > 999\n                || g.compareTo(p) >= 0 || g.bitLength() == 1\n                || g.modPow(q, p).bitLength() != 1) {\n                throw new IllegalArgumentException(\n                        \"invalid DSA private key\");\n        }\n        this.p = p;\n        this.q = q;\n        this.g = g;\n        this.x = x;\n        qlen = q.bitLength();\n        if (q.signum() <= 0 || qlen < 8) {\n                throw new IllegalArgumentException(\n                        \"bad group order: \" + q);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "}\nrolen = (qlen + 7) >>> 3;\nrlen = rolen * 8;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "        /*\n         * Convert the private exponent (x) into a sequence\n         * of octets.\n         */\n        bx = int2octets(x);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "private BigInteger bits2int(byte[] in)\n{\n        BigInteger v = new BigInteger(1, in);\n        int vlen = in.length * 8;\n        if (vlen > qlen) {\n                v = v.shiftRight(vlen - qlen);\n        }\n        return v;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "private byte[] int2octets(BigInteger v)\n{\n        byte[] out = v.toByteArray();\n        if (out.length < rolen) {\n                byte[] out2 = new byte[rolen];\n                System.arraycopy(out, 0,\n                        out2, rolen - out.length,\n                        out.length);\n                return out2;\n        } else if (out.length > rolen) {\n                byte[] out2 = new byte[rolen];\n                System.arraycopy(out, out.length - rolen,\n                        out2, 0, rolen);\n                return out2;\n        } else {\n                return out;\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "private byte[] bits2octets(byte[] in)\n{\n        BigInteger z1 = bits2int(in);\n        BigInteger z2 = z1.subtract(q);\n        return int2octets(z2.signum() < 0 ? z1 : z2);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "/**",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": " * Set (or reset) the secret key used for HMAC.\n *\n * @param K   the new secret key\n */\nprivate void setHmacKey(byte[] K)\n{\n        try {\n                hmac.init(new SecretKeySpec(K, macName));\n        } catch (InvalidKeyException ike) {\n                throw new IllegalArgumentException(ike);\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "/**\n * Compute the pseudorandom k for signature generation,\n * using the process specified for deterministic DSA.\n *\n * @param h1   the hashed message\n * @return  the pseudorandom k to use\n */\nprivate BigInteger computek(byte[] h1)\n{\n        /*\n         * Convert hash value into an appropriately truncated\n         * and/or expanded sequence of octets.  The private\n         * key was already processed (into field bx[]).\n         */\n        byte[] bh = bits2octets(h1);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "/*\n * HMAC is always used with K as key.\n * Whenever K is updated, we reset the\n * current HMAC key.\n */",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "/* step b. */\nbyte[] V = new byte[holen];\nfor (int i = 0; i < holen; i ++) {\n        V[i] = 0x01;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "/* step c. */\nbyte[] K = new byte[holen];\nsetHmacKey(K);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "/* step d. */\nhmac.update(V);\nhmac.update((byte)0x00);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "hmac.update(bx);\nhmac.update(bh);\nK = hmac.doFinal();\nsetHmacKey(K);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "/* step e. */\nhmac.update(V);\nV = hmac.doFinal();",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "/* step f. */\nhmac.update(V);\nhmac.update((byte)0x01);\nhmac.update(bx);\nhmac.update(bh);\nK = hmac.doFinal();\nsetHmacKey(K);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "/* step g. */\nhmac.update(V);\nV = hmac.doFinal();",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 18,
      "text": "/* step h. */\nbyte[] T = new byte[rolen];\nfor (;;) {\n        /*\n         * We want qlen bits, but we support only\n         * hash functions with an output length\n         * multiple of 8;acd hence, we will gather\n         * rlen bits, i.e., rolen octets.\n         */\n        int toff = 0;\n        while (toff < rolen) {\n                hmac.update(V);\n                V = hmac.doFinal();\n                int cc = Math.min(V.length,\n                        T.length - toff);\n                System.arraycopy(V, 0, T, toff, cc);\n                toff += cc;\n        }\n        BigInteger k = bits2int(T);\n        if (k.signum() > 0 && k.compareTo(q) < 0) {\n                return k;\n        }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 26,
      "text": "/*\n * k is not in the proper range; update\n * K and V, and loop.\n */",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "                hmac.update(V);\n                hmac.update((byte)0x00);\n                K = hmac.doFinal();\n                setHmacKey(K);\n                hmac.update(V);\n                V = hmac.doFinal();\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "/**\n * Process one more byte of input data (message to sign).\n *\n * @param in   the extra input byte\n */\npublic void update(byte in)\n{\n        dig.update(in);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "/**\n * Process some extra bytes of input data (message to sign).\n *\n * @param in   the extra input bytes\n */\npublic void update(byte[] in)\n{\n        dig.update(in, 0, in.length);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "/**\n * Process some extra bytes of input data (message to sign).\n *\n * @param in    the extra input buffer\n * @param off   the extra input offset\n * @param len   the extra input length (in bytes)\n */\npublic void update(byte[] in, int off, int len)\n{\n        dig.update(in, off, len);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "/**\n * Produce the signature.  {@link #setPrivateKey} MUST have\n * been called.  The signature is computed over the data\n * that was input through the {@code update*()} methods.\n * This engine is then reset (made ready for a new\n * signature generation).\n *",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": " * @return  the signature\n */\npublic byte[] sign()\n{\n        return signHash(dig.digest());\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "/**\n * Produce the signature.  {@link #setPrivateKey} MUST\n * have been called.  The signature is computed over the\n * provided hash value (data is assumed to have been hashed\n * externally).  The data that was input through the\n * {@code update*()} methods is ignored, but kept.\n *\n * If the hash output is longer than the subgroup order\n * (the length of q, in bits, denoted 'qlen'), then the\n * provided value {@code h1} can be truncated, provided that\n * at least qlen leading bits are preserved.  In other words,\n * bit values in {@code h1} beyond the first qlen bits are\n * ignored.\n *\n * @param h1   the hash value\n * @return  the signature\n */\npublic byte[] signHash(byte[] h1)\n{\n        if (p == null) {\n                throw new IllegalStateException(\n                        \"no private key set\");\n        }\n        try {\n                BigInteger k = computek(h1);\n                BigInteger r = g.modPow(k, p).mod(q);\n                BigInteger s = k.modInverse(q).multiply(\n                        bits2int(h1).add(x.multiply(r)))\n                        .mod(q);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 26,
      "text": "/*\n * Signature encoding: ASN.1 SEQUENCE of\n * two INTEGERs.  The conditions on q\n * imply that the encoded version of r and\n * s is no longer than 127 bytes for each,\n * including DER tag and length.\n */\nbyte[] br = r.toByteArray();\nbyte[] bs = s.toByteArray();\nint ulen = br.length + bs.length + 4;\nint slen = ulen + (ulen >= 128 ? 3 : 2);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 26,
      "text": "byte[] sig = new byte[slen];\nint i = 0;\nsig[i ++] = 0x30;\nif (ulen >= 128) {\n        sig[i ++] = (byte)0x81;\n        sig[i ++] = (byte)ulen;\n} else {\n        sig[i ++] = (byte)ulen;\n}\nsig[i ++] = 0x02;\nsig[i ++] = (byte)br.length;\nSystem.arraycopy(br, 0, sig, i, br.length);\ni += br.length;\nsig[i ++] = 0x02;\nsig[i ++] = (byte)bs.length;\nSystem.arraycopy(bs, 0, sig, i, bs.length);\nreturn sig;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "        } catch (ArithmeticException ae) {\n                throw new IllegalArgumentException(\n                        \"DSA error (bad key ?)\", ae);\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "        /**\n         * Reset this engine.  Data input through the {@code\n         * update*()} methods is discarded.  The current private key,\n         * if one was set, is kept unchanged.\n         */\n        public void reset()\n        {\n                dig.reset();\n        }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "// ==================================================================",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "ja": "Author's Address"
    },
    {
      "indent": 3,
      "text": "Thomas Pornin Quebec, QC Canada",
      "ja": "トーマスポルノケベック、QCカナダ"
    },
    {
      "indent": 3,
      "text": "EMail: pornin@bolet.org",
      "raw": true,
      "ja": ""
    }
  ]
}