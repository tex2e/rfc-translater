{
  "title": {
    "text": "RFC 7693 - The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)",
    "ja": "RFC 7693 - BLAKE2暗号化ハッシュおよびメッセージ認証コード（MAC）"
  },
  "number": 7693,
  "created_at": "2020-08-22 19:50:19.068524+09:00",
  "updated_by": "自動生成＆有志による翻訳・編集",
  "contents": [
    {
      "indent": 0,
      "text": "Independent Submission                                M-J. Saarinen, Ed.\nRequest for Comments: 7693                    Queen's University Belfast\nCategory: Informational                                    J-P. Aumasson\nISSN: 2070-1721                                        Kudelski Security\n                                                           November 2015",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)",
      "ja": "BLAKE2暗号化ハッシュおよびメッセージ認証コード（MAC）"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document describes the cryptographic hash function BLAKE2 and makes the algorithm specification and C source code conveniently available to the Internet community. BLAKE2 comes in two main flavors: BLAKE2b is optimized for 64-bit platforms and BLAKE2s for smaller architectures. BLAKE2 can be directly keyed, making it functionally equivalent to a Message Authentication Code (MAC).",
      "ja": "このドキュメントでは、暗号化ハッシュ関数BLAKE2について説明し、アルゴリズム仕様とCソースコードをインターネットコミュニティで便利に利用できるようにします。 BLAKE2には2つの主要な種類があります。BLAKE2bは64ビットプラットフォーム用に最適化され、BLAKE2sは小規模なアーキテクチャ用に最適化されています。 BLAKE2は直接キーイングできるため、機能的にはメッセージ認証コード（MAC）と同等です。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはInternet Standards Trackの仕様ではありません。情報提供を目的として公開されています。"
    },
    {
      "indent": 3,
      "text": "This is a contribution to the RFC Series, independently of any other RFC stream. The RFC Editor has chosen to publish this document at its discretion and makes no statement about its value for implementation or deployment. Documents approved for publication by the RFC Editor are not a candidate for any level of Internet Standard; see Section 2 of RFC 5741.",
      "ja": "これは、他のRFCストリームとは無関係に、RFCシリーズへの貢献です。 RFCエディターは、このドキュメントを独自の裁量で公開することを選択し、実装または展開に対するその価値については何も述べていません。 RFC Editorによって公開が承認されたドキュメントは、どのレベルのインターネット標準の候補にもなりません。 RFC 5741のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at http://www.rfc-editor.org/info/rfc7693.",
      "ja": "このドキュメントの現在のステータス、エラータ、およびフィードバックの提供方法に関する情報は、http：//www.rfc-editor.org/info/rfc7693で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2015 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2015 IETF Trustおよびドキュメントの作成者として識別された人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "この文書は、BCP 78およびこの文書の発行日に有効なIETF文書に関するIETFトラストの法的規定（http://trustee.ietf.org/license-info）の対象となります。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction and Terminology  . . . . . . . . . . . . . . . .   3\n2.  Conventions, Variables, and Constants . . . . . . . . . . . .   4\n  2.1.  Parameters  . . . . . . . . . . . . . . . . . . . . . . .   4\n  2.2.  Other Constants and Variables . . . . . . . . . . . . . .   4\n  2.3.  Arithmetic Notation . . . . . . . . . . . . . . . . . . .   4\n  2.4.  Little-Endian Interpretation of Words as Bytes  . . . . .   5\n  2.5.  Parameter Block . . . . . . . . . . . . . . . . . . . . .   5\n  2.6.  Initialization Vector . . . . . . . . . . . . . . . . . .   6\n  2.7.  Message Schedule SIGMA  . . . . . . . . . . . . . . . . .   6\n3.  BLAKE2 Processing . . . . . . . . . . . . . . . . . . . . . .   7\n  3.1.  Mixing Function G . . . . . . . . . . . . . . . . . . . .   7\n  3.2.  Compression Function F  . . . . . . . . . . . . . . . . .   8\n  3.3.  Padding Data and Computing a BLAKE2 Digest  . . . . . . .   9\n4.  Standard Parameter Sets and Algorithm Identifiers . . . . . .  10\n5.  Security Considerations . . . . . . . . . . . . . . . . . . .  11\n6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  11\n  6.1.  Normative References  . . . . . . . . . . . . . . . . . .  11\n  6.2.  Informative References  . . . . . . . . . . . . . . . . .  11\nAppendix A.  Example of BLAKE2b Computation . . . . . . . . . . .  13\nAppendix B.  Example of BLAKE2s Computation . . . . . . . . . . .  15\nAppendix C.  BLAKE2b Implementation C Source  . . . . . . . . . .  16\n  C.1.  blake2b.h . . . . . . . . . . . . . . . . . . . . . . . .  16\n  C.2.  blake2b.c . . . . . . . . . . . . . . . . . . . . . . . .  17\nAppendix D.  BLAKE2s Implementation C Source  . . . . . . . . . .  21\n  D.1.  blake2s.h . . . . . . . . . . . . . . . . . . . . . . . .  21\n  D.2.  blake2s.c . . . . . . . . . . . . . . . . . . . . . . . .  22\nAppendix E.  BLAKE2b and BLAKE2s Self-Test Module C Source  . . .  26\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  29\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  30",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction and Terminology",
      "section_title": true,
      "ja": "1. 概要と用語"
    },
    {
      "indent": 3,
      "text": "The BLAKE2 cryptographic hash function [BLAKE2] was designed by Jean-Philippe Aumasson, Samuel Neves, Zooko Wilcox-O'Hearn, and Christian Winnerlein.",
      "ja": "BLAKE2暗号化ハッシュ関数[BLAKE2]は、Jean-Philippe Aumasson、Samuel Neves、Zooko Wilcox-O'Hearn、およびChristian Winnerleinによって設計されました。"
    },
    {
      "indent": 3,
      "text": "BLAKE2 comes in two basic flavors:",
      "ja": "BLAKE2には2つの基本的なフレーバーがあります。"
    },
    {
      "indent": 3,
      "text": "o BLAKE2b (or just BLAKE2) is optimized for 64-bit platforms and produces digests of any size between 1 and 64 bytes.",
      "ja": "o BLAKE2b（または単にBLAKE2）は64ビットプラットフォーム用に最適化されており、1〜64バイトの任意のサイズのダイジェストを生成します。"
    },
    {
      "indent": 3,
      "text": "o BLAKE2s is optimized for 8- to 32-bit platforms and produces digests of any size between 1 and 32 bytes.",
      "ja": "o BLAKE2sは、8〜32ビットプラットフォーム用に最適化されており、1〜32バイトの任意のサイズのダイジェストを生成します。"
    },
    {
      "indent": 3,
      "text": "Both BLAKE2b and BLAKE2s are believed to be highly secure and perform well on any platform, software, or hardware. BLAKE2 does not require a special \"HMAC\" (Hashed Message Authentication Code) construction for keyed message authentication as it has a built-in keying mechanism.",
      "ja": "BLAKE2bとBLAKE2sはどちらも安全性が高く、あらゆるプラットフォーム、ソフトウェア、ハードウェアで適切に機能すると考えられています。 BLAKE2は、組み込みのキーイングメカニズムを備えているため、キー付きメッセージ認証に特別な \"HMAC\"（ハッシュメッセージ認証コード）の構築を必要としません。"
    },
    {
      "indent": 3,
      "text": "The BLAKE2 hash function may be used by digital signature algorithms and message authentication and integrity protection mechanisms in applications such as Public Key Infrastructure (PKI), secure communication protocols, cloud storage, intrusion detection, forensic suites, and version control systems.",
      "ja": "BLAKE2ハッシュ関数は、公開鍵基盤（PKI）、安全な通信プロトコル、クラウドストレージ、侵入検知、フォレンジックスイート、バージョン管理システムなどのアプリケーションのデジタル署名アルゴリズムとメッセージ認証および整合性保護メカニズムで使用できます。"
    },
    {
      "indent": 3,
      "text": "The BLAKE2 suite provides a more efficient alternative to US Secure Hash Algorithms SHA and HMAC-SHA [RFC6234]. BLAKE2s-128 is especially suited as a fast and more secure drop-in replacement to MD5 and HMAC-MD5 in legacy applications [RFC6151].",
      "ja": "BLAKE2スイートは、US Secure Hash Algorithms SHAおよびHMAC-SHA [RFC6234]のより効率的な代替手段を提供します。 BLAKE2s-128は、レガシーアプリケーションでのMD5およびHMAC-MD5の高速で安全なドロップイン代替品として特に適しています[RFC6151]。"
    },
    {
      "indent": 3,
      "text": "To aid implementation, we provide a trace of BLAKE2b-512 hash computation in Appendix A and a trace of BLAKE2s-256 hash computation in Appendix B. Due to space constraints, this document does not contain a full set of test vectors for BLAKE2.",
      "ja": "実装を支援するために、付録AにBLAKE2b-512ハッシュ計算のトレースを、付録BにBLAKE2s-256ハッシュ計算のトレースを提供します。スペースの制約のため、このドキュメントにはBLAKE2のテストベクトルの完全なセットは含まれていません。"
    },
    {
      "indent": 3,
      "text": "A reference implementation in C programming language for BLAKE2b can be found in Appendix C and for BLAKE2s in Appendix D of this document. These implementations MAY be validated with the more exhaustive Test Module contained in Appendix E.",
      "ja": "BLAKE2bのCプログラミング言語のリファレンス実装は、このドキュメントの付録Cと付録DのBLAKE2にあります。これらの実装は、付録Eに含まれるより包括的なテストモジュールで検証される場合があります。"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in [RFC2119].",
      "ja": "このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は、 [RFC2119]で説明されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. Conventions, Variables, and Constants",
      "section_title": true,
      "ja": "2. 規則、変数、および定数"
    },
    {
      "indent": 0,
      "text": "2.1. Parameters",
      "section_title": true,
      "ja": "2.1. パラメーター"
    },
    {
      "indent": 3,
      "text": "The following table summarizes various parameters and their ranges:",
      "ja": "次の表は、さまざまなパラメーターとその範囲をまとめたものです。"
    },
    {
      "indent": 14,
      "text": "              | BLAKE2b          | BLAKE2s          |\n--------------+------------------+------------------+\n Bits in word | w = 64           | w = 32           |\n Rounds in F  | r = 12           | r = 10           |\n Block bytes  | bb = 128         | bb = 64          |\n Hash bytes   | 1 <= nn <= 64    | 1 <= nn <= 32    |\n Key bytes    | 0 <= kk <= 64    | 0 <= kk <= 32    |\n Input bytes  | 0 <= ll < 2**128 | 0 <= ll < 2**64  |\n--------------+------------------+------------------+\n G Rotation   | (R1, R2, R3, R4) | (R1, R2, R3, R4) |\n  constants = | (32, 24, 16, 63) | (16, 12,  8,  7) |\n--------------+------------------+------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2. Other Constants and Variables",
      "section_title": true,
      "ja": "2.2. その他の定数と変数"
    },
    {
      "indent": 3,
      "text": "These variables are used in the algorithm description:",
      "ja": "これらの変数は、アルゴリズムの説明で使用されます。"
    },
    {
      "indent": 3,
      "text": "IV[0..7] : Initialization Vector (constant).",
      "ja": "IV[0..7] : 初期化ベクトル（定数）。"
    },
    {
      "indent": 3,
      "text": "SIGMA[0..9] : Message word permutations (constant).",
      "ja": "SIGMA[0..9] : メッセージワード順列（定数）。"
    },
    {
      "indent": 3,
      "text": "p[0..7] : Parameter block (defines hash and key sizes).",
      "ja": "p[0..7] : パラメータブロック（ハッシュとキーのサイズを定義）。"
    },
    {
      "indent": 3,
      "text": "m[0..15] : Sixteen words of a single message block.",
      "ja": "m[0..15] : 1つのメッセージブロックの16ワード。"
    },
    {
      "indent": 3,
      "text": "h[0..7] : Internal state of the hash.",
      "ja": "h[0..7] : ハッシュの内部状態。"
    },
    {
      "indent": 3,
      "text": "d[0..dd-1] : Padded input blocks. Each has \"bb\" bytes.",
      "ja": "d[0..dd-1] : パディングされた入力ブロック。それぞれに「bb」バイトがあります。"
    },
    {
      "indent": 3,
      "text": "t : Message byte offset at the end of the current block.",
      "ja": "t : 現在のブロックの終わりのメッセージバイトオフセット。"
    },
    {
      "indent": 3,
      "text": "f : Flag indicating the last block.",
      "ja": "f : 最後のブロックを示すフラグ。"
    },
    {
      "indent": 0,
      "text": "2.3. Arithmetic Notation",
      "section_title": true,
      "ja": "2.3. 算術表記"
    },
    {
      "indent": 3,
      "text": "For real-valued x, we define the following functions:",
      "ja": "実数値のxの場合、次の関数を定義します。"
    },
    {
      "indent": 3,
      "text": "floor(x) : Floor, the largest integer <= x.",
      "ja": "floor（x）: 床関数、x以下の最大の整数。"
    },
    {
      "indent": 3,
      "text": "ceil(x) : Ceiling, the smallest integer >= x.",
      "ja": "ceil（x）: 天井関数。最小の整数> = x。"
    },
    {
      "indent": 3,
      "text": "frac(x) : Positive fractional part of x, frac(x) = x - floor(x).",
      "ja": "frac（x）: xの正の小数部分、frac（x）= x-floor（x）。"
    },
    {
      "indent": 3,
      "text": "Operator notation in pseudocode:",
      "ja": "疑似コードでの演算子表記："
    },
    {
      "indent": 3,
      "text": "2**n = 2 to the power \"n\". 2**0=1, 2**1=2, 2**2=4, 2**3=8, etc.",
      "ja": "2 ** n = 2の \"n\"乗。 2 ** 0 = 1、2 ** 1 = 2、2 ** 2 = 4、2 ** 3 = 8など。"
    },
    {
      "indent": 3,
      "text": "a ^ b = Bitwise exclusive-or operation between \"a\" and \"b\".",
      "ja": "a ^ b =「a」と「b」の間のビット単位の排他的論理和演算。"
    },
    {
      "indent": 3,
      "text": "a mod b = Remainder \"a\" modulo \"b\", always in range [0, b-1].",
      "ja": "a mod b = Remainder \"a\" modulo \"b\"、常に範囲[0、b-1]内。"
    },
    {
      "indent": 3,
      "text": "x >> n = floor(x / 2**n). Logical shift \"x\" right by \"n\" bits.",
      "ja": "x >> n = floor（x / 2 ** n）。 「x」を「n」ビットだけ右に論理シフトします。"
    },
    {
      "indent": 3,
      "text": "x << n =  (x * 2**n) mod (2**w).  Logical shift \"x\" left by \"n\".",
      "ja": "x << n = (x * 2**n) mod (2**w)。\"x\"を\"n\"だけ左に論理シフトします。"
    },
    {
      "indent": 3,
      "text": "x >>> n =  (x >> n) ^ (x << (w - n)).  Rotate \"x\" right by \"n\".",
      "ja": "x >>> n = (x >> n) ^ (x << (w - n))。\"x\"を\"n\"だけ右に回転します。"
    },
    {
      "indent": 0,
      "text": "2.4. Little-Endian Interpretation of Words as Bytes",
      "section_title": true,
      "ja": "2.4. 単語のバイトとしてのリトルエンディアン解釈"
    },
    {
      "indent": 3,
      "text": "All mathematical operations are on 64-bit words in BLAKE2b and on 32-bit words in BLAKE2s.",
      "ja": "すべての数学演算は、BLAKE2bの64ビットワードとBLAKE2sの32ビットワードに対して行われます。"
    },
    {
      "indent": 3,
      "text": "We may also perform operations on vectors of words. Vector indexing is zero based; the first element of an n-element vector \"v\" is v[0] and the last one is v[n - 1]. All elements are denoted by v[0..n-1].",
      "ja": "単語のベクトルに対して操作を実行することもあります。ベクトルインデックスはゼロベースです。 n要素のベクトル \"v\"の最初の要素はv [0]で、最後の要素はv [n-1]です。すべての要素はv [0..n-1]で示されます。"
    },
    {
      "indent": 3,
      "text": "Byte (octet) streams are interpreted as words in little-endian order, with the least-significant byte first. Consider this sequence of eight hexadecimal bytes:",
      "ja": "バイト（オクテット）ストリームは、リトルエンディアン順のワードとして解釈され、最下位バイトが最初になります。次の8つの16進バイトのシーケンスを考えてみます。"
    },
    {
      "indent": 8,
      "text": "x[0..7] = 0x01 0x23 0x45 0x67 0x89 0xAB 0xCD 0xEF",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "When interpreted as a 32-bit word from the beginning memory address, x[0..3] has a numerical value of 0x67452301 or 1732584193.",
      "ja": "先頭メモリアドレスからの32ビットワードとして解釈すると、x[0..3]の数値は0x67452301または1732584193になります。"
    },
    {
      "indent": 3,
      "text": "When interpreted as a 64-bit word, bytes x[0..7] have a numerical value of 0xEFCDAB8967452301 or 17279655951921914625.",
      "ja": "64ビットワードとして解釈されると、バイトx[0..7]の値は0xEFCDAB8967452301または17279655951921914625になります。"
    },
    {
      "indent": 0,
      "text": "2.5. Parameter Block",
      "section_title": true,
      "ja": "2.5. パラメータブロック"
    },
    {
      "indent": 3,
      "text": "We specify the parameter block words p[0..7] as follows:",
      "ja": "パラメータブロックワードp[0..7]を次のように指定します。"
    },
    {
      "indent": 8,
      "text": "byte offset:    3 2 1 0     (otherwise zero)\n      p[0] = 0x0101kknn     p[1..7] = 0",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Here the \"nn\" byte specifies the hash size in bytes. The second (little-endian) byte of the parameter block, \"kk\", specifies the key size in bytes. Set kk = 00 for unkeyed hashing. Bytes 2 and 3 are set as 01. All other bytes in the parameter block are set as zero.",
      "ja": "ここで、「nn」バイトはハッシュサイズをバイト単位で指定します。パラメータブロックの2番目の（リトルエンディアン）バイト \"kk\"は、キーサイズをバイト単位で指定します。キーなしハッシュの場合、kk = 00を設定します。バイト2と3は01として設定されます。パラメーターブロック内の他のすべてのバイトはゼロとして設定されます。"
    },
    {
      "indent": 3,
      "text": "Note: [BLAKE2] defines additional variants of BLAKE2 with features such as salting, personalized hashes, and tree hashing. These OPTIONAL features use fields in the parameter block that are not defined in this document.",
      "ja": "注：[BLAKE2]は、ソルティング、パーソナライズされたハッシュ、ツリーハッシュなどの機能を備えたBLAKE2の追加のバリアントを定義します。これらのオプション機能は、このドキュメントで定義されていないパラメーターブロックのフィールドを使用します。"
    },
    {
      "indent": 0,
      "text": "2.6. Initialization Vector",
      "section_title": true,
      "ja": "2.6. 初期化ベクトル"
    },
    {
      "indent": 3,
      "text": "We define the Initialization Vector constant IV mathematically as:",
      "ja": "初期化ベクトル定数IVを数学的に次のように定義します。"
    },
    {
      "indent": 10,
      "text": "IV[i] = floor(2**w * frac(sqrt(prime(i+1)))), where prime(i) is the i:th prime number ( 2, 3, 5, 7, 11, 13, 17, 19 ) and sqrt(x) is the square root of x.",
      "ja": "IV[i] = floor(2**w * frac(sqrt(prime(i+1))))、ここでprime(i)はi番目の素数（2、3、5、7、11、13、17、19）、sqrt(x)はxの平方根です。"
    },
    {
      "indent": 3,
      "text": "The numerical values of IV can also be found in implementations in Appendices C and D for BLAKE2b and BLAKE2s, respectively.",
      "ja": "IVの数値は、BLAKE2bとBLAKE2sの付録CとDの実装でも確認できます。"
    },
    {
      "indent": 3,
      "text": "Note: BLAKE2b IV is the same as SHA-512 IV, and BLAKE2s IV is the same as SHA-256 IV; see [RFC6234].",
      "ja": "注：BLAKE2b IVはSHA-512 IVと同じで、BLAKE2s IVはSHA-256 IVと同じです。 [RFC6234]を参照してください。"
    },
    {
      "indent": 0,
      "text": "2.7. Message Schedule SIGMA",
      "section_title": true,
      "ja": "2.7. メッセージスケジュールSIGMA"
    },
    {
      "indent": 3,
      "text": "Message word schedule permutations for each round of both BLAKE2b and BLAKE2s are defined by SIGMA. For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].",
      "ja": "BLAKE2bとBLAKE2sの各ラウンドのメッセージワードスケジュール順列は、SIGMAによって定義されます。 BLAKE2bの場合、ラウンド10と11の2つの追加の順列はSIGMA [10..11] = SIGMA [0..1]です。"
    },
    {
      "indent": 8,
      "text": "  Round   |  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 |\n----------+-------------------------------------------------+\n SIGMA[0] |  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 |\n SIGMA[1] | 14 10  4  8  9 15 13  6  1 12  0  2 11  7  5  3 |\n SIGMA[2] | 11  8 12  0  5  2 15 13 10 14  3  6  7  1  9  4 |\n SIGMA[3] |  7  9  3  1 13 12 11 14  2  6  5 10  4  0 15  8 |\n SIGMA[4] |  9  0  5  7  2  4 10 15 14  1 11 12  6  8  3 13 |\n SIGMA[5] |  2 12  6 10  0 11  8  3  4 13  7  5 15 14  1  9 |\n SIGMA[6] | 12  5  1 15 14 13  4 10  0  7  6  3  9  2  8 11 |\n SIGMA[7] | 13 11  7 14 12  1  3  9  5  0 15  4  8  6  2 10 |\n SIGMA[8] |  6 15 14  9 11  3  0  8 12  2 13  7  1  4 10  5 |\n SIGMA[9] | 10  2  8  4  7  6  1  5 15 11  9 14  3 12 13  0 |\n----------+-------------------------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "3. BLAKE2 Processing",
      "section_title": true,
      "ja": "3. BLAKE2処理"
    },
    {
      "indent": 0,
      "text": "3.1. Mixing Function G",
      "section_title": true,
      "ja": "3.1. 攪拌関数G"
    },
    {
      "indent": 3,
      "text": "The G primitive function mixes two input words, \"x\" and \"y\", into four words indexed by \"a\", \"b\", \"c\", and \"d\" in the working vector v[0..15]. The full modified vector is returned. The rotation constants (R1, R2, R3, R4) are given in Section 2.1.",
      "ja": "Gプリミティブ関数は、2つの入力ワード「x」と「y」を、作業ベクトルv [0..15]の「a」、「b」、「c」、および「d」でインデックス付けされた4つのワードに混合します。完全に変更されたベクトルが返されます。回転定数（R1、R2、R3、R4）は、セクション2.1に記載されています。"
    },
    {
      "indent": 7,
      "text": "FUNCTION G( v[0..15], a, b, c, d, x, y )\n|\n|   v[a] := (v[a] + v[b] + x) mod 2**w\n|   v[d] := (v[d] ^ v[a]) >>> R1\n|   v[c] := (v[c] + v[d])     mod 2**w\n|   v[b] := (v[b] ^ v[c]) >>> R2\n|   v[a] := (v[a] + v[b] + y) mod 2**w\n|   v[d] := (v[d] ^ v[a]) >>> R3\n|   v[c] := (v[c] + v[d])     mod 2**w\n|   v[b] := (v[b] ^ v[c]) >>> R4\n|\n|   RETURN v[0..15]\n|\nEND FUNCTION.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "3.2. Compression Function F",
      "section_title": true,
      "ja": "3.2. 圧縮関数F"
    },
    {
      "indent": 3,
      "text": "Compression function F takes as an argument the state vector \"h\", message block vector \"m\" (last block is padded with zeros to full block size, if required), 2w-bit offset counter \"t\", and final block indicator flag \"f\". Local vector v[0..15] is used in processing. F returns a new state vector. The number of rounds, \"r\", is 12 for BLAKE2b and 10 for BLAKE2s. Rounds are numbered from 0 to r - 1.",
      "ja": "圧縮関数Fは、引数として、状態ベクトル \"h\"、メッセージブロックベクトル \"m\"（必要に応じて、最後のブロックにゼロで最大ブロックサイズまでパディングされます）、2wビットオフセットカウンター \"t\"、および最終ブロックインジケーターフラグを受け取ります「f」。ローカルベクトルv [0..15]が処理に使用されます。 Fは新しい状態ベクトルを返します。ラウンド数「r」は、BLAKE2bの場合は12、BLAKE2sの場合は10です。ラウンドには0からr-1までの番号が付けられます。"
    },
    {
      "indent": 7,
      "text": "FUNCTION F( h[0..7], m[0..15], t, f )\n|\n|      // Initialize local work vector v[0..15]\n|      v[0..7] := h[0..7]              // First half from state.\n|      v[8..15] := IV[0..7]            // Second half from IV.\n|\n|      v[12] := v[12] ^ (t mod 2**w)   // Low word of the offset.\n|      v[13] := v[13] ^ (t >> w)       // High word.\n|\n|      IF f = TRUE THEN                // last block flag?\n|      |   v[14] := v[14] ^ 0xFF..FF   // Invert all bits.\n|      END IF.\n|\n|      // Cryptographic mixing\n|      FOR i = 0 TO r - 1 DO           // Ten or twelve rounds.\n|      |\n|      |   // Message word selection permutation for this round.\n|      |   s[0..15] := SIGMA[i mod 10][0..15]\n|      |\n|      |   v := G( v, 0, 4,  8, 12, m[s[ 0]], m[s[ 1]] )\n|      |   v := G( v, 1, 5,  9, 13, m[s[ 2]], m[s[ 3]] )\n|      |   v := G( v, 2, 6, 10, 14, m[s[ 4]], m[s[ 5]] )\n|      |   v := G( v, 3, 7, 11, 15, m[s[ 6]], m[s[ 7]] )\n|      |\n|      |   v := G( v, 0, 5, 10, 15, m[s[ 8]], m[s[ 9]] )\n|      |   v := G( v, 1, 6, 11, 12, m[s[10]], m[s[11]] )\n|      |   v := G( v, 2, 7,  8, 13, m[s[12]], m[s[13]] )\n|      |   v := G( v, 3, 4,  9, 14, m[s[14]], m[s[15]] )\n|      |\n|      END FOR\n|\n|      FOR i = 0 TO 7 DO               // XOR the two halves.\n|      |   h[i] := h[i] ^ v[i] ^ v[i + 8]\n|      END FOR.\n|\n|      RETURN h[0..7]                  // New state.\n|\nEND FUNCTION.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "3.3. Padding Data and Computing a BLAKE2 Digest",
      "section_title": true,
      "ja": "3.3. データのパディングとBLAKE2ダイジェストの計算"
    },
    {
      "indent": 3,
      "text": "We refer the reader to Appendices C and D for reference C language implementations of BLAKE2b and BLAKE2s, respectively.",
      "ja": "BLAKE2bとBLAKE2sのリファレンスC言語の実装については、それぞれ付録CとDを参照してください。"
    },
    {
      "indent": 3,
      "text": "Key and data input are split and padded into \"dd\" message blocks d[0..dd-1], each consisting of 16 words (or \"bb\" bytes).",
      "ja": "キーとデータ入力は分割され、「dd」メッセージブロックd [0..dd-1]に埋め込まれます。各ブロックは16ワード（または「bb」バイト）で構成されます。"
    },
    {
      "indent": 3,
      "text": "If a secret key is used (kk > 0), it is padded with zero bytes and set as d[0]. Otherwise, d[0] is the first data block. The final data block d[dd-1] is also padded with zero to \"bb\" bytes (16 words).",
      "ja": "秘密鍵を使用する場合（kk> 0）、ゼロバイトが埋め込まれ、d [0]として設定されます。それ以外の場合、d [0]は最初のデータブロックです。最後のデータブロックd [dd-1]にも、0〜 \"bb\"バイト（16ワード）が埋め込まれます。"
    },
    {
      "indent": 3,
      "text": "The number of blocks is therefore dd = ceil(kk / bb) + ceil(ll / bb). However, in the special case of an unkeyed empty message (kk = 0 and ll = 0), we still set dd = 1 and d[0] consists of all zeros.",
      "ja": "したがって、ブロック数はdd = ceil（kk / bb）+ ceil（ll / bb）です。ただし、キーのない空のメッセージ（kk = 0およびll = 0）の特殊なケースでは、dd = 1に設定し、d [0]はすべてゼロで構成されます。"
    },
    {
      "indent": 3,
      "text": "The following procedure processes the padded data blocks into an \"nn\"-byte final hash value. See Section 2 for a description of various variables and constants used.",
      "ja": "次の手順では、パディングされたデータブロックを「nn」バイトの最終ハッシュ値に処理します。使用されるさまざまな変数と定数の説明については、セクション2を参照してください。"
    },
    {
      "indent": 8,
      "text": "FUNCTION BLAKE2( d[0..dd-1], ll, kk, nn )\n|\n|     h[0..7] := IV[0..7]          // Initialization Vector.\n|\n|     // Parameter block p[0]\n|     h[0] := h[0] ^ 0x01010000 ^ (kk << 8) ^ nn\n|\n|     // Process padded key and data blocks\n|     IF dd > 1 THEN\n|     |       FOR i = 0 TO dd - 2 DO\n|     |       |       h := F( h, d[i], (i + 1) * bb, FALSE )\n|     |       END FOR.\n|     END IF.\n|\n|     // Final block.\n|     IF kk = 0 THEN\n|     |       h := F( h, d[dd - 1], ll, TRUE )\n|     ELSE\n|     |       h := F( h, d[dd - 1], ll + bb, TRUE )\n|     END IF.\n|\n|     RETURN first \"nn\" bytes from little-endian word array h[].\n|\nEND FUNCTION.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "4. Standard Parameter Sets and Algorithm Identifiers",
      "section_title": true,
      "ja": "4. 標準パラメータセットとアルゴリズム識別子"
    },
    {
      "indent": 3,
      "text": "An implementation of BLAKE2b and/or BLAKE2s MAY support the following digest size parameters for interoperability (e.g., digital signatures), as long as a sufficient level of security is attained by the parameter selections. These parameters and identifiers are intended to be suitable as drop-in replacements to MD5 and corresponding SHA algorithms.",
      "ja": "BLAKE2bやBLAKE2sの実装は、十分なレベルのセキュリティがパラメーターの選択によって達成される限り、相互運用性（たとえば、デジタル署名）のために次のダイジェストサイズパラメーターをサポートする場合があります。これらのパラメーターとIDは、MD5および対応するSHAアルゴリズムへのドロップイン置換として適切であることを意図しています。"
    },
    {
      "indent": 3,
      "text": "Developers adapting BLAKE2 to ASN.1-based message formats SHOULD use the OID tree at x = 1.3.6.1.4.1.1722.12.2. The same OID can be used for both keyed and unkeyed hashing since in the latter case the key simply has zero length.",
      "ja": "BLAKE2をASN.1ベースのメッセージ形式に適合させる開発者は、x = 1.3.6.1.4.1.1722.12.2でOIDツリーを使用する必要があります（SHOULD）。後者の場合、キーの長さがゼロになるため、同じOIDをキー付きハッシュとキーなしハッシュの両方に使用できます。"
    },
    {
      "indent": 11,
      "text": " Algorithm     | Target | Collision | Hash | Hash ASN.1 |\n    Identifier |  Arch  |  Security |  nn  | OID Suffix |\n---------------+--------+-----------+------+------------+\n id-blake2b160 | 64-bit |   2**80   |  20  |   x.1.5    |\n id-blake2b256 | 64-bit |   2**128  |  32  |   x.1.8    |\n id-blake2b384 | 64-bit |   2**192  |  48  |   x.1.12   |\n id-blake2b512 | 64-bit |   2**256  |  64  |   x.1.16   |\n---------------+--------+-----------+------+------------+\n id-blake2s128 | 32-bit |   2**64   |  16  |   x.2.4    |\n id-blake2s160 | 32-bit |   2**80   |  20  |   x.2.5    |\n id-blake2s224 | 32-bit |   2**112  |  28  |   x.2.7    |\n id-blake2s256 | 32-bit |   2**128  |  32  |   x.2.8    |\n---------------+--------+-----------+------+------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "hashAlgs OBJECT IDENTIFIER ::= {\n    iso(1) identified-organization(3) dod(6) internet(1)\n    private(4) enterprise(1) kudelski(1722) cryptography(12) 2\n}\nmacAlgs OBJECT IDENTIFIER ::= {\n    iso(1) identified-organization(3) dod(6) internet(1)\n    private(4) enterprise(1) kudelski(1722) cryptography(12) 3\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "-- the two BLAKE2 variants --\nblake2b OBJECT IDENTIFIER ::= { hashAlgs 1 }\nblake2s OBJECT IDENTIFIER ::= { hashAlgs 2 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "-- BLAKE2b Identifiers --\nid-blake2b160 OBJECT IDENTIFIER ::= { blake2b 5 }\nid-blake2b256 OBJECT IDENTIFIER ::= { blake2b 8 }\nid-blake2b384 OBJECT IDENTIFIER ::= { blake2b 12 }\nid-blake2b512 OBJECT IDENTIFIER ::= { blake2b 16 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 10,
      "text": "-- BLAKE2s Identifiers --\nid-blake2s128 OBJECT IDENTIFIER ::= { blake2s 4 }\nid-blake2s160 OBJECT IDENTIFIER ::= { blake2s 5 }\nid-blake2s224 OBJECT IDENTIFIER ::= { blake2s 7 }\nid-blake2s256 OBJECT IDENTIFIER ::= { blake2s 8 }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "This document is intended to provide convenient open-source access by the Internet community to the BLAKE2 cryptographic hash algorithm. We wish to make no independent assertion to its security in this document. We refer the reader to [BLAKE] and [BLAKE2] for detailed cryptanalytic rationale behind its design.",
      "ja": "このドキュメントは、インターネットコミュニティによるBLAKE2暗号化ハッシュアルゴリズムへの便利なオープンソースアクセスを提供することを目的としています。このドキュメントでは、そのセキュリティについて独立した主張はしません。その設計の背後にある詳細な暗号解読の根拠については、読者に[BLAKE]と[BLAKE2]を参照してもらいます。"
    },
    {
      "indent": 3,
      "text": "In order to avoid bloat, the reference implementations in Appendices C and D may not erase all sensitive data (such as secret keys) immediately from process memory after use. Such cleanup can be added if needed.",
      "ja": "肥大化を回避するために、付録CとDのリファレンス実装は、使用後すぐにすべての機密データ（秘密鍵など）をプロセスメモリから消去しない場合があります。このようなクリーンアップは、必要に応じて追加できます。"
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6. 参考文献"
    },
    {
      "indent": 0,
      "text": "6.1. Normative References",
      "section_title": true,
      "ja": "6.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <http://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<http://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 0,
      "text": "6.2. Informative References",
      "section_title": true,
      "ja": "6.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[BLAKE] Aumasson, J-P., Meier, W., Phan, R., and L. Henzen, \"The Hash Function BLAKE\", January 2015, <https://131002.net/blake/book>.",
      "ja": "[ブレイク] Aumasson、J-P。、Meier、W.、Phan、R。、およびL. Henzen、「The Hash Function BLAKE」、2015年1月、<https://131002.net/blake/book>。"
    },
    {
      "indent": 3,
      "text": "[BLAKE2] Aumasson, J-P., Neves, S., Wilcox-O'Hearn, Z., and C. Winnerlein, \"BLAKE2: simpler, smaller, fast as MD5\", January 2013, <https://blake2.net/blake2.pdf>.",
      "ja": "[BLAKE2] Aumasson、JP。、Neves、S.、Wilcox-O'Hearn、Z.、and C. Winnerlein、 \"BLAKE2：simpler、small、fast as MD5\"、2013年1月、<https://blake2.net /blake2.pdf>。"
    },
    {
      "indent": 3,
      "text": "[FIPS140-2IG] NIST, \"Implementation Guidance for FIPS PUB 140-2 and the Cryptographic Module Validation Program\", September 2015, <http://csrc.nist.gov/groups/STM/cmvp/documents/fips140-2/ FIPS1402IG.pdf/>.",
      "ja": "[FIPS140-2IG] NIST、「FIPS PUB 140-2および暗号化モジュール検証プログラムの実装ガイダンス」、2015年9月、<http://csrc.nist.gov/groups/STM/cmvp/documents/fips140-2/ FIPS1402IG.pdf />。"
    },
    {
      "indent": 3,
      "text": "[RFC6151] Turner, S. and L. Chen, \"Updated Security Considerations for the MD5 Message-Digest and the HMAC-MD5 Algorithms\", RFC 6151, DOI 10.17487/RFC6151, March 2011, <http://www.rfc-editor.org/info/rfc6151>.",
      "ja": "[RFC6151]ターナーS.およびL.チェン、「MD5メッセージダイジェストおよびHMAC-MD5アルゴリズムの更新されたセキュリティに関する考慮事項」、RFC 6151、DOI 10.17487 / RFC6151、2011年3月、<http：//www.rfc- editor.org/info/rfc6151>。"
    },
    {
      "indent": 3,
      "text": "[RFC6234] Eastlake 3rd, D. and T. Hansen, \"US Secure Hash Algorithms (SHA and SHA-based HMAC and HKDF)\", RFC 6234, DOI 10.17487/RFC6234, May 2011, <http://www.rfc-editor.org/info/rfc6234>.",
      "ja": "[RFC6234] Eastlake 3rd、D。およびT. Hansen、「US Secure Hash Algorithms（SHA and SHA-based HMAC and HKDF）」、RFC 6234、DOI 10.17487 / RFC6234、2011年5月、<http：//www.rfc- editor.org/info/rfc6234>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Example of BLAKE2b Computation",
      "section_title": true,
      "ja": "付録A. BLAKE2b計算の例"
    },
    {
      "indent": 3,
      "text": "We compute the unkeyed hash of three ASCII bytes \"abc\" with BLAKE2b-512 and show internal values during computation.",
      "ja": "3つのASCIIバイト「abc」のキーなしハッシュをBLAKE2b-512で計算し、計算中に内部値を表示します。"
    },
    {
      "indent": 3,
      "text": "       m[16] = 0000000000636261 0000000000000000 0000000000000000\n               0000000000000000 0000000000000000 0000000000000000\n               0000000000000000 0000000000000000 0000000000000000\n               0000000000000000 0000000000000000 0000000000000000\n               0000000000000000 0000000000000000 0000000000000000\n               0000000000000000\n\n(i= 0) v[16] = 6A09E667F2BDC948 BB67AE8584CAA73B 3C6EF372FE94F82B\n               A54FF53A5F1D36F1 510E527FADE682D1 9B05688C2B3E6C1F\n               1F83D9ABFB41BD6B 5BE0CD19137E2179 6A09E667F3BCC908\n               BB67AE8584CAA73B 3C6EF372FE94F82B A54FF53A5F1D36F1\n               510E527FADE682D2 9B05688C2B3E6C1F E07C265404BE4294\n               5BE0CD19137E2179\n\n(i= 1) v[16] = 86B7C1568029BB79 C12CBCC809FF59F3 C6A5214CC0EACA8E\n               0C87CD524C14CC5D 44EE6039BD86A9F7 A447C850AA694A7E\n               DE080F1BB1C0F84B 595CB8A9A1ACA66C BEC3AE837EAC4887\n               6267FC79DF9D6AD1 FA87B01273FA6DBE 521A715C63E08D8A\n               E02D0975B8D37A83 1C7B754F08B7D193 8F885A76B6E578FE\n               2318A24E2140FC64\n\n(i= 2) v[16] = 53281E83806010F2 3594B403F81B4393 8CD63C7462DE0DFF\n               85F693F3DA53F974 BAABDBB2F386D9AE CA5425AEC65A10A8\n               C6A22E2FF0F7AA48 C6A56A51CB89C595 224E6A3369224F96\n               500E125E58A92923 E9E4AD0D0E1A0D48 85DF9DC143C59A74\n               92A3AAAA6D952B7F C5FDF71090FAE853 2A8A40F15A462DD0\n               572D17EFFDD37358\n\n(i= 3) v[16] = 60ED96AA7AD41725 E46A743C71800B9D 1A04B543A01F156B\n               A2F8716E775C4877 DA0A61BCDE4267EA B1DD230754D7BDEE\n               25A1422779E06D14 E6823AE4C3FF58A5 A1677E19F37FD5DA\n               22BDCE6976B08C51 F1DE8696BEC11BF1 A0EBD586A4A1D2C8\n               C804EBAB11C99FA9 8E0CEC959C715793 7C45557FAE0D4D89\n               716343F52FDD265E\n\n(i= 4) v[16] = BB2A77D3A8382351 45EB47971F23B103 98BE297F6E45C684\n               A36077DEE3370B89 8A03C4CB7E97590A 24192E49EBF54EA0\n               4F82C9401CB32D7A 8CCD013726420DC4 A9C9A8F17B1FC614\n               55908187977514A0 5B44273E66B19D27 B6D5C9FCA2579327\n               086092CFB858437E 5C4BE2156DBEECF9 2EFEDE99ED4EFF16\n               3E7B5F234CD1F804",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "(i= 5) v[16] = C79C15B3D423B099 2DA2224E8DA97556 77D2B26DF1C45C55\n               8934EB09A3456052 0F6D9EEED157DA2A 6FE66467AF88C0A9\n               4EB0B76284C7AAFB 299C8E725D954697 B2240B59E6D567D3\n               2643C2370E49EBFD 79E02EEF20CDB1AE 64B3EED7BB602F39\n               B97D2D439E4DF63D C718E755294C9111 1F0893F2772BB373\n               1205EA4A7859807D\n\n(i= 6) v[16] = E58F97D6385BAEE4 7640AA9764DA137A DEB4C7C23EFE287E\n               70F6F41C8783C9F6 7127CD48C76A7708 9E472AF0BE3DB3F6\n               0F244C62DDF71788 219828AA83880842 41CCA9073C8C4D0D\n               5C7912BC10DF3B4B A2C3ABBD37510EE2 CB5668CC2A9F7859\n               8733794F07AC1500 C67A6BE42335AA6F ACB22B28681E4C82\n               DB2161604CBC9828\n\n(i= 7) v[16] = 6E2D286EEADEDC81 BCF02C0787E86358 57D56A56DD015EDF\n               55D899D40A5D0D0A 819415B56220C459 B63C479A6A769F02\n               258E55E0EC1F362A 3A3B4EC60E19DFDC 04D769B3FCB048DB\n               B78A9A33E9BFF4DD 5777272AE1E930C0 5A387849E578DBF6\n               92AAC307CF2C0AFC 30AACCC4F06DAFAA 483893CC094F8863\n               E03C6CC89C26BF92\n\n(i= 8) v[16] = FFC83ECE76024D01 1BE7BFFB8C5CC5F9 A35A18CBAC4C65B7\n               B7C2C7E6D88C285F 81937DA314A50838 E1179523A2541963\n               3A1FAD7106232B8F 1C7EDE92AB8B9C46 A3C2D35E4F685C10\n               A53D3F73AA619624 30BBCC0285A22F65 BCEFBB6A81539E5D\n               3841DEF6F4C9848A 98662C85FBA726D4 7762439BD5A851BD\n               B0B9F0D443D1A889\n\n(i= 9) v[16] = 753A70A1E8FAEADD 6B0D43CA2C25D629 F8343BA8B94F8C0B\n               BC7D062B0DB5CF35 58540EE1B1AEBC47 63C5B9B80D294CB9\n               490870ECAD27DEBD B2A90DDF667287FE 316CC9EBEEFAD8FC\n               4A466BCD021526A4 5DA7F7638CEC5669 D9C8826727D306FC\n               88ED6C4F3BD7A537 19AE688DDF67F026 4D8707AAB40F7E6D\n               FD3F572687FEA4F1\n\n(i=10) v[16] = E630C747CCD59C4F BC713D41127571CA 46DB183025025078\n               6727E81260610140 2D04185EAC2A8CBA 5F311B88904056EC\n               40BD313009201AAB 0099D4F82A2A1EAB 6DD4FBC1DE60165D\n               B3B0B51DE3C86270 900AEE2F233B08E5 A07199D87AD058D8\n               2C6B25593D717852 37E8CA471BEAA5F8 2CFC1BAC10EF4457\n               01369EC18746E775\n\n(i=11) v[16] = E801F73B9768C760 35C6D22320BE511D 306F27584F65495E\n               B51776ADF569A77B F4F1BE86690B3C34 3CC88735D1475E4B\n               5DAC67921FF76949 1CDB9D31AD70CC4E 35BA354A9C7DF448\n               4929CBE45679D73E 733D1A17248F39DB 92D57B736F5F170A\n               61B5C0A41D491399 B5C333457E12844A BD696BE010D0D889\n               02231E1A917FE0BD",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "(i=12) v[16] = 12EF8A641EC4F6D6 BCED5DE977C9FAF5 733CA476C5148639\n               97DF596B0610F6FC F42C16519AD5AFA7 AA5AC1888E10467E\n               217D930AA51787F3 906A6FF19E573942 75AB709BD3DCBF24\n               EE7CE1F345947AA4 F8960D6C2FAF5F5E E332538A36B6D246\n               885BEF040EF6AA0B A4939A417BFB78A3 646CBB7AF6DCE980\n               E813A23C60AF3B82\n\n        h[8] = 0D4D1C983FA580BA E9F6129FB697276A B7C45A68142F214C\n               D1A2FFDB6FBB124B 2D79AB2A39C5877D 95CC3345DED552C2\n               5A92F1DBA88AD318 239900D4ED8623B9\n\nBLAKE2b-512(\"abc\") = BA 80 A5 3F 98 1C 4D 0D 6A 27 97 B6 9F 12 F6 E9\n                     4C 21 2F 14 68 5A C4 B7 4B 12 BB 6F DB FF A2 D1\n                     7D 87 C5 39 2A AB 79 2D C2 52 D5 DE 45 33 CC 95\n                     18 D3 8A A8 DB F1 92 5A B9 23 86 ED D4 00 99 23",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix B. Example of BLAKE2s Computation",
      "section_title": true,
      "ja": "付録B. BLAKE2s計算の例"
    },
    {
      "indent": 3,
      "text": "We compute the unkeyed hash of three ASCII bytes \"abc\" with BLAKE2s-256 and show internal values during computation.",
      "ja": "3つのASCIIバイト「abc」のキーなしハッシュをBLAKE2s-256で計算し、計算中に内部値を表示します。"
    },
    {
      "indent": 3,
      "text": "       m[16] = 00636261 00000000 00000000 00000000 00000000 00000000\n               00000000 00000000 00000000 00000000 00000000 00000000\n               00000000 00000000 00000000 00000000\n\n(i=0)  v[16] = 6B08E647 BB67AE85 3C6EF372 A54FF53A 510E527F 9B05688C\n               1F83D9AB 5BE0CD19 6A09E667 BB67AE85 3C6EF372 A54FF53A\n               510E527C 9B05688C E07C2654 5BE0CD19\n\n(i=1)  v[16] = 16A3242E D7B5E238 CE8CE24B 927AEDE1 A7B430D9 93A4A14E\n               A44E7C31 41D4759B 95BF33D3 9A99C181 608A3A6B B666383E\n               7A8DD50F BE378ED7 353D1EE6 3BB44C6B\n\n(i=2)  v[16] = 3AE30FE3 0982A96B E88185B4 3E339B16 F24338CD 0E66D326\n               E005ED0C D591A277 180B1F3A FCF43914 30DB62D6 4847831C\n               7F00C58E FB847886 C544E836 524AB0E2\n\n(i=3)  v[16] = 7A3BE783 997546C1 D45246DF EDB5F821 7F98A742 10E864E2\n               D4AB70D0 C63CB1AB 6038DA9E 414594B0 F2C218B5 8DA0DCB7\n               D7CD7AF5 AB4909DF 85031A52 C4EDFC98\n\n(i=4)  v[16] = 2A8B8CB7 1ACA82B2 14045D7F CC7258ED 383CF67C E090E7F9\n               3025D276 57D04DE4 994BACF0 F0982759 F17EE300 D48FC2D5\n               DC854C10 523898A9 C03A0F89 47D6CD88\n\n(i=5)  v[16] = C4AA2DDB 111343A3 D54A700A 574A00A9 857D5A48 B1E11989\n               6F5C52DF DD2C53A3 678E5F8E 9718D4E9 622CB684 92976076\n               0E41A517 359DC2BE 87A87DDD 643F9CEC\n\n(i=6)  v[16] = 3453921C D7595EE1 592E776D 3ED6A974 4D997CB3 DE9212C3\n               35ADF5C9 9916FD65 96562E89 4EAD0792 EBFC2712 2385F5B2\n               F34600FB D7BC20FB EB452A7B ECE1AA40\n\n(i=7)  v[16] = BE851B2D A85F6358 81E6FC3B 0BB28000 FA55A33A 87BE1FAD\n               4119370F 1E2261AA A1318FD3 F4329816 071783C2 6E536A8D\n               9A81A601 E7EC80F1 ACC09948 F849A584\n\n(i=8)  v[16] = 07E5B85A 069CC164 F9DE3141 A56F4680 9E440AD2 9AB659EA\n               3C84B971 21DBD9CF 46699F8C 765257EC AF1D998C 75E4C3B6\n               523878DC 30715015 397FEE81 4F1FA799\n\n(i=9)  v[16] = 435148C4 A5AA2D11 4B354173 D543BC9E BDA2591C BF1D2569\n               4FCB3120 707ADA48 565B3FDE 32C9C916 EAF4A1AB B1018F28\n               8078D978 68ADE4B5 9778FDA3 2863B92E\n\n(i=10) v[16] = D9C994AA CFEC3AA6 700D0AB2 2C38670E AF6A1F66 1D023EF3\n               1D9EC27D 945357A5 3E9FFEBD 969FE811 EF485E21 A632797A\n               DEEF082E AF3D80E1 4E86829B 4DEAFD3A\n\n        h[8] = 8C5E8C50 E2147C32 A32BA7E1 2F45EB4E 208B4537 293AD69E\n               4C9B994D 82596786\n\nBLAKE2s-256(\"abc\") = 50 8C 5E 8C 32 7C 14 E2 E1 A7 2B A3 4E EB 45 2F\n                     37 45 8B 20 9E D6 3A 29 4D 99 9B 4C 86 67 59 82",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix C. BLAKE2b Implementation C Source",
      "section_title": true,
      "ja": "付録C. BLAKE2b実装Cソース"
    },
    {
      "indent": 0,
      "text": "C.1. blake2b.h",
      "section_title": true,
      "ja": "C.1. blake2b.h"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\n// blake2b.h\n// BLAKE2b Hashing Context and API Prototypes",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "#ifndef BLAKE2B_H #define BLAKE2B_H",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "#include <stdint.h>\n#include <stddef.h>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// state context\ntypedef struct {\n    uint8_t b[128];                     // input buffer\n    uint64_t h[8];                      // chained state\n    uint64_t t[2];                      // total number of bytes\n    size_t c;                           // pointer for b[]\n    size_t outlen;                      // digest size\n} blake2b_ctx;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Initialize the hashing context \"ctx\" with optional key \"key\".\n//      1 <= outlen <= 64 gives the digest size in bytes.\n//      Secret key (also <= 64 bytes) is optional (keylen = 0).\nint blake2b_init(blake2b_ctx *ctx, size_t outlen,\n    const void *key, size_t keylen);    // secret key",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Add \"inlen\" bytes from \"in\" into the hash.\nvoid blake2b_update(blake2b_ctx *ctx,   // context\n    const void *in, size_t inlen);      // data to be hashed",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Generate the message digest (size given in init).\n//      Result placed in \"out\".\nvoid blake2b_final(blake2b_ctx *ctx, void *out);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// All-in-one convenience function.\nint blake2b(void *out, size_t outlen,   // return buffer for digest\n    const void *key, size_t keylen,     // optional secret key\n    const void *in, size_t inlen);      // data to be hashed",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "#endif <CODE ENDS>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "C.2. blake2b.c",
      "section_title": true,
      "ja": "C.2. blake2b.c"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS> // blake2b.c // A simple BLAKE2b Reference Implementation.",
      "ja": "<CODE BEGINS> // blake2b.c //シンプルなBLAKE2bリファレンス実装。"
    },
    {
      "indent": 3,
      "text": "#include \"blake2b.h\"",
      "ja": "#include \"blake2b.h\""
    },
    {
      "indent": 3,
      "text": "// Cyclic right rotation.",
      "ja": "//循環右回転。"
    },
    {
      "indent": 3,
      "text": "#ifndef ROTR64\n#define ROTR64(x, y)  (((x) >> (y)) ^ ((x) << (64 - (y))))\n#endif",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Little-endian byte access.",
      "ja": "//リトルエンディアンバイトアクセス。"
    },
    {
      "indent": 3,
      "text": "#define B2B_GET64(p)                            \\\n    (((uint64_t) ((uint8_t *) (p))[0]) ^        \\\n    (((uint64_t) ((uint8_t *) (p))[1]) << 8) ^  \\\n    (((uint64_t) ((uint8_t *) (p))[2]) << 16) ^ \\\n    (((uint64_t) ((uint8_t *) (p))[3]) << 24) ^ \\\n    (((uint64_t) ((uint8_t *) (p))[4]) << 32) ^ \\\n    (((uint64_t) ((uint8_t *) (p))[5]) << 40) ^ \\\n    (((uint64_t) ((uint8_t *) (p))[6]) << 48) ^ \\\n    (((uint64_t) ((uint8_t *) (p))[7]) << 56))",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// G Mixing function.",
      "ja": "// G攪拌関数。"
    },
    {
      "indent": 3,
      "text": "#define B2B_G(a, b, c, d, x, y) {   \\\n    v[a] = v[a] + v[b] + x;         \\\n    v[d] = ROTR64(v[d] ^ v[a], 32); \\\n    v[c] = v[c] + v[d];             \\\n    v[b] = ROTR64(v[b] ^ v[c], 24); \\\n    v[a] = v[a] + v[b] + y;         \\\n    v[d] = ROTR64(v[d] ^ v[a], 16); \\\n    v[c] = v[c] + v[d];             \\\n    v[b] = ROTR64(v[b] ^ v[c], 63); }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Initialization Vector.",
      "ja": "//初期化ベクトル。"
    },
    {
      "indent": 3,
      "text": "static const uint64_t blake2b_iv[8] = {\n    0x6A09E667F3BCC908, 0xBB67AE8584CAA73B,\n    0x3C6EF372FE94F82B, 0xA54FF53A5F1D36F1,\n    0x510E527FADE682D1, 0x9B05688C2B3E6C1F,\n    0x1F83D9ABFB41BD6B, 0x5BE0CD19137E2179\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Compression function. \"last\" flag indicates last block.",
      "ja": "//圧縮関数。 「最後」のフラグは最後のブロックを示します。"
    },
    {
      "indent": 3,
      "text": "static void blake2b_compress(blake2b_ctx *ctx, int last)\n{\n    const uint8_t sigma[12][16] = {\n        { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },\n        { 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3 },\n        { 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4 },\n        { 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8 },\n        { 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13 },\n        { 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9 },\n        { 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11 },\n        { 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10 },\n        { 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5 },\n        { 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0 },\n        { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },\n        { 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3 }\n    };\n    int i;\n    uint64_t v[16], m[16];",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "       for (i = 0; i < 8; i++) {           // init work variables\n           v[i] = ctx->h[i];\n           v[i + 8] = blake2b_iv[i];\n       }\n       v[12] ^= ctx->t[0];                 // low 64 bits of offset\n       v[13] ^= ctx->t[1];                 // high 64 bits\n       if (last)                           // last block flag set ?\n           v[14] = ~v[14];",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 16; i++)            // get little-endian words\n    m[i] = B2B_GET64(&ctx->b[8 * i]);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 12; i++) {          // twelve rounds\n    B2B_G( 0, 4,  8, 12, m[sigma[i][ 0]], m[sigma[i][ 1]]);\n    B2B_G( 1, 5,  9, 13, m[sigma[i][ 2]], m[sigma[i][ 3]]);\n    B2B_G( 2, 6, 10, 14, m[sigma[i][ 4]], m[sigma[i][ 5]]);\n    B2B_G( 3, 7, 11, 15, m[sigma[i][ 6]], m[sigma[i][ 7]]);\n    B2B_G( 0, 5, 10, 15, m[sigma[i][ 8]], m[sigma[i][ 9]]);\n    B2B_G( 1, 6, 11, 12, m[sigma[i][10]], m[sigma[i][11]]);\n    B2B_G( 2, 7,  8, 13, m[sigma[i][12]], m[sigma[i][13]]);\n    B2B_G( 3, 4,  9, 14, m[sigma[i][14]], m[sigma[i][15]]);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    for( i = 0; i < 8; ++i )\n        ctx->h[i] ^= v[i] ^ v[i + 8];\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Initialize the hashing context \"ctx\" with optional key \"key\".\n//      1 <= outlen <= 64 gives the digest size in bytes.\n//      Secret key (also <= 64 bytes) is optional (keylen = 0).",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "int blake2b_init(blake2b_ctx *ctx, size_t outlen,\n    const void *key, size_t keylen)        // (keylen=0: no key)\n{\n    size_t i;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "if (outlen == 0 || outlen > 64 || keylen > 64)\n    return -1;                      // illegal parameters",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 8; i++)             // state, \"param block\"\n    ctx->h[i] = blake2b_iv[i];\nctx->h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "ctx->t[0] = 0;                      // input count low word\nctx->t[1] = 0;                      // input count high word\nctx->c = 0;                         // pointer within buffer\nctx->outlen = outlen;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = keylen; i < 128; i++)      // zero input block\n    ctx->b[i] = 0;\nif (keylen > 0) {\n    blake2b_update(ctx, key, keylen);\n    ctx->c = 128;                   // at the end\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    return 0;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Add \"inlen\" bytes from \"in\" into the hash.",
      "ja": "//「in」から「inlen」バイトをハッシュに追加します。"
    },
    {
      "indent": 3,
      "text": "void blake2b_update(blake2b_ctx *ctx,\n    const void *in, size_t inlen)       // data bytes\n{\n    size_t i;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    for (i = 0; i < inlen; i++) {\n        if (ctx->c == 128) {            // buffer full ?\n            ctx->t[0] += ctx->c;        // add counters\n            if (ctx->t[0] < ctx->c)     // carry overflow ?\n                ctx->t[1]++;            // high word\n            blake2b_compress(ctx, 0);   // compress (not last)\n            ctx->c = 0;                 // counter to zero\n        }\n        ctx->b[ctx->c++] = ((const uint8_t *) in)[i];\n    }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Generate the message digest (size given in init). // Result placed in \"out\".",
      "ja": "//メッセージダイジェストを生成します（initで指定されたサイズ）。 //結果は「out」に配置されます。"
    },
    {
      "indent": 3,
      "text": "void blake2b_final(blake2b_ctx *ctx, void *out)\n{\n    size_t i;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "ctx->t[0] += ctx->c;                // mark last block offset\nif (ctx->t[0] < ctx->c)             // carry overflow\n    ctx->t[1]++;                    // high word",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "while (ctx->c < 128)                // fill up with zeros\n    ctx->b[ctx->c++] = 0;\nblake2b_compress(ctx, 1);           // final block flag = 1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    // little endian convert and store\n    for (i = 0; i < ctx->outlen; i++) {\n        ((uint8_t *) out)[i] =\n            (ctx->h[i >> 3] >> (8 * (i & 7))) & 0xFF;\n    }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Convenience function for all-in-one computation.",
      "ja": "//オールインワンの計算に便利な関数。"
    },
    {
      "indent": 3,
      "text": "int blake2b(void *out, size_t outlen,\n    const void *key, size_t keylen,\n    const void *in, size_t inlen)\n{\n    blake2b_ctx ctx;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "if (blake2b_init(&ctx, outlen, key, keylen))\n    return -1;\nblake2b_update(&ctx, in, inlen);\nblake2b_final(&ctx, out);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    return 0;\n}\n<CODE ENDS>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix D. BLAKE2s Implementation C Source",
      "section_title": true,
      "ja": "付録D. BLAKE2の実装Cソース"
    },
    {
      "indent": 0,
      "text": "D.1. blake2s.h",
      "section_title": true,
      "ja": "D.1. blake2s.h"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS>\n// blake2s.h\n// BLAKE2s Hashing Context and API Prototypes",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "#ifndef BLAKE2S_H #define BLAKE2S_H",
      "ja": "#ifndef BLAKE2S_H #define BLAKE2S_H"
    },
    {
      "indent": 3,
      "text": "#include <stdint.h>\n#include <stddef.h>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// state context\ntypedef struct {\n    uint8_t b[64];                      // input buffer\n    uint32_t h[8];                      // chained state\n    uint32_t t[2];                      // total number of bytes\n    size_t c;                           // pointer for b[]\n    size_t outlen;                      // digest size\n} blake2s_ctx;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Initialize the hashing context \"ctx\" with optional key \"key\".\n//      1 <= outlen <= 32 gives the digest size in bytes.\n//      Secret key (also <= 32 bytes) is optional (keylen = 0).\nint blake2s_init(blake2s_ctx *ctx, size_t outlen,\n    const void *key, size_t keylen);    // secret key",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Add \"inlen\" bytes from \"in\" into the hash.\nvoid blake2s_update(blake2s_ctx *ctx,   // context\n    const void *in, size_t inlen);      // data to be hashed",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Generate the message digest (size given in init).\n//      Result placed in \"out\".\nvoid blake2s_final(blake2s_ctx *ctx, void *out);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// All-in-one convenience function.\nint blake2s(void *out, size_t outlen,   // return buffer for digest\n    const void *key, size_t keylen,     // optional secret key\n    const void *in, size_t inlen);      // data to be hashed",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "#endif <CODE ENDS>",
      "ja": "#endif <コード終了>"
    },
    {
      "indent": 0,
      "text": "D.2. blake2s.c",
      "section_title": true,
      "ja": "D.2. blake2s.c"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS> // blake2s.c // A simple blake2s Reference Implementation.",
      "ja": "<CODE BEGINS> // blake2s.c //シンプルなblake2sリファレンス実装。"
    },
    {
      "indent": 3,
      "text": "#include \"blake2s.h\"",
      "ja": "#include \"blake2s.h\""
    },
    {
      "indent": 3,
      "text": "// Cyclic right rotation.",
      "ja": "// 循環右回転。"
    },
    {
      "indent": 3,
      "text": "#ifndef ROTR32\n#define ROTR32(x, y)  (((x) >> (y)) ^ ((x) << (32 - (y))))\n#endif",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Little-endian byte access.",
      "ja": "// リトルエンディアンバイトアクセス。"
    },
    {
      "indent": 3,
      "text": "#define B2S_GET32(p)                            \\\n    (((uint32_t) ((uint8_t *) (p))[0]) ^        \\\n    (((uint32_t) ((uint8_t *) (p))[1]) << 8) ^  \\\n    (((uint32_t) ((uint8_t *) (p))[2]) << 16) ^ \\\n    (((uint32_t) ((uint8_t *) (p))[3]) << 24))",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Mixing function G.",
      "ja": "// 攪拌関数G。"
    },
    {
      "indent": 3,
      "text": "#define B2S_G(a, b, c, d, x, y) {   \\\n    v[a] = v[a] + v[b] + x;         \\\n    v[d] = ROTR32(v[d] ^ v[a], 16); \\\n    v[c] = v[c] + v[d];             \\\n    v[b] = ROTR32(v[b] ^ v[c], 12); \\\n    v[a] = v[a] + v[b] + y;         \\\n    v[d] = ROTR32(v[d] ^ v[a], 8);  \\\n    v[c] = v[c] + v[d];             \\\n    v[b] = ROTR32(v[b] ^ v[c], 7); }",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Initialization Vector.",
      "ja": "// 初期化ベクトル。"
    },
    {
      "indent": 3,
      "text": "static const uint32_t blake2s_iv[8] =\n{\n    0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n    0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19\n};",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Compression function. \"last\" flag indicates last block.",
      "ja": "// 圧縮関数。 「最後」のフラグは最後のブロックを示します。"
    },
    {
      "indent": 3,
      "text": "static void blake2s_compress(blake2s_ctx *ctx, int last)\n{\n    const uint8_t sigma[10][16] = {\n        { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },\n        { 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3 },\n        { 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4 },\n        { 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8 },\n        { 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13 },\n        { 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9 },\n        { 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11 },\n        { 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10 },\n        { 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5 },\n        { 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0 }\n    };\n    int i;\n    uint32_t v[16], m[16];",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 8; i++) {           // init work variables\n    v[i] = ctx->h[i];\n    v[i + 8] = blake2s_iv[i];\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "v[12] ^= ctx->t[0];                 // low 32 bits of offset\nv[13] ^= ctx->t[1];                 // high 32 bits\nif (last)                           // last block flag set ?\n    v[14] = ~v[14];",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 16; i++)            // get little-endian words\n    m[i] = B2S_GET32(&ctx->b[4 * i]);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 10; i++) {          // ten rounds\n    B2S_G( 0, 4,  8, 12, m[sigma[i][ 0]], m[sigma[i][ 1]]);\n    B2S_G( 1, 5,  9, 13, m[sigma[i][ 2]], m[sigma[i][ 3]]);\n    B2S_G( 2, 6, 10, 14, m[sigma[i][ 4]], m[sigma[i][ 5]]);\n    B2S_G( 3, 7, 11, 15, m[sigma[i][ 6]], m[sigma[i][ 7]]);\n    B2S_G( 0, 5, 10, 15, m[sigma[i][ 8]], m[sigma[i][ 9]]);\n    B2S_G( 1, 6, 11, 12, m[sigma[i][10]], m[sigma[i][11]]);\n    B2S_G( 2, 7,  8, 13, m[sigma[i][12]], m[sigma[i][13]]);\n    B2S_G( 3, 4,  9, 14, m[sigma[i][14]], m[sigma[i][15]]);\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    for( i = 0; i < 8; ++i )\n        ctx->h[i] ^= v[i] ^ v[i + 8];\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Initialize the hashing context \"ctx\" with optional key \"key\".\n//      1 <= outlen <= 32 gives the digest size in bytes.\n//      Secret key (also <= 32 bytes) is optional (keylen = 0).",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "int blake2s_init(blake2s_ctx *ctx, size_t outlen,\n    const void *key, size_t keylen)     // (keylen=0: no key)\n{\n    size_t i;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "if (outlen == 0 || outlen > 32 || keylen > 32)\n    return -1;                      // illegal parameters",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 8; i++)             // state, \"param block\"\n    ctx->h[i] = blake2s_iv[i];\nctx->h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "ctx->t[0] = 0;                      // input count low word\nctx->t[1] = 0;                      // input count high word\nctx->c = 0;                         // pointer within buffer\nctx->outlen = outlen;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = keylen; i < 64; i++)       // zero input block\n    ctx->b[i] = 0;\nif (keylen > 0) {\n    blake2s_update(ctx, key, keylen);\n    ctx->c = 64;                    // at the end\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    return 0;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Add \"inlen\" bytes from \"in\" into the hash.",
      "ja": "//「in」から「inlen」バイトをハッシュに追加します。"
    },
    {
      "indent": 3,
      "text": "void blake2s_update(blake2s_ctx *ctx,\n    const void *in, size_t inlen)       // data bytes\n{\n    size_t i;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    for (i = 0; i < inlen; i++) {\n        if (ctx->c == 64) {             // buffer full ?\n            ctx->t[0] += ctx->c;        // add counters\n            if (ctx->t[0] < ctx->c)     // carry overflow ?\n                ctx->t[1]++;            // high word\n            blake2s_compress(ctx, 0);   // compress (not last)\n            ctx->c = 0;                 // counter to zero\n        }\n        ctx->b[ctx->c++] = ((const uint8_t *) in)[i];\n    }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Generate the message digest (size given in init). // Result placed in \"out\".",
      "ja": "//メッセージダイジェストを生成します（initで指定されたサイズ）。 //結果は「out」に配置されます。"
    },
    {
      "indent": 3,
      "text": "void blake2s_final(blake2s_ctx *ctx, void *out)\n{\n    size_t i;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "ctx->t[0] += ctx->c;                // mark last block offset\nif (ctx->t[0] < ctx->c)             // carry overflow\n    ctx->t[1]++;                    // high word",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "while (ctx->c < 64)                 // fill up with zeros\n    ctx->b[ctx->c++] = 0;\nblake2s_compress(ctx, 1);           // final block flag = 1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    // little endian convert and store\n    for (i = 0; i < ctx->outlen; i++) {\n        ((uint8_t *) out)[i] =\n            (ctx->h[i >> 2] >> (8 * (i & 3))) & 0xFF;\n    }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "// Convenience function for all-in-one computation.",
      "ja": "//オールインワンの計算に便利な関数。"
    },
    {
      "indent": 3,
      "text": "int blake2s(void *out, size_t outlen,\n    const void *key, size_t keylen,\n    const void *in, size_t inlen)\n{\n    blake2s_ctx ctx;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "if (blake2s_init(&ctx, outlen, key, keylen))\n    return -1;\nblake2s_update(&ctx, in, inlen);\nblake2s_final(&ctx, out);",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    return 0;\n}\n<CODE ENDS>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix E. BLAKE2b and BLAKE2s Self-Test Module C Source",
      "section_title": true,
      "ja": "付録E. BLAKE2bおよびBLAKE2sセルフテストモジュールCソース"
    },
    {
      "indent": 3,
      "text": "This module computes a series of keyed and unkeyed hashes from deterministically generated pseudorandom data and computes a hash over those results. This is a fairly exhaustive, yet compact and fast method for verifying that the hashing module is functioning correctly.",
      "ja": "このモジュールは、確定的に生成された疑似ランダムデータから一連のキー付きおよびキーなしのハッシュを計算し、それらの結果に対するハッシュを計算します。これはかなり完全ですが、ハッシュモジュールが正しく機能していることを確認するためのコンパクトで高速な方法です。"
    },
    {
      "indent": 3,
      "text": "Such testing is RECOMMENDED, especially when compiling the implementation for a new a target platform configuration. Furthermore, some security standards, such as FIPS-140, may require a Power-On Self Test (POST) to be performed every time the cryptographic module is loaded [FIPS140-2IG].",
      "ja": "このようなテストは、特に新しいターゲットプラットフォーム構成の実装をコンパイルする場合に推奨されます。さらに、FIPS-140などの一部のセキュリティ標準では、暗号化モジュールがロードされるたびにパワーオンセルフテスト（POST）を実行する必要がある場合があります[FIPS140-2IG]。"
    },
    {
      "indent": 3,
      "text": "<CODE BEGINS> // test_main.c // Self test Modules for BLAKE2b and BLAKE2s -- and a stub main().",
      "ja": "<CODE BEGINS> // test_main.c // BLAKE2bおよびBLAKE2sのセルフテストモジュール-およびスタブmain()。"
    },
    {
      "indent": 3,
      "text": "#include <stdio.h>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "#include \"blake2b.h\" #include \"blake2s.h\"",
      "ja": "#include \"blake2b.h\" #include \"blake2s.h\""
    },
    {
      "indent": 3,
      "text": "// Deterministic sequences (Fibonacci generator).",
      "ja": "//確定的シーケンス（フィボナッチジェネレーター）。"
    },
    {
      "indent": 3,
      "text": "static void selftest_seq(uint8_t *out, size_t len, uint32_t seed)\n{\n    size_t i;\n    uint32_t t, a , b;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "a = 0xDEAD4BAD * seed;              // prime\nb = 1;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < len; i++) {         // fill the buf\n    t = a + b;\n    a = b;\n    b = t;\n    out[i] = (t >> 24) & 0xFF;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "}",
      "ja": "｝"
    },
    {
      "indent": 3,
      "text": "// BLAKE2b self-test validation. Return 0 when OK.",
      "ja": "// BLAKE2bセルフテスト検証。 OKの場合は0を返します。"
    },
    {
      "indent": 3,
      "text": "int blake2b_selftest()\n{\n    // grand hash of hash results\n    const uint8_t blake2b_res[32] = {\n        0xC2, 0x3A, 0x78, 0x00, 0xD9, 0x81, 0x23, 0xBD,\n        0x10, 0xF5, 0x06, 0xC6, 0x1E, 0x29, 0xDA, 0x56,\n        0x03, 0xD7, 0x63, 0xB8, 0xBB, 0xAD, 0x2E, 0x73,\n        0x7F, 0x5E, 0x76, 0x5A, 0x7B, 0xCC, 0xD4, 0x75\n    };\n    // parameter sets\n    const size_t b2b_md_len[4] = { 20, 32, 48, 64 };\n    const size_t b2b_in_len[6] = { 0, 3, 128, 129, 255, 1024 };",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "size_t i, j, outlen, inlen;\nuint8_t in[1024], md[64], key[64];\nblake2b_ctx ctx;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "// 256-bit hash for testing\nif (blake2b_init(&ctx, 32, NULL, 0))\n    return -1;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 4; i++) {\n    outlen = b2b_md_len[i];\n    for (j = 0; j < 6; j++) {\n        inlen = b2b_in_len[j];",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 15,
      "text": "selftest_seq(in, inlen, inlen);     // unkeyed hash\nblake2b(md, outlen, NULL, 0, in, inlen);\nblake2b_update(&ctx, md, outlen);   // hash the hash",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "        selftest_seq(key, outlen, outlen);  // keyed hash\n        blake2b(md, outlen, key, outlen, in, inlen);\n        blake2b_update(&ctx, md, outlen);   // hash the hash\n    }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "// compute and compare the hash of hashes\nblake2b_final(&ctx, md);\nfor (i = 0; i < 32; i++) {\n    if (md[i] != blake2b_res[i])\n        return -1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "return 0;",
      "ja": "0を返します。"
    },
    {
      "indent": 3,
      "text": "}",
      "ja": "｝"
    },
    {
      "indent": 3,
      "text": "// BLAKE2s self-test validation. Return 0 when OK.",
      "ja": "// BLAKE2のセルフテスト検証。 OKの場合は0を返します。"
    },
    {
      "indent": 3,
      "text": "int blake2s_selftest()\n{\n    // Grand hash of hash results.\n    const uint8_t blake2s_res[32] = {\n        0x6A, 0x41, 0x1F, 0x08, 0xCE, 0x25, 0xAD, 0xCD,\n        0xFB, 0x02, 0xAB, 0xA6, 0x41, 0x45, 0x1C, 0xEC,\n        0x53, 0xC5, 0x98, 0xB2, 0x4F, 0x4F, 0xC7, 0x87,\n        0xFB, 0xDC, 0x88, 0x79, 0x7F, 0x4C, 0x1D, 0xFE\n    };\n    // Parameter sets.\n    const size_t b2s_md_len[4] = { 16, 20, 28, 32 };\n    const size_t b2s_in_len[6] = { 0,  3,  64, 65, 255, 1024 };",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "size_t i, j, outlen, inlen;\nuint8_t in[1024], md[32], key[32];\nblake2s_ctx ctx;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "// 256-bit hash for testing.\nif (blake2s_init(&ctx, 32, NULL, 0))\n    return -1;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "for (i = 0; i < 4; i++) {\n    outlen = b2s_md_len[i];\n    for (j = 0; j < 6; j++) {\n        inlen = b2s_in_len[j];",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 15,
      "text": "selftest_seq(in, inlen, inlen);     // unkeyed hash\nblake2s(md, outlen, NULL, 0, in, inlen);\nblake2s_update(&ctx, md, outlen);   // hash the hash",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "        selftest_seq(key, outlen, outlen);  // keyed hash\n        blake2s(md, outlen, key, outlen, in, inlen);\n        blake2s_update(&ctx, md, outlen);   // hash the hash\n    }\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "// Compute and compare the hash of hashes.\nblake2s_final(&ctx, md);\nfor (i = 0; i < 32; i++) {\n    if (md[i] != blake2s_res[i])\n        return -1;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "return 0;",
      "ja": "0を返します。"
    },
    {
      "indent": 3,
      "text": "}",
      "ja": "｝"
    },
    {
      "indent": 3,
      "text": "// Test driver.",
      "ja": "//テストドライバ。"
    },
    {
      "indent": 3,
      "text": "int main(int argc, char **argv)\n{\n    printf(\"blake2b_selftest() = %s\\n\",\n         blake2b_selftest() ? \"FAIL\" : \"OK\");\n    printf(\"blake2s_selftest() = %s\\n\",\n         blake2s_selftest() ? \"FAIL\" : \"OK\");",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "    return 0;\n}\n<CODE ENDS>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The editor wishes to thank the [BLAKE2] team for their encouragement: Jean-Philippe Aumasson, Samuel Neves, Zooko Wilcox-O'Hearn, and Christian Winnerlein. We have borrowed passages from [BLAKE] and [BLAKE2] with permission.",
      "ja": "編集者は、[BLAKE2]チームの励ましに感謝したいと思います：Jean-Philippe Aumasson、Samuel Neves、Zooko Wilcox-O'Hearn、Christian Winnerlein。 [BLAKE]と[BLAKE2]の文章を許可を得て借りています。"
    },
    {
      "indent": 3,
      "text": "[BLAKE2] is based on the SHA-3 proposal [BLAKE], designed by Jean-Philippe Aumasson, Luca Henzen, Willi Meier, and Raphael C.-W. Phan. BLAKE2, like BLAKE, relies on a core algorithm borrowed from the ChaCha stream cipher, designed by Daniel J. Bernstein.",
      "ja": "[BLAKE2]は、Jean-Philippe Aumasson、Luca Henzen、Willi Meier、およびRaphael C.-Wによって設計されたSHA-3提案[BLAKE]に基づいています。ファン。 BLAKEと同様、BLAKE2は、Daniel J. Bernsteinによって設計されたChaChaストリーム暗号から借用されたコアアルゴリズムに依存しています。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Markku-Juhani O. Saarinen (editor) Queen's University Belfast Centre for Secure Information Technologies, ECIT Northern Ireland Science Park Queen's Road, Queen's Island Belfast BT3 9DT United Kingdom",
      "ja": "Markku-Juhani O. Saarinen（編集者）クイーンズ大学ベルファスト安全情報技術センター、ECIT北アイルランドサイエンスパーククイーンズロード、クイーンズアイランドベルファストBT3 9DTイギリス"
    },
    {
      "indent": 3,
      "text": "Email: m.saarinen@qub.ac.uk\nURI:   http://www.csit.qub.ac.uk",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Jean-Philippe Aumasson Kudelski Security 22-24, Route de Geneve Case Postale 134 Cheseaux 1033 Switzerland",
      "ja": "Jean-Philippe Aumasson Kudelski Security 22-24、Route de Geneve Case Postale 134 Cheseaux 1033 Switzerland"
    },
    {
      "indent": 3,
      "text": "Email: jean-philippe.aumasson@nagra.com\nURI:   https://www.kudelskisecurity.com",
      "raw": true,
      "ja": ""
    }
  ]
}