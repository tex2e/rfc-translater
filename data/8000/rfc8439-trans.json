{
  "title": {
    "text": "RFC 8439 - ChaCha20 and Poly1305 for IETF Protocols",
    "ja": "RFC 8439 - IETFプロトコル用のChaCha20およびPoly1305"
  },
  "number": 8439,
  "created_at": "2020-08-23 12:22:35.477058+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Research Task Force (IRTF)                               Y. Nir\nRequest for Comments: 8439                                      Dell EMC\nObsoletes: 7539                                               A. Langley\nCategory: Informational                                     Google, Inc.\nISSN: 2070-1721                                                June 2018",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 16,
      "text": "ChaCha20 and Poly1305 for IETF Protocols",
      "ja": "IETFプロトコル用のChaCha20およびPoly1305"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document defines the ChaCha20 stream cipher as well as the use of the Poly1305 authenticator, both as stand-alone algorithms and as a \"combined mode\", or Authenticated Encryption with Associated Data (AEAD) algorithm.",
      "ja": "このドキュメントでは、ChaCha20ストリーム暗号と、スタンドアロンアルゴリズムおよび「結合モード」としてのPoly1305オーセンティケーターの使用、またはAuthenticated Encryption with Associated Data（AEAD）アルゴリズムを定義しています。"
    },
    {
      "indent": 3,
      "text": "RFC 7539, the predecessor of this document, was meant to serve as a stable reference and an implementation guide. It was a product of the Crypto Forum Research Group (CFRG). This document merges the errata filed against RFC 7539 and adds a little text to the Security Considerations section.",
      "ja": "このドキュメントの前身であるRFC 7539は、安定したリファレンスおよび実装ガイドとして機能することを目的としています。これは暗号フォーラム研究グループ（CFRG）の製品でした。このドキュメントは、RFC 7539に対して提出された正誤表をマージし、セキュリティに関する考慮事項セクションに短いテキストを追加します。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはInternet Standards Trackの仕様ではありません。情報提供を目的として公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Research Task Force (IRTF). The IRTF publishes the results of Internet-related research and development activities. These results might not be suitable for deployment. This RFC represents the consensus of the Crypto Forum Research Group of the Internet Research Task Force (IRTF). Documents approved for publication by the IRSG are not candidates for any level of Internet Standard; see Section 2 of RFC 7841.",
      "ja": "この文書は、Internet Research Task Force（IRTF）の製品です。 IRTFは、インターネット関連の研究開発活動の結果を公開しています。これらの結果は、展開に適さない可能性があります。このRFCは、インターネット研究タスクフォース（IRTF）の暗号フォーラム研究グループの合意を表します。 IRSGによる公開が承認されたドキュメントは、どのレベルのインターネット標準の候補にもなりません。 RFC 7841のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8439.",
      "ja": "このドキュメントの現在のステータス、エラータ、およびフィードバックの提供方法に関する情報は、https：//www.rfc-editor.org/info/rfc8439で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2018 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2018 IETF Trustおよびドキュメントの作成者として識別された人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "この文書は、BCP 78およびIETF文書に関するIETFトラストの法的規定（https://trustee.ietf.org/license-info）の対象であり、この文書の発行日に有効です。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4\n  1.1.  Conventions Used in This Document . . . . . . . . . . . .   5\n2.  The Algorithms  . . . . . . . . . . . . . . . . . . . . . . .   5\n  2.1.  The ChaCha Quarter Round  . . . . . . . . . . . . . . . .   5\n    2.1.1.  Test Vector for the ChaCha Quarter Round  . . . . . .   6\n  2.2.  A Quarter Round on the ChaCha State . . . . . . . . . . .   6\n    2.2.1.  Test Vector for the Quarter Round on the ChaCha State   7\n  2.3.  The ChaCha20 Block Function . . . . . . . . . . . . . . .   7\n    2.3.1.  The ChaCha20 Block Function in Pseudocode . . . . . .   9\n    2.3.2.  Test Vector for the ChaCha20 Block Function . . . . .  10\n  2.4.  The ChaCha20 Encryption Algorithm . . . . . . . . . . . .  11\n    2.4.1.  The ChaCha20 Encryption Algorithm in Pseudocode . . .  12\n    2.4.2.  Example and Test Vector for the ChaCha20 Cipher . . .  12\n  2.5.  The Poly1305 Algorithm  . . . . . . . . . . . . . . . . .  14\n    2.5.1.  The Poly1305 Algorithms in Pseudocode . . . . . . . .  16\n    2.5.2.  Poly1305 Example and Test Vector  . . . . . . . . . .  17\n  2.6.  Generating the Poly1305 Key Using ChaCha20  . . . . . . .  18\n    2.6.1.  Poly1305 Key Generation in Pseudocode . . . . . . . .  19\n    2.6.2.  Poly1305 Key Generation Test Vector . . . . . . . . .  19\n  2.7.  A Pseudorandom Function for Crypto Suites Based on\n        ChaCha/Poly1305 . . . . . . . . . . . . . . . . . . . . .  20\n  2.8.  AEAD Construction . . . . . . . . . . . . . . . . . . . .  20\n    2.8.1.  Pseudocode for the AEAD Construction  . . . . . . . .  23\n    2.8.2.  Example and Test Vector for AEAD_CHACHA20_POLY1305  .  23\n3.  Implementation Advice . . . . . . . . . . . . . . . . . . . .  25\n4.  Security Considerations . . . . . . . . . . . . . . . . . . .  26\n5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  27\n6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  27\n  6.1.  Normative References  . . . . . . . . . . . . . . . . . .  27\n  6.2.  Informative References  . . . . . . . . . . . . . . . . .  28\nAppendix A.  Additional Test Vectors  . . . . . . . . . . . . . .  30\n  A.1.  The ChaCha20 Block Functions  . . . . . . . . . . . . . .  30\n  A.2.  ChaCha20 Encryption . . . . . . . . . . . . . . . . . . .  33\n  A.3.  Poly1305 Message Authentication Code  . . . . . . . . . .  36\n  A.4.  Poly1305 Key Generation Using ChaCha20  . . . . . . . . .  41\n  A.5.  ChaCha20-Poly1305 AEAD Decryption . . . . . . . . . . . .  42\nAppendix B.  Performance Measurements of ChaCha20 . . . . . . . .  45\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  46\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  46",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The Advanced Encryption Standard (AES -- [FIPS-197]) has become the gold standard in encryption. Its efficient design, widespread implementation, and hardware support allow for high performance in many areas. On most modern platforms, AES is anywhere from four to ten times as fast as the previous most-used cipher, Triple Data Encryption Standard (3DES -- [SP800-67]), which makes it not only the best choice, but the only practical choice.",
      "ja": "Advanced Encryption Standard（AES-[FIPS-197]）は、暗号化のゴールドスタンダードになりました。その効率的な設計、広範な実装、およびハードウェアサポートにより、多くの領域で高いパフォーマンスが可能になります。最新のほとんどのプラットフォームでは、AESは以前の最もよく使用されている暗号であるTriple Data Encryption Standard（3DES-[SP800-67]）の4倍から10倍高速であり、最良の選択だけでなく、実用的な選択。"
    },
    {
      "indent": 3,
      "text": "There are several problems with this. If future advances in cryptanalysis reveal a weakness in AES, users will be in an unenviable position. With the only other widely supported cipher being the much slower 3DES, it is not feasible to reconfigure deployments to use 3DES. [Standby-Cipher] describes this issue and the need for a standby cipher in greater detail. Another problem is that while AES is very fast on dedicated hardware, its performance on platforms that lack such hardware is considerably lower. Yet another problem is that many AES implementations are vulnerable to cache-collision timing attacks ([Cache-Collisions]).",
      "ja": "これにはいくつかの問題があります。暗号解読の将来の進歩によりAESの弱点が明らかになった場合、ユーザーはうらやましい立場にいます。広くサポートされている他の唯一の暗号は3DESがはるかに遅いため、3DESを使用するように構成を再構成することはできません。 [Standby-Cipher]では、この問題とスタンバイ暗号の必要性について詳しく説明しています。もう1つの問題は、AESが専用ハードウェアで非常に高速である一方で、そのようなハードウェアがないプラットフォームでのパフォーマンスがかなり低いことです。さらに別の問題は、多くのAES実装がキャッシュ衝突タイミング攻撃（[Cache-Collisions]）に対して脆弱であることです。"
    },
    {
      "indent": 3,
      "text": "This document provides a definition and implementation guide for three algorithms:",
      "ja": "このドキュメントでは、3つのアルゴリズムの定義と実装ガイドを提供します。"
    },
    {
      "indent": 3,
      "text": "1. The ChaCha20 cipher. This is a high-speed cipher first described in [ChaCha]. It is considerably faster than AES in software-only implementations, making it around three times as fast on platforms that lack specialized AES hardware. See Appendix B for some hard numbers. ChaCha20 is also not sensitive to timing attacks (see the security considerations in Section 4). This algorithm is described in Section 2.4",
      "ja": "1. ChaCha20暗号。これは、[ChaCha]で最初に説明された高速暗号です。ソフトウェアのみの実装では、AESよりもかなり高速であり、専用のAESハードウェアがないプラットフォームでは約3倍高速になります。いくつかの具体的な数値については、付録Bを参照してください。 ChaCha20はタイミング攻撃にも敏感ではありません（セクション4のセキュリティに関する考慮事項を参照）。このアルゴリズムについては、セクション2.4で説明します。"
    },
    {
      "indent": 3,
      "text": "2. The Poly1305 authenticator. This is a high-speed message authentication code. Implementation is also straightforward and easy to get right. The algorithm is described in Section 2.5.",
      "ja": "2. Poly1305オーセンティケーター。これは高速メッセージ認証コードです。実装も簡単で、簡単に正しく行えます。アルゴリズムについては、2.5節で説明します。"
    },
    {
      "indent": 3,
      "text": "3. The CHACHA20-POLY1305 Authenticated Encryption with Associated Data (AEAD) construction, described in Section 2.8.",
      "ja": "3. セクション2.8で説明されているCHACHA20-POLY1305 Authenticated Encryption with Associated Data（AEAD）の構成。"
    },
    {
      "indent": 3,
      "text": "This document and its predecessor do not introduce these new algorithms for the first time. They have been defined in scientific papers by D. J. Bernstein [ChaCha][Poly1305]. The purpose of this document is to serve as a stable reference for IETF documents making use of these algorithms.",
      "ja": "このドキュメントとその前身は、これらの新しいアルゴリズムを初めて紹介するものではありません。これらは、D。J.バーンスタイン[ChaCha] [Poly1305]によって科学論文で定義されています。このドキュメントの目的は、これらのアルゴリズムを利用するIETFドキュメントの安定したリファレンスとして役立つことです。"
    },
    {
      "indent": 3,
      "text": "These algorithms have undergone rigorous analysis. Several papers discuss the security of Salsa and ChaCha ([LatinDances], [LatinDances2], [Zhenqing2012]).",
      "ja": "これらのアルゴリズムは、厳密な分析を受けています。サルサとチャチャのセキュリティについては、いくつかの論文で取り上げられています（[LatinDances]、[LatinDances2]、[Zhenqing2012]）。"
    },
    {
      "indent": 3,
      "text": "This document represents the consensus of the Crypto Forum Research Group (CFRG). It replaces [RFC7539].",
      "ja": "このドキュメントは、Crypto Forum Research Group（CFRG）のコンセンサスを表しています。 [RFC7539]の後継です。"
    },
    {
      "indent": 0,
      "text": "1.1. Conventions Used in This Document",
      "section_title": true,
      "ja": "1.1. このドキュメントで使用される規則"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "このドキュメント内のキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、「OPTIONAL」は、ここに示すようにすべて大文字で表記されている場合にのみ、BCP 14 [RFC2119] [RFC8174] で説明されているとおりに解釈されます。"
    },
    {
      "indent": 3,
      "text": "The description of the ChaCha algorithm will at various time refer to the ChaCha state as a \"vector\" or as a \"matrix\". This follows the use of these terms in [ChaCha]. The matrix notation is more visually convenient and gives a better notion as to why some rounds are called \"column rounds\" while others are called \"diagonal rounds\". Here's a diagram of how the matrices relate to vectors (using the C language convention of zero being the index origin).",
      "ja": "ChaChaアルゴリズムの説明では、さまざまな時点で、ChaChaの状態を「ベクトル」または「マトリックス」と呼びます。これは、[ChaCha]でのこれらの用語の使用に従います。マトリックス表記は視覚的に便利であり、一部のラウンドが「列ラウンド」と呼ばれるのに対し、他のラウンドは「対角ラウンド」と呼ばれる理由についてより良い概念を提供します。これは、行列がベクトルにどのように関連するかを示す図です（インデックスの原点がゼロであるC言語の規則を使用）。"
    },
    {
      "indent": 5,
      "text": " 0   1   2   3\n 4   5   6   7\n 8   9  10  11\n12  13  14  15",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The elements in this vector or matrix are 32-bit unsigned integers.",
      "ja": "このベクトルまたは行列の要素は、32ビットの符号なし整数です。"
    },
    {
      "indent": 3,
      "text": "The algorithm name is \"ChaCha\". \"ChaCha20\" is a specific instance where 20 \"rounds\" (or 80 quarter rounds -- see Section 2.1) are used. Other variations are defined, with 8 or 12 rounds, but in this document we only describe the 20-round ChaCha, so the names \"ChaCha\" and \"ChaCha20\" will be used interchangeably.",
      "ja": "アルゴリズム名は「ChaCha」です。 「ChaCha20」は、20の「ラウンド」（または80クォーターラウンド-セクション2.1を参照）が使用される特定のインスタンスです。 8ラウンドまたは12ラウンドの他のバリエーションが定義されていますが、このドキュメントでは20ラウンドのChaChaのみを説明しているため、「ChaCha」と「ChaCha20」の名前は同じ意味で使用されます。"
    },
    {
      "indent": 0,
      "text": "2. The Algorithms",
      "section_title": true,
      "ja": "2. アルゴリズム"
    },
    {
      "indent": 3,
      "text": "The subsections below describe the algorithms used and the AEAD construction.",
      "ja": "以下のサブセクションでは、使用されるアルゴリズムとAEADの構成について説明します。"
    },
    {
      "indent": 0,
      "text": "2.1. The ChaCha Quarter Round",
      "section_title": true,
      "ja": "2.1. ChaChaクォーターラウンド"
    },
    {
      "indent": 3,
      "text": "The basic operation of the ChaCha algorithm is the quarter round. It operates on four 32-bit unsigned integers, denoted a, b, c, and d. The operation is as follows (in C-like notation):",
      "ja": "ChaChaアルゴリズムの基本的な操作は、4分の1ラウンドです。これは、a、b、c、およびdで示される4つの32ビット符号なし整数で動作します。操作は次のとおりです（Cのような表記）。"
    },
    {
      "indent": 6,
      "text": "a += b; d ^= a; d <<<= 16;\nc += d; b ^= c; b <<<= 12;\na += b; d ^= a; d <<<= 8;\nc += d; b ^= c; b <<<= 7;",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Where \"+\" denotes integer addition modulo 2^32, \"^\" denotes a bitwise Exclusive OR (XOR), and \"<<< n\" denotes an n-bit left roll (towards the high bits).",
      "ja": "「+」は2^32を法とする整数加算を示し、「^」はビット単位の排他的OR（XOR）を示し、「<<< n」は（上位ビットに向かって）nビットの左ロールを示します。"
    },
    {
      "indent": 3,
      "text": "For example, let's see the add, XOR, and roll operations from the fourth line with sample numbers:",
      "ja": "たとえば、サンプル番号を使用して、4行目の追加、XOR、およびロール操作を見てみましょう。"
    },
    {
      "indent": 6,
      "text": "a = 0x11111111\nb = 0x01020304\nc = 0x77777777\nd = 0x01234567\nc = c + d = 0x77777777 + 0x01234567 = 0x789abcde\nb = b^c = 0x01020304^0x789abcde = 0x7998bfda\nb = b <<< 7 = 0x7998bfda <<< 7 = 0xcc5fed3c",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.1.1. Test Vector for the ChaCha Quarter Round",
      "section_title": true,
      "ja": "2.1.1. ChaChaクォーターラウンドのテストベクトル"
    },
    {
      "indent": 3,
      "text": "For a test vector, we will use the same numbers as in the example, adding something random for c.",
      "ja": "テストベクトルについては、例と同じ番号を使用して、cにランダムな値を追加します。"
    },
    {
      "indent": 6,
      "text": "a = 0x11111111\nb = 0x01020304\nc = 0x9b8d6f43\nd = 0x01234567",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "After running a Quarter Round on these four numbers, we get these:",
      "ja": "これらの4つの数値で四半期ラウンドを実行すると、次のようになります。"
    },
    {
      "indent": 6,
      "text": "a = 0xea2a92f4\nb = 0xcb1cf8ce\nc = 0x4581472e\nd = 0x5881c4bb",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.2. A Quarter Round on the ChaCha State",
      "section_title": true,
      "ja": "2.2. ChaCha状態の四半期ラウンド"
    },
    {
      "indent": 3,
      "text": "The ChaCha state does not have four integer numbers: it has 16. So the quarter-round operation works on only four of them -- hence the name. Each quarter round operates on four predetermined numbers in the ChaCha state. We will denote by QUARTERROUND(x, y, z, w) a quarter-round operation on the numbers at indices x, y, z, and w of the ChaCha state when viewed as a vector. For example, if we apply QUARTERROUND(1, 5, 9, 13) to a state, this means running the quarter-round operation on the elements marked with an asterisk, while leaving the others alone:",
      "ja": "ChaCha状態には4つの整数はありません。16です。したがって、四半期ラウンド演算はそのうちの4つだけで機能します。したがって、この名前です。各四半期のラウンドは、ChaCha状態で4つの事前に決定された数で動作します。 QUARTERROUND(x, y, z, w)で、ベクトルとして見た場合のChaCha状態のインデックスx、y、z、およびwの数値に対する四捨五入演算を示します。たとえば、QUARTERROUND(1, 5, 9, 13)を状態に適用する場合、これは、アスタリスクでマークされた要素に対して4分の1ラウンド演算を実行し、他の要素はそのままにします。"
    },
    {
      "indent": 5,
      "text": " 0  *a   2   3\n 4  *b   6   7\n 8  *c  10  11\n12  *d  14  15\n",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that this run of quarter round is part of what is called a \"column round\".",
      "ja": "この四半期ラウンドの実行は、いわゆる「列ラウンド」の一部であることに注意してください。"
    },
    {
      "indent": 0,
      "text": "2.2.1. Test Vector for the Quarter Round on the ChaCha State",
      "section_title": true,
      "ja": "2.2.1. ChaCha状態の四半期ラウンドのテストベクトル"
    },
    {
      "indent": 3,
      "text": "For a test vector, we will use a ChaCha state that was generated randomly:",
      "ja": "テストベクトルには、ランダムに生成されたChaCha状態を使用します。"
    },
    {
      "indent": 3,
      "text": "Sample ChaCha State",
      "ja": "ChaCha状態のサンプル"
    },
    {
      "indent": 7,
      "text": "879531e0  c5ecf37d  516461b1  c9a62f8a\n44c20ef3  3390af7f  d9fc690b  2a5f714c\n53372767  b00a5631  974c541a  359e9963\n5c971061  3d631689  2098d9d6  91dbd320",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "We will apply the QUARTERROUND(2, 7, 8, 13) operation to this state. For obvious reasons, this one is part of what is called a \"diagonal round\":",
      "ja": "この状態にQUARTERROUND(2, 7, 8, 13) 操作を適用します。明らかな理由により、これは「対角線」と呼ばれるものの一部です。"
    },
    {
      "indent": 3,
      "text": "After applying QUARTERROUND(2, 7, 8, 13)",
      "ja": "QUARTERROUND(2, 7, 8, 13) を適用した後"
    },
    {
      "indent": 6,
      "text": " 879531e0  c5ecf37d *bdb886dc  c9a62f8a\n 44c20ef3  3390af7f  d9fc690b *cfacafd2\n*e46bea80  b00a5631  974c541a  359e9963\n 5c971061 *ccc07c79  2098d9d6  91dbd320",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note that only the numbers in positions 2, 7, 8, and 13 changed.",
      "ja": "位置2、7、8、および13の番号のみが変更されたことに注意してください。"
    },
    {
      "indent": 0,
      "text": "2.3. The ChaCha20 Block Function",
      "section_title": true,
      "ja": "2.3. ChaCha20ブロック機能"
    },
    {
      "indent": 3,
      "text": "The ChaCha block function transforms a ChaCha state by running multiple quarter rounds.",
      "ja": "ChaChaブロック関数は、複数の四半期ラウンドを実行することにより、ChaCha状態を変換します。"
    },
    {
      "indent": 3,
      "text": "The inputs to ChaCha20 are:",
      "ja": "ChaCha20への入力は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o A 256-bit key, treated as a concatenation of eight 32-bit little-endian integers.",
      "ja": "o 256ビットのキー。8つの32ビットリトルエンディアン整数の連結として扱われます。"
    },
    {
      "indent": 3,
      "text": "o A 96-bit nonce, treated as a concatenation of three 32-bit little-endian integers.",
      "ja": "o 3つの32ビットリトルエンディアン整数の連結として扱われる96ビットのノンス。"
    },
    {
      "indent": 3,
      "text": "o A 32-bit block count parameter, treated as a 32-bit little-endian integer.",
      "ja": "o 32ビットのリトルエンディアン整数として扱われる32ビットのブロック数パラメーター。"
    },
    {
      "indent": 3,
      "text": "The output is 64 random-looking bytes.",
      "ja": "出力は64個のランダムに見えるバイトです。"
    },
    {
      "indent": 3,
      "text": "The ChaCha algorithm described here uses a 256-bit key. The original algorithm also specified 128-bit keys and 8- and 12-round variants, but these are out of scope for this document. In this section, we describe the ChaCha block function.",
      "ja": "ここで説明するChaChaアルゴリズムは256ビットの鍵を使用します。元のアルゴリズムでも128ビットキーと8および12ラウンドのバリアントが指定されていましたが、これらはこのドキュメントの範囲外です。このセクションでは、ChaChaブロック関数について説明します。"
    },
    {
      "indent": 3,
      "text": "Note also that the original ChaCha had a 64-bit nonce and 64-bit block count. We have modified this here to be more consistent with recommendations in Section 3.2 of [RFC5116]. This limits the use of a single (key,nonce) combination to 2^32 blocks, or 256 GB, but that is enough for most uses. In cases where a single key is used by multiple senders, it is important to make sure that they don't use the same nonces. This can be assured by partitioning the nonce space so that the first 32 bits are unique per sender, while the other 64 bits come from a counter.",
      "ja": "また、元のChaChaには64ビットのナンスと64ビットのブロック数があったことにも注意してください。 [RFC5116]のセクション3.2の推奨事項により一致するように、ここでこれを変更しました。これにより、単一の（key、nonce）の組み合わせの使用が2^32ブロック、つまり256 GBに制限されますが、ほとんどの用途にはそれで十分です。 1つのキーが複数の送信者によって使用される場合、それらが同じノンスを使用しないことを確認することが重要です。これは、ナンススペースを分割して、最初の32ビットが送信者ごとに一意になるようにし、残りの64ビットはカウンターから取得することで保証できます。"
    },
    {
      "indent": 3,
      "text": "The ChaCha20 state is initialized as follows:",
      "ja": "ChaCha20状態は次のように初期化されます。"
    },
    {
      "indent": 3,
      "text": "o The first four words (0-3) are constants: 0x61707865, 0x3320646e, 0x79622d32, 0x6b206574.",
      "ja": "o 最初の4ワード（0〜3）は定数です：0x61707865、0x3320646e、0x79622d32、0x6b206574。"
    },
    {
      "indent": 3,
      "text": "o The next eight words (4-11) are taken from the 256-bit key by reading the bytes in little-endian order, in 4-byte chunks.",
      "ja": "o 次の8ワード（4〜11）は、バイトを4バイトのチャンクでリトルエンディアン順で読み取ることにより、256ビットのキーから取得されます。"
    },
    {
      "indent": 3,
      "text": "o Word 12 is a block counter. Since each block is 64-byte, a 32-bit word is enough for 256 gigabytes of data.",
      "ja": "o ワード12はブロックカウンターです。各ブロックは64バイトなので、256ギガバイトのデータには32ビットのワードで十分です。"
    },
    {
      "indent": 3,
      "text": "o Words 13-15 are a nonce, which MUST not be repeated for the same key. The 13th word is the first 32 bits of the input nonce taken as a little-endian integer, while the 15th word is the last 32 bits.",
      "ja": "o ワード13〜15はノンスであり、同じキーに対して繰り返されてはならない（MUST NOT）。 13番目のワードは、リトルエンディアン整数として解釈される入力ノンスの最初の32ビットですが、15番目のワードは最後の32ビットです。"
    },
    {
      "indent": 7,
      "text": "cccccccc  cccccccc  cccccccc  cccccccc\nkkkkkkkk  kkkkkkkk  kkkkkkkk  kkkkkkkk\nkkkkkkkk  kkkkkkkk  kkkkkkkk  kkkkkkkk\nbbbbbbbb  nnnnnnnn  nnnnnnnn  nnnnnnnn",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "c=constant k=key b=blockcount n=nonce",
      "ja": "cは定数、kは鍵、bはブロックカウント、nはノンス"
    },
    {
      "indent": 0,
      "text": "ChaCha20 runs 20 rounds, alternating between \"column rounds\" and \"diagonal rounds\". Each round consists of four quarter-rounds, and they are run as follows. Quarter rounds 1-4 are part of a \"column\" round, while 5-8 are part of a \"diagonal\" round:",
      "ja": "ChaCha20は、「列ラウンド」と「対角ラウンド」を交互に20ラウンド実行します。各ラウンドは4ラウンドで構成され、次のように実行されます。四半期ラウンド1〜4は「柱」ラウンドの一部であり、5〜8は「対角線」ラウンドの一部です。"
    },
    {
      "indent": 6,
      "text": "QUARTERROUND(0, 4, 8, 12)\nQUARTERROUND(1, 5, 9, 13)\nQUARTERROUND(2, 6, 10, 14)\nQUARTERROUND(3, 7, 11, 15)\nQUARTERROUND(0, 5, 10, 15)\nQUARTERROUND(1, 6, 11, 12)\nQUARTERROUND(2, 7, 8, 13)\nQUARTERROUND(3, 4, 9, 14)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "At the end of 20 rounds (or 10 iterations of the above list), we add the original input words to the output words, and serialize the result by sequencing the words one-by-one in little-endian order.",
      "ja": "20ラウンド（または上記のリストの10回の反復）の最後に、元の入力ワードを出力ワードに追加し、リトルエンディアンの順序でワードを1つずつシーケンス化して結果をシリアル化します。"
    },
    {
      "indent": 3,
      "text": "Note: \"addition\" in the above paragraph is done modulo 2^32. In some machine languages, this is called carryless addition on a 32-bit word.",
      "ja": "注：上記の段落の「加算」は2^32を法として行われます。一部の機械語では、これは32ビットワードのキャリーレス加算と呼ばれます。"
    },
    {
      "indent": 0,
      "text": "2.3.1. The ChaCha20 Block Function in Pseudocode",
      "section_title": true,
      "ja": "2.3.1. 疑似コードのChaCha20ブロック関数"
    },
    {
      "indent": 3,
      "text": "Note: This section and a few others contain pseudocode for the algorithm explained in a previous section. Every effort was made for the pseudocode to accurately reflect the algorithm as described in the preceding section. If a conflict is still present, the textual explanation and the test vectors are normative.",
      "ja": "注：このセクションと他のいくつかのセクションには、前のセクションで説明したアルゴリズムの疑似コードが含まれています。前のセクションで説明したように、疑似コードがアルゴリズムを正確に反映するようにあらゆる努力が払われました。それでも競合が存在する場合、テキストによる説明とテストベクトルは規範的です。"
    },
    {
      "indent": 6,
      "text": "inner_block (state):\n   Qround(state, 0, 4, 8, 12)\n   Qround(state, 1, 5, 9, 13)\n   Qround(state, 2, 6, 10, 14)\n   Qround(state, 3, 7, 11, 15)\n   Qround(state, 0, 5, 10, 15)\n   Qround(state, 1, 6, 11, 12)\n   Qround(state, 2, 7, 8, 13)\n   Qround(state, 3, 4, 9, 14)\n   end\n",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "chacha20_block(key, counter, nonce):\n   state = constants | key | counter | nonce\n   initial_state = state\n   for i=1 upto 10\n      inner_block(state)\n      end\n   state += initial_state\n   return serialize(state)\n   end",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Where the pipe character (\"|\") denotes concatenation.",
      "ja": "パイプ文字（ \"|\"）は連結を示します。"
    },
    {
      "indent": 0,
      "text": "2.3.2. Test Vector for the ChaCha20 Block Function",
      "section_title": true,
      "ja": "2.3.2. ChaCha20ブロック関数のテストベクトル"
    },
    {
      "indent": 3,
      "text": "For a test vector, we will use the following inputs to the ChaCha20 block function:",
      "ja": "テストベクトルの場合、ChaCha20ブロック関数に次の入力を使用します。"
    },
    {
      "indent": 3,
      "text": "o Key = 00:01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10:11:12:13:14:15:16:17:18:19:1a:1b:1c:1d:1e:1f. The key is a sequence of octets with no particular structure before we copy it into the ChaCha state.",
      "ja": "o キー = 00:01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10:11:12:13:14:15:16:17:18:19:1a:1b:1c:1d:1e:1f。キーは、ChaCha状態にコピーする前の特定の構造のないオクテットのシーケンスです。"
    },
    {
      "indent": 3,
      "text": "o Nonce = (00:00:00:09:00:00:00:4a:00:00:00:00)",
      "ja": "o ノンス =（00:00:00:09:00:00:00:4a:00:00:00:00）"
    },
    {
      "indent": 3,
      "text": "o Block Count = 1.",
      "ja": "o ブロック数 = 1。"
    },
    {
      "indent": 3,
      "text": "After setting up the ChaCha state, it looks like this:",
      "ja": "ChaCha状態を設定すると、次のようになります。"
    },
    {
      "indent": 3,
      "text": "ChaCha state with the key setup.",
      "ja": "ChaChaの状態はキーの設定で。"
    },
    {
      "indent": 7,
      "text": "61707865  3320646e  79622d32  6b206574\n03020100  07060504  0b0a0908  0f0e0d0c\n13121110  17161514  1b1a1918  1f1e1d1c\n00000001  09000000  4a000000  00000000",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "After running 20 rounds (10 column rounds interleaved with 10 \"diagonal rounds\"), the ChaCha state looks like this:",
      "ja": "20ラウンド（10列のラウンドと10の \"対角ラウンド\"を交互に配置）を実行すると、ChaCha状態は次のようになります。"
    },
    {
      "indent": 3,
      "text": "ChaCha state after 20 rounds",
      "ja": "20ラウンド後のChaCha状態"
    },
    {
      "indent": 7,
      "text": "837778ab  e238d763  a67ae21e  5950bb2f\nc4f2d0c7  fc62bb2f  8fa018fc  3f5ec7b7\n335271c2  f29489f3  eabda8fc  82e46ebd\nd19c12b4  b04e16de  9e83d0cb  4e3c50a2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": " Finally, we add the original state to the result (simple vector or matrix addition), giving this: ChaCha state at the end of the ChaCha20 operation",
      "ja": "最後に、元の状態を結果（単純なベクトルまたは行列の加算）に追加して、次のようにします。ChaCha20操作の終了時のChaCha状態"
    },
    {
      "indent": 7,
      "text": "e4e7f110  15593bd1  1fdd0f50  c47120a3\nc7f4d1c7  0368c033  9aaa2204  4e6cd4c3\n466482d2  09aa9f07  05d7c214  a2028bd9\nd19c12b5  b94e16de  e883d0cb  4e3c50a2",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "After we serialize the state, we get this:",
      "ja": "状態をシリアル化すると、次のようになります。"
    },
    {
      "indent": 2,
      "text": "Serialized Block:\n000  10 f1 e7 e4 d1 3b 59 15 50 0f dd 1f a3 20 71 c4  .....;Y.P.... q.\n016  c7 d1 f4 c7 33 c0 68 03 04 22 aa 9a c3 d4 6c 4e  ....3.h..\"....lN\n032  d2 82 64 46 07 9f aa 09 14 c2 d7 05 d9 8b 02 a2  ..dF............\n048  b5 12 9c d1 de 16 4e b9 cb d0 83 e8 a2 50 3c 4e  ......N......P<N",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.4. The ChaCha20 Encryption Algorithm",
      "section_title": true,
      "ja": "2.4. ChaCha20暗号化アルゴリズム"
    },
    {
      "indent": 3,
      "text": "ChaCha20 is a stream cipher designed by D. J. Bernstein. It is a refinement of the Salsa20 algorithm, and it uses a 256-bit key.",
      "ja": "ChaCha20は、D。J.バーンスタインによって設計されたストリーム暗号です。これはSalsa20アルゴリズムの改良版であり、256ビットの鍵を使用します。"
    },
    {
      "indent": 3,
      "text": "ChaCha20 successively calls the ChaCha20 block function, with the same key and nonce, and with successively increasing block counter parameters. ChaCha20 then serializes the resulting state by writing the numbers in little-endian order, creating a keystream block. Concatenating the keystream blocks from the successive blocks forms a keystream. The ChaCha20 function then performs an XOR of this keystream with the plaintext. Alternatively, each keystream block can be XORed with a plaintext block before proceeding to create the next block, saving some memory. There is no requirement for the plaintext to be an integral multiple of 512 bits. If there is extra keystream from the last block, it is discarded. Specific protocols MAY require that the plaintext and ciphertext have certain length. Such protocols need to specify how the plaintext is padded and how much padding it receives.",
      "ja": "ChaCha20は、同じキーとノンスで、連続的に増加するブロックカウンターパラメーターを使用して、ChaCha20ブロック関数を連続的に呼び出します。 ChaCha20は、リトルエンディアン順に番号を書き込んでキーストリームブロックを作成し、結果の状態をシリアル化します。キーストリームブロックを連続したブロックから連結すると、キーストリームが形成されます。 ChaCha20関数は、このキーストリームと平文のXORを実行します。または、次のブロックの作成に進む前に、各キーストリームブロックをプレーンテキストブロックとXORして、メモリを節約することもできます。平文が512ビットの整数倍である必要はありません。最後のブロックから余分なキーストリームがある場合、それは破棄されます。特定のプロトコルは、平文と暗号文が特定の長さを持つことを要求するかもしれません。このようなプロトコルでは、プレーンテキストのパディング方法と受信するパディングの量を指定する必要があります。"
    },
    {
      "indent": 3,
      "text": "The inputs to ChaCha20 are:",
      "ja": "ChaCha20への入力は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o A 256-bit key",
      "ja": "o 256ビットのキー"
    },
    {
      "indent": 3,
      "text": "o A 32-bit initial counter. This can be set to any number, but will usually be zero or one. It makes sense to use one if we use the zero block for something else, such as generating a one-time authenticator key as part of an AEAD algorithm.",
      "ja": "o 32ビットの初期カウンター。これは任意の数に設定できますが、通常は0または1になります。 AEADアルゴリズムの一部として1回限りの認証キーを生成するなど、何か他の目的でゼロブロックを使用する場合は、1を使用するのが理にかなっています。"
    },
    {
      "indent": 3,
      "text": "o A 96-bit nonce. In some protocols, this is known as the Initialization Vector.",
      "ja": "o 96ビットノンス。一部のプロトコルでは、これは初期化ベクトルとして知られています。"
    },
    {
      "indent": 0,
      "text": " o An arbitrary-length plaintext The output is an encrypted message, or \"ciphertext\", of the same length.",
      "ja": "o 任意の長さの平文出力は、同じ長さの暗号化されたメッセージ、つまり「暗号文」です。"
    },
    {
      "indent": 3,
      "text": "Decryption is done in the same way. The ChaCha20 block function is used to expand the key into a keystream, which is XORed with the ciphertext giving back the plaintext.",
      "ja": "復号化も同じ方法で行われます。 ChaCha20ブロック関数は、キーをキーストリームに拡張するために使用されます。キーストリームは、平文を返す暗号文とXORされます。"
    },
    {
      "indent": 0,
      "text": "2.4.1. The ChaCha20 Encryption Algorithm in Pseudocode",
      "section_title": true,
      "ja": "2.4.1. 疑似コードのChaCha20暗号化アルゴリズム"
    },
    {
      "indent": 5,
      "text": "chacha20_encrypt(key, counter, nonce, plaintext):\n   for j = 0 upto floor(len(plaintext)/64)-1\n      key_stream = chacha20_block(key, counter+j, nonce)\n      block = plaintext[(j*64)..(j*64+63)]\n      encrypted_message +=  block^key_stream\n      end\n   if ((len(plaintext) % 64) != 0)\n      j = floor(len(plaintext)/64)\n      key_stream = chacha20_block(key, counter+j, nonce)\n      block = plaintext[(j*64)..len(plaintext)-1]\n      encrypted_message += (block^key_stream)[0..len(plaintext)%64]\n      end\n   return encrypted_message\n   end",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.4.2. Example and Test Vector for the ChaCha20 Cipher",
      "section_title": true,
      "ja": "2.4.2. ChaCha20暗号の例とテストベクトル"
    },
    {
      "indent": 3,
      "text": "For a test vector, we will use the following inputs to the ChaCha20 block function:",
      "ja": "テストベクトルの場合、ChaCha20ブロック関数に次の入力を使用します。"
    },
    {
      "indent": 3,
      "text": "o Key = 00:01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10:11:12:13:14:15:16:17:18:19:1a:1b:1c:1d:1e:1f.",
      "ja": "o キー = 00:01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10:11:12:13:14:15:16:17:18:19:1a:1b:1c:1d:1e:1f"
    },
    {
      "indent": 3,
      "text": "o Nonce = (00:00:00:00:00:00:00:4a:00:00:00:00).",
      "ja": "o ノンス =（00:00:00:00:00:00:00:4a:00:00:00:00）。"
    },
    {
      "indent": 3,
      "text": "o Initial Counter = 1.",
      "ja": "o 初期カウンター = 1。"
    },
    {
      "indent": 3,
      "text": "We use the following for the plaintext. It was chosen to be long enough to require more than one block, but not so long that it would make this example cumbersome (so, less than 3 blocks):",
      "ja": "平文には以下を使用します。これは、複数のブロックを必要とするのに十分な長さに選択されましたが、この例を扱いにくくするほど長くはありません（つまり、3ブロック未満）。"
    },
    {
      "indent": 2,
      "text": "Plaintext Sunscreen:\n000  4c 61 64 69 65 73 20 61 6e 64 20 47 65 6e 74 6c  Ladies and Gentl\n016  65 6d 65 6e 20 6f 66 20 74 68 65 20 63 6c 61 73  emen of the clas\n032  73 20 6f 66 20 27 39 39 3a 20 49 66 20 49 20 63  s of '99: If I c\n048  6f 75 6c 64 20 6f 66 66 65 72 20 79 6f 75 20 6f  ould offer you o\n064  6e 6c 79 20 6f 6e 65 20 74 69 70 20 66 6f 72 20  nly one tip for\n080  74 68 65 20 66 75 74 75 72 65 2c 20 73 75 6e 73  the future, suns\n096  63 72 65 65 6e 20 77 6f 75 6c 64 20 62 65 20 69  creen would be i\n112  74 2e                                            t.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The following figure shows four ChaCha state matrices:",
      "ja": "次の図は、4つのChaCha状態行列を示しています。"
    },
    {
      "indent": 3,
      "text": "1. First block as it is set up.",
      "ja": "1. セットアップされた最初のブロック。"
    },
    {
      "indent": 3,
      "text": "2. Second block as it is set up. Note that these blocks are only two bits apart -- only the counter in position 12 is different.",
      "ja": "2. セットアップされた2番目のブロック。これらのブロックは2ビットしか離れていないことに注意してください。位置12のカウンターのみが異なります。"
    },
    {
      "indent": 3,
      "text": "3. Third block is the first block after the ChaCha20 block operation was applied.",
      "ja": "3. 3番目のブロックは、ChaCha20ブロック操作が適用された後の最初のブロックです。"
    },
    {
      "indent": 3,
      "text": "4. Final block is the second block after the ChaCha20 block operation was applied.",
      "ja": "4. 最終ブロックは、ChaCha20ブロック操作が適用された後の2番目のブロックです。"
    },
    {
      "indent": 3,
      "text": "After that, we show the keystream.",
      "ja": "その後、キーストリームを示します。"
    },
    {
      "indent": 3,
      "text": "First block setup:\n    61707865  3320646e  79622d32  6b206574\n    03020100  07060504  0b0a0908  0f0e0d0c\n    13121110  17161514  1b1a1918  1f1e1d1c\n    00000001  00000000  4a000000  00000000\n\nSecond block setup:\n    61707865  3320646e  79622d32  6b206574\n    03020100  07060504  0b0a0908  0f0e0d0c\n    13121110  17161514  1b1a1918  1f1e1d1c\n    00000002  00000000  4a000000  00000000\n\nFirst block after block operation:\n    f3514f22  e1d91b40  6f27de2f  ed1d63b8\n    821f138c  e2062c3d  ecca4f7e  78cff39e\n    a30a3b8a  920a6072  cd7479b5  34932bed\n    40ba4c79  cd343ec6  4c2c21ea  b7417df0\n\nSecond block after block operation:\n    9f74a669  410f633f  28feca22  7ec44dec\n    6d34d426  738cb970  3ac5e9f3  45590cc4\n    da6e8b39  892c831a  cdea67c1  2b7e1d90\n    037463f3  a11a2073  e8bcfb88  edc49139",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Keystream:\n22:4f:51:f3:40:1b:d9:e1:2f:de:27:6f:b8:63:1d:ed:8c:13:1f:82:3d:2c:06\ne2:7e:4f:ca:ec:9e:f3:cf:78:8a:3b:0a:a3:72:60:0a:92:b5:79:74:cd:ed:2b\n93:34:79:4c:ba:40:c6:3e:34:cd:ea:21:2c:4c:f0:7d:41:b7:69:a6:74:9f:3f\n63:0f:41:22:ca:fe:28:ec:4d:c4:7e:26:d4:34:6d:70:b9:8c:73:f3:e9:c5:3a\nc4:0c:59:45:39:8b:6e:da:1a:83:2c:89:c1:67:ea:cd:90:1d:7e:2b:f3:63",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Finally, we XOR the keystream with the plaintext, yielding the ciphertext:",
      "ja": "最後に、キーストリームとプレーンテキストのXORを実行して、暗号文を生成します。"
    },
    {
      "indent": 2,
      "text": "Ciphertext Sunscreen:\n000  6e 2e 35 9a 25 68 f9 80 41 ba 07 28 dd 0d 69 81  n.5.%h..A..(..i.\n016  e9 7e 7a ec 1d 43 60 c2 0a 27 af cc fd 9f ae 0b  .~z..C`..'......\n032  f9 1b 65 c5 52 47 33 ab 8f 59 3d ab cd 62 b3 57  ..e.RG3..Y=..b.W\n048  16 39 d6 24 e6 51 52 ab 8f 53 0c 35 9f 08 61 d8  .9.$.QR..S.5..a.\n064  07 ca 0d bf 50 0d 6a 61 56 a3 8e 08 8a 22 b6 5e  ....P.jaV....\".^\n080  52 bc 51 4d 16 cc f8 06 81 8c e9 1a b7 79 37 36  R.QM.........y76\n096  5a f9 0b bf 74 a3 5b e6 b4 0b 8e ed f2 78 5e 42  Z...t.[......x^B\n112  87 4d                                            .M",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.5. The Poly1305 Algorithm",
      "section_title": true,
      "ja": "2.5. Poly1305アルゴリズム"
    },
    {
      "indent": 3,
      "text": "Poly1305 is a one-time authenticator designed by D. J. Bernstein. Poly1305 takes a 32-byte one-time key and a message and produces a 16-byte tag. This tag is used to authenticate the message.",
      "ja": "Poly1305は、D。J.バーンスタインによって設計された1回限りの認証システムです。 Poly1305は、32バイトのワンタイムキーとメッセージを受け取り、16バイトのタグを生成します。このタグは、メッセージの認証に使用されます。"
    },
    {
      "indent": 3,
      "text": "The original article ([Poly1305]) is titled \"The Poly1305-AES message-authentication code\", and the MAC function there requires a 128-bit AES key, a 128-bit \"additional key\", and a 128-bit (non-secret) nonce. AES is used there for encrypting the nonce, so as to get a unique (and secret) 128-bit string, but as the paper states, \"There is nothing special about AES here. One can replace AES with an arbitrary keyed function from an arbitrary set of nonces to 16-byte strings.\"",
      "ja": "元の記事（[Poly1305]）のタイトルは「The Poly1305-AES message-authentication code」で、MAC関数には128ビットのAESキー、128ビットの「追加キー」、および128ビット（非-secret）nonce。 AESはnonceの暗号化に使用され、一意の（そして秘密の）128ビット文字列を取得しますが、論文では「AESには特別なことは何もありません。AESを任意のキー付き関数で置き換えることができます。 16バイト文字列へのノンスの任意のセット。」"
    },
    {
      "indent": 3,
      "text": "Regardless of how the key is generated, the key is partitioned into two parts, called \"r\" and \"s\". The pair (r,s) should be unique, and MUST be unpredictable for each invocation (that is why it was originally obtained by encrypting a nonce), while \"r\" MAY be constant, but needs to be modified as follows before being used: (\"r\" is treated as a 16-octet little-endian number):",
      "ja": "キーの生成方法に関係なく、キーは「r」と「s」と呼ばれる2つの部分に分割されます。ペア（r、s）は一意である必要があり、呼び出しごとに予測不可能でなければなりません（そのため、最初にnonceを暗号化することによって取得されました）が、「r」は一定である場合がありますが、使用する前に次のように変更する必要があります：（ \"r\"は16オクテットのリトルエンディアン数として扱われます）："
    },
    {
      "indent": 3,
      "text": "o r[3], r[7], r[11], and r[15] are required to have their top four bits clear (be smaller than 16)",
      "ja": "o r [3]、r [7]、r [11]、およびr [15]は、上位4ビットをクリアする必要があります（16より小さい）"
    },
    {
      "indent": 3,
      "text": "o r[4], r[8], and r[12] are required to have their bottom two bits clear (be divisible by 4)",
      "ja": "o r [4]、r [8]、およびr [12]は、下位2ビットをクリアする必要があります（4で割り切れる必要があります）"
    },
    {
      "indent": 3,
      "text": "The following sample code clamps \"r\" to be appropriate:",
      "ja": "次のサンプルコードは、「r」を適切にクランプします。"
    },
    {
      "indent": 3,
      "text": "/*\nAdapted from poly1305aes_test_clamp.c version 20050207\nD. J. Bernstein\nPublic domain.\n*/\n\n#include \"poly1305aes_test.h\"\n\nvoid poly1305aes_test_clamp(unsigned char r[16])\n{\n  r[3] &= 15;\n  r[7] &= 15;\n  r[11] &= 15;\n  r[15] &= 15;\n  r[4] &= 252;\n  r[8] &= 252;\n  r[12] &= 252;\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Where \"&=\" is the C language bitwise AND assignment operator.",
      "ja": "「&=」は、C言語のビット単位のAND代入演算子です。"
    },
    {
      "indent": 3,
      "text": "The \"s\" should be unpredictable, but it is perfectly acceptable to generate both \"r\" and \"s\" uniquely each time. Because each of them is 128 bits, pseudorandomly generating them (see Section 2.6) is also acceptable.",
      "ja": "「s」は予測できないものでなければなりませんが、「r」と「s」の両方を毎回一意に生成することは完全に許容されます。それらはそれぞれ128ビットであるため、疑似ランダムに生成（セクション2.6を参照）も許容されます。"
    },
    {
      "indent": 3,
      "text": "The inputs to Poly1305 are:",
      "ja": "Poly1305への入力は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o A 256-bit one-time key",
      "ja": "o 256ビットのワンタイムキー"
    },
    {
      "indent": 3,
      "text": "o An arbitrary length message",
      "ja": "o 任意の長さのメッセージ"
    },
    {
      "indent": 3,
      "text": "The output is a 128-bit tag.",
      "ja": "出力は128ビットのタグです。"
    },
    {
      "indent": 3,
      "text": "First, the \"r\" value is clamped.",
      "ja": "最初に、「r」値がクランプされます。"
    },
    {
      "indent": 3,
      "text": "Next, set the constant prime \"P\" be 2^130-5: 3fffffffffffffffffffffffffffffffb. Also set a variable \"accumulator\" to zero.",
      "ja": "次に、定数素数「P」を2^130-5：3ffffffffffffffffffffffffffffffffbに設定します。また、変数「accumulator」を0に設定します。"
    },
    {
      "indent": 3,
      "text": "Next, divide the message into 16-byte blocks. The last one might be shorter:",
      "ja": "次に、メッセージを16バイトのブロックに分割します。最後のものはもっと短いかもしれません："
    },
    {
      "indent": 3,
      "text": "o Read the block as a little-endian number.",
      "ja": "o ブロックをリトルエンディアンの数値として読み取ります。"
    },
    {
      "indent": 3,
      "text": "o Add one bit beyond the number of octets. For a 16-byte block, this is equivalent to adding 2^128 to the number. For the shorter",
      "ja": "o オクテットの数を超えて1ビットを追加します。 16バイトのブロックの場合、これは数値に2^128を追加することと同じです。より短い"
    },
    {
      "indent": 6,
      "text": "block, it can be 2^120, 2^112, or any power of two that is evenly divisible by 8, all the way down to 2^8.",
      "ja": "ブロックの場合、2^120、2^112、または8で割り切れる2の累乗で、2^8まで下がります。"
    },
    {
      "indent": 3,
      "text": "o If the block is not 17 bytes long (the last block), pad it with zeros. This is meaningless if you are treating the blocks as numbers.",
      "ja": "o ブロックが17バイト長でない場合（最後のブロック）、ゼロで埋めます。ブロックを数値として扱う場合、これは意味がありません。"
    },
    {
      "indent": 3,
      "text": "o Add this number to the accumulator.",
      "ja": "o この数をアキュムレータに追加します。"
    },
    {
      "indent": 3,
      "text": "o Multiply by \"r\".",
      "ja": "o 「r」を掛けます。"
    },
    {
      "indent": 3,
      "text": "o Set the accumulator to the result modulo p. To summarize: Acc = ((Acc+block)*r) % p.",
      "ja": "o アキュムレータをpを法とする結果に設定します。要約すると、Acc = ((Acc + block) * r) % p"
    },
    {
      "indent": 3,
      "text": "Finally, the value of the secret key \"s\" is added to the accumulator, and the 128 least significant bits are serialized in little-endian order to form the tag.",
      "ja": "最後に、秘密鍵「s」の値がアキュムレータに追加され、128個の最下位ビットがリトルエンディアン順にシリアル化されて、タグが形成されます。"
    },
    {
      "indent": 0,
      "text": "2.5.1. The Poly1305 Algorithms in Pseudocode",
      "section_title": true,
      "ja": "2.5.1. 疑似コードのPoly1305アルゴリズム"
    },
    {
      "indent": 6,
      "text": "clamp(r): r &= 0x0ffffffc0ffffffc0ffffffc0fffffff\npoly1305_mac(msg, key):\n   r = le_bytes_to_num(key[0..15])\n   clamp(r)\n   s = le_bytes_to_num(key[16..31])\n   a = 0  /* a is the accumulator */\n   p = (1<<130)-5\n   for i=1 upto ceil(msg length in bytes / 16)\n      n = le_bytes_to_num(msg[((i-1)*16)..(i*16)] | [0x01])\n      a += n\n      a = (r * a) % p\n      end\n   a += s\n   return num_to_16_le_bytes(a)\n   end",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.5.2. Poly1305 Example and Test Vector",
      "section_title": true,
      "ja": "2.5.2. Poly1305の例とテストベクトル"
    },
    {
      "indent": 3,
      "text": "For our example, we will dispense with generating the one-time key using AES, and assume that we got the following keying material:",
      "ja": "この例では、AESを使用したワンタイムキーの生成を省略し、次のキー生成情報を取得したと想定します。"
    },
    {
      "indent": 3,
      "text": "o Key Material: 85:d6:be:78:57:55:6d:33:7f:44:52:fe:42:d5:06:a8:01:03:80:8a:fb:0d:b2:fd:4a:bf:f6:af:41:49:f5:1b",
      "ja": "o キーマテリアル：85:d6:be:78:57:55:6d:33:7f:44:52:fe:42:d5:06:a8:01:03:80:8a:fb:0d:b2:fd:4a:bf:f6:af:41:49:f5:1b"
    },
    {
      "indent": 3,
      "text": "o s as an octet string: 01:03:80:8a:fb:0d:b2:fd:4a:bf:f6:af:41:49:f5:1b",
      "ja": "o オクテット文字列としてのs：01:03:80:8a:fb:0d:b2:fd:4a:bf:f6:af:41:49:f5:1b"
    },
    {
      "indent": 3,
      "text": "o s as a 128-bit number: 1bf54941aff6bf4afdb20dfb8a800301",
      "ja": "o 128ビットの数値としてのs：1bf54941aff6bf4afdb20dfb8a800301"
    },
    {
      "indent": 3,
      "text": "o r before clamping: 85:d6:be:78:57:55:6d:33:7f:44:52:fe:42:d5:06:a8",
      "ja": "o クランプ前のr：85:d6:be:78:57:55:6d:33:7f:44:52:fe:42:d5:06:a8"
    },
    {
      "indent": 3,
      "text": "o Clamped r as a number: 806d5400e52447c036d555408bed685",
      "ja": "o 数値としてクランプされたr：806d5400e52447c036d555408bed685"
    },
    {
      "indent": 3,
      "text": "For our message, we'll use a short text:",
      "ja": "メッセージには、短いテキストを使用します。"
    },
    {
      "indent": 2,
      "text": "Message to be Authenticated:\n000  43 72 79 70 74 6f 67 72 61 70 68 69 63 20 46 6f  Cryptographic Fo\n016  72 75 6d 20 52 65 73 65 61 72 63 68 20 47 72 6f  rum Research Gro\n032  75 70                                            up",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Since Poly1305 works in 16-byte chunks, the 34-byte message divides into three blocks. In the following calculation, \"Acc\" denotes the accumulator and \"Block\" the current block:",
      "ja": "Poly1305は16バイトのチャンクで機能するため、34バイトのメッセージは3つのブロックに分割されます。次の計算では、「Acc」はアキュムレータを示し、「Block」は現在のブロックを示します。"
    },
    {
      "indent": 3,
      "text": "Block #1",
      "ja": "ブロック＃1"
    },
    {
      "indent": 3,
      "text": "Acc = 00\nBlock = 6f4620636968706172676f7470797243\nBlock with 0x01 byte = 016f4620636968706172676f7470797243\nAcc + block = 016f4620636968706172676f7470797243\n(Acc+Block) * r =\n     b83fe991ca66800489155dcd69e8426ba2779453994ac90ed284034da565ecf\nAcc = ((Acc+Block)*r) % P = 2c88c77849d64ae9147ddeb88e69c83fc",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Block #2",
      "ja": "ブロック＃2"
    },
    {
      "indent": 0,
      "text": "   Acc = 2c88c77849d64ae9147ddeb88e69c83fc\n   Block = 6f7247206863726165736552206d7572\n   Block with 0x01 byte = 016f7247206863726165736552206d7572\n   Acc + block = 437febea505c820f2ad5150db0709f96e\n   (Acc+Block) * r =\n        21dcc992d0c659ba4036f65bb7f88562ae59b32c2b3b8f7efc8b00f78e548a26\n   Acc = ((Acc+Block)*r) % P = 2d8adaf23b0337fa7cccfb4ea344b30de",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Last Block",
      "ja": "最終ブロック"
    },
    {
      "indent": 3,
      "text": "Acc = 2d8adaf23b0337fa7cccfb4ea344b30de\nBlock = 7075\nBlock with 0x01 byte = 017075\nAcc + block = 2d8adaf23b0337fa7cccfb4ea344ca153\n(Acc + Block) * r =\n     16d8e08a0f3fe1de4fe4a15486aca7a270a29f1e6c849221e4a6798b8e45321f\n((Acc + Block) * r) % P = 28d31b7caff946c77c8844335369d03a7",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Adding s, we get this number, and serialize if to get the tag:",
      "ja": "sを追加して、この番号を取得し、タグを取得する場合はシリアル化します。"
    },
    {
      "indent": 3,
      "text": "Acc + s = 2a927010caf8b2bc2c6365130c11d06a8",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Tag: a8:06:1d:c1:30:51:36:c6:c2:2b:8b:af:0c:01:27:a9",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.6. Generating the Poly1305 Key Using ChaCha20",
      "section_title": true,
      "ja": "2.6. ChaCha20を使用したPoly1305キーの生成"
    },
    {
      "indent": 3,
      "text": "As said in Section 2.5, it is acceptable to generate the one-time Poly1305 key pseudorandomly. This section defines such a method.",
      "ja": "セクション2.5で述べたように、1回限りのPoly1305キーを擬似ランダムに生成することは許容されます。このセクションでは、そのようなメソッドを定義します。"
    },
    {
      "indent": 3,
      "text": "To generate such a key pair (r,s), we will use the ChaCha20 block function described in Section 2.3. This assumes that we have a 256-bit session key specifically for the Message Authentication Code (MAC) function. Any document that specifies the use of Poly1305 as a MAC algorithm for some protocol MUST specify that 256 bits are allocated for the integrity key. Note that in the AEAD construction defined in Section 2.8, the same key is used for encryption and key generation.",
      "ja": "このような鍵ペア（r、s）を生成するには、2.3節で説明されているChaCha20ブロック関数を使用します。これは、メッセージ認証コード（MAC）機能専用の256ビットセッションキーがあることを前提としています。一部のプロトコルのMACアルゴリズムとしてPoly1305の使用を指定するドキュメントでは、整合性キーに256ビットが割り当てられることを指定する必要があります。セクション2.8で定義されたAEAD構造では、暗号化とキー生成に同じキーが使用されることに注意してください。"
    },
    {
      "indent": 3,
      "text": "The method is to call the block function with the following parameters:",
      "ja": "メソッドは、以下のパラメーターを使用してブロック関数を呼び出すことです。"
    },
    {
      "indent": 3,
      "text": "o The 256-bit session integrity key is used as the ChaCha20 key.",
      "ja": "o 256ビットのセッション整合性キーは、ChaCha20キーとして使用されます。"
    },
    {
      "indent": 3,
      "text": "o The block counter is set to zero.",
      "ja": "o ブロックカウンターはゼロに設定されます。"
    },
    {
      "indent": 3,
      "text": "o The protocol will specify a 96-bit or 64-bit nonce. This MUST be unique per invocation with the same key, so it MUST NOT be randomly generated. A counter is a good way to implement this, but other methods, such as a Linear Feedback Shift Register (LFSR) are also acceptable. ChaCha20 as specified here requires a 96-bit nonce. So if the provided nonce is only 64-bit, then the first 32 bits of the nonce will be set to a constant number. This will usually be zero, but for protocols with multiple senders it may be different for each sender, but SHOULD be the same for all invocations of the function with the same key by a particular sender.",
      "ja": "o プロトコルは、96ビットまたは64ビットのナンスを指定します。これは同じキーでの呼び出しごとに一意でなければならないため、ランダムに生成してはなりません。カウンターはこれを実装する良い方法ですが、線形フィードバックシフトレジスタ（LFSR）などの他の方法も使用できます。ここで指定されているChaCha20には、96ビットのnonceが必要です。したがって、提供されたナンスが64ビットのみの場合、ナンスの最初の32ビットは定数に設定されます。これは通常はゼロになりますが、複数の送信者を持つプロトコルの場合、送信者ごとに異なる場合がありますが、特定の送信者による同じキーを持つ関数のすべての呼び出しで同じである必要があります。"
    },
    {
      "indent": 3,
      "text": "After running the block function, we have a 512-bit state. We take the first 256 bits of the serialized state, and use those as the one-time Poly1305 key: the first 128 bits are clamped and form \"r\", while the next 128 bits become \"s\". The other 256 bits are discarded.",
      "ja": "ブロック関数を実行すると、512ビットの状態になります。シリアル化された状態の最初の256ビットを取得し、それらを1回限りのPoly1305キーとして使用します。最初の128ビットはクランプされて「r」を形成し、次の128ビットは「s」になります。他の256ビットは破棄されます。"
    },
    {
      "indent": 3,
      "text": "Note that while many protocols have provisions for a nonce for encryption algorithms (often called Initialization Vectors, or IVs), they usually don't have such a provision for the MAC function. In that case, the per-invocation nonce will have to come from somewhere else, such as a message counter.",
      "ja": "多くのプロトコルには暗号化アルゴリズム（初期化ベクトルまたはIVと呼ばれることが多い）のナンスが用意されていますが、通常、MAC機能にはそのような準備はありません。その場合、呼び出しごとのノンスは、メッセージカウンターなど、別の場所から取得する必要があります。"
    },
    {
      "indent": 0,
      "text": "2.6.1. Poly1305 Key Generation in Pseudocode",
      "section_title": true,
      "ja": "2.6.1. 疑似コードでのPoly1305鍵の生成"
    },
    {
      "indent": 6,
      "text": "poly1305_key_gen(key,nonce):\n   counter = 0\n   block = chacha20_block(key,counter,nonce)\n   return block[0..31]\n   end",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.6.2. Poly1305 Key Generation Test Vector",
      "section_title": true,
      "ja": "2.6.2. Poly1305キー生成テストベクトル"
    },
    {
      "indent": 3,
      "text": "For this example, we'll set:",
      "ja": "この例では、次のように設定します。"
    },
    {
      "indent": 2,
      "text": "Key:\n000  80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f  ................\n016  90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Nonce:\n000  00 00 00 00 00 01 02 03 04 05 06 07              ............",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The ChaCha state setup with key, nonce, and block counter zero:",
      "ja": "キー、ノンス、ブロックカウンターゼロによるChaCha状態のセットアップ："
    },
    {
      "indent": 9,
      "text": "61707865  3320646e  79622d32  6b206574\n83828180  87868584  8b8a8988  8f8e8d8c\n93929190  97969594  9b9a9998  9f9e9d9c\n00000000  00000000  03020100  07060504",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The ChaCha state after 20 rounds:",
      "ja": "20ラウンド後のChaCha状態："
    },
    {
      "indent": 9,
      "text": "8ba0d58a  cc815f90  27405081  7194b24a\n37b633a8  a50dfde3  e2b8db08  46a6d1fd\n7da03782  9183a233  148ad271  b46773d1\n3cc1875a  8607def1  ca5c3086  7085eb87",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Output bytes:\n000  8a d5 a0 8b 90 5f 81 cc 81 50 40 27 4a b2 94 71  ....._...P@'J..q\n016  a8 33 b6 37 e3 fd 0d a5 08 db b8 e2 fd d1 a6 46  .3.7...........F",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "And that output is also the 32-byte one-time key used for Poly1305.",
      "ja": "また、その出力は、Poly1305で使用される32バイトのワンタイムキーでもあります。"
    },
    {
      "indent": 0,
      "text": "2.7. A Pseudorandom Function for Crypto Suites Based on ChaCha/Poly1305",
      "section_title": true,
      "ja": "2.7. ChaCha / Poly1305に基づく暗号スイートの疑似ランダム関数"
    },
    {
      "indent": 3,
      "text": "Some protocols, such as IKEv2 ([RFC7296]), require a Pseudorandom Function (PRF), mostly for key derivation. In the IKEv2 definition, a PRF is a function that accepts a variable-length key and a variable-length input, and returns a fixed-length output. Most commonly, Hashed MAC (HMAC) constructions are used for this purpose, and often the same function is used for both message authentication and PRF.",
      "ja": "IKEv2（[RFC7296]）などの一部のプロトコルでは、主に鍵の導出のために、疑似ランダム関数（PRF）が必要です。 IKEv2定義では、PRFは可変長のキーと可変長の入力を受け入れ、固定長の出力を返す関数です。最も一般的には、ハッシュされたMAC（HMAC）構造がこの目的に使用され、多くの場合、メッセージ認証とPRFの両方に同じ機能が使用されます。"
    },
    {
      "indent": 3,
      "text": "Poly1305 is not a suitable choice for a PRF. Poly1305 prohibits using the same key twice, whereas the PRF in IKEv2 is used multiple times with the same key. Additionally, unlike HMAC, Poly1305 is biased, so using it for key derivation would reduce the security of the symmetric encryption.",
      "ja": "Poly1305はPRFには適していません。 Poly1305は同じキーを2回使用することを禁止しますが、IKEv2のPRFは同じキーで複数回使用されます。さらに、HMACとは異なり、Poly1305はバイアスされるため、鍵の導出に使用すると対称暗号化のセキュリティが低下します。"
    },
    {
      "indent": 3,
      "text": "Chacha20 could be used as a key-derivation function, by generating an arbitrarily long keystream. However, that is not what protocols such as IKEv2 require.",
      "ja": "Chacha20は、任意の長いキーストリームを生成することにより、キー派生関数として使用できます。ただし、IKEv2などのプロトコルが必要とするものではありません。"
    },
    {
      "indent": 3,
      "text": "For this reason, this document does not specify a PRF.",
      "ja": "このため、このドキュメントではPRFを指定していません。"
    },
    {
      "indent": 0,
      "text": "2.8. AEAD Construction",
      "section_title": true,
      "ja": "2.8. AEAD建設"
    },
    {
      "indent": 3,
      "text": "AEAD_CHACHA20_POLY1305 is an authenticated encryption with additional data algorithm. The inputs to AEAD_CHACHA20_POLY1305 are:",
      "ja": "AEAD_CHACHA20_POLY1305は、追加のデータアルゴリズムを使用した認証済み暗号化です。 AEAD_CHACHA20_POLY1305への入力は次のとおりです。"
    },
    {
      "indent": 3,
      "text": "o A 256-bit key",
      "ja": "o 256ビットのキー"
    },
    {
      "indent": 3,
      "text": "o A 96-bit nonce -- different for each invocation with the same key",
      "ja": "o 96ビットノンス-同じキーでの呼び出しごとに異なります"
    },
    {
      "indent": 3,
      "text": "o An arbitrary length plaintext",
      "ja": "o 任意の長さの平文"
    },
    {
      "indent": 3,
      "text": "o Arbitrary length additional authenticated data (AAD)",
      "ja": "o 任意の長さの追加認証データ（AAD）"
    },
    {
      "indent": 3,
      "text": "Some protocols may have unique per-invocation inputs that are not 96 bits in length. For example, IPsec may specify a 64-bit nonce. In such a case, it is up to the protocol document to define how to transform the protocol nonce into a 96-bit nonce, for example, by concatenating a constant value.",
      "ja": "一部のプロトコルには、96ビット長ではない呼び出しごとの固有の入力がある場合があります。たとえば、IPsecは64ビットのnonceを指定する場合があります。そのような場合、たとえば定数値を連結することによって、プロトコルナンスを96ビットナンスに変換する方法を定義するのは、プロトコルドキュメント次第です。"
    },
    {
      "indent": 3,
      "text": "The ChaCha20 and Poly1305 primitives are combined into an AEAD that takes a 256-bit key and 96-bit nonce as follows:",
      "ja": "ChaCha20およびPoly1305プリミティブは、次のように256ビットの鍵と96ビットのナンスを取るAEADに結合されます。"
    },
    {
      "indent": 3,
      "text": "o First, a Poly1305 one-time key is generated from the 256-bit key and nonce using the procedure described in Section 2.6.",
      "ja": "o まず、セクション2.6で説明されている手順を使用して、Poly1305ワンタイムキーを256ビットキーとノンスから生成します。"
    },
    {
      "indent": 3,
      "text": "o Next, the ChaCha20 encryption function is called to encrypt the plaintext, using the same key and nonce, and with the initial counter set to 1.",
      "ja": "o 次に、ChaCha20暗号化関数が呼び出され、同じキーとノンスを使用して平文を暗号化し、初期カウンターを1に設定します。"
    },
    {
      "indent": 3,
      "text": "o Finally, the Poly1305 function is called with the Poly1305 key calculated above, and a message constructed as a concatenation of the following:",
      "ja": "o 最後に、上記で計算されたPoly1305キーを使用してPoly1305関数が呼び出され、次の連結としてメッセージが作成されます。"
    },
    {
      "indent": 6,
      "text": "* The AAD",
      "ja": "* AAD"
    },
    {
      "indent": 6,
      "text": "* padding1 -- the padding is up to 15 zero bytes, and it brings the total length so far to an integral multiple of 16. If the length of the AAD was already an integral multiple of 16 bytes, this field is zero-length.",
      "ja": "* padding1-パディングは最大15のゼロバイトであり、これまでの合計長は16の整数倍になります。AADの長さがすでに16バイトの整数倍であった場合、このフィールドは長さがゼロです。"
    },
    {
      "indent": 6,
      "text": "* The ciphertext",
      "ja": "* 暗号文"
    },
    {
      "indent": 6,
      "text": "* padding2 -- the padding is up to 15 zero bytes, and it brings the total length so far to an integral multiple of 16. If the length of the ciphertext was already an integral multiple of 16 bytes, this field is zero-length.",
      "ja": "* padding2-パディングは最大15個のゼロバイトであり、これまでの合計の長さは16の整数倍になります。暗号文の長さがすでに16バイトの整数倍であった場合、このフィールドは長さがゼロです。"
    },
    {
      "indent": 6,
      "text": "* The length of the additional data in octets (as a 64-bit little-endian integer).",
      "ja": "* オクテット単位の追加データの長さ（64ビットリトルエンディアン整数として）。"
    },
    {
      "indent": 6,
      "text": "* The length of the ciphertext in octets (as a 64-bit little-endian integer).",
      "ja": "* オクテット単位の暗号文の長さ（64ビットリトルエンディアン整数として）。"
    },
    {
      "indent": 3,
      "text": "The output from the AEAD is the concatenation of:",
      "ja": "AEADからの出力は、次の連結です。"
    },
    {
      "indent": 3,
      "text": "o A ciphertext of the same length as the plaintext.",
      "ja": "o 平文と同じ長さの暗号文。"
    },
    {
      "indent": 3,
      "text": "o A 128-bit tag, which is the output of the Poly1305 function.",
      "ja": "o Poly1305関数の出力である128ビットのタグ。"
    },
    {
      "indent": 3,
      "text": "Decryption is similar with the following differences:",
      "ja": "復号化は似ていますが、次の違いがあります。"
    },
    {
      "indent": 3,
      "text": "o The roles of ciphertext and plaintext are reversed, so the ChaCha20 encryption function is applied to the ciphertext, producing the plaintext.",
      "ja": "o 暗号文と平文の役割が逆になるため、ChaCha20暗号化機能が暗号文に適用され、平文が生成されます。"
    },
    {
      "indent": 3,
      "text": "o The Poly1305 function is still run on the AAD and the ciphertext, not the plaintext.",
      "ja": "o Poly1305関数は、プレーンテキストではなく、AADと暗号テキストで引き続き実行されます。"
    },
    {
      "indent": 3,
      "text": "o The calculated tag is bitwise compared to the received tag. The message is authenticated if and only if the tags match.",
      "ja": "o 計算されたタグは、受信したタグと比較してビット単位です。タグが一致する場合にのみ、メッセージが認証されます。"
    },
    {
      "indent": 3,
      "text": "A few notes about this design:",
      "ja": "このデザインに関するいくつかの注意事項："
    },
    {
      "indent": 3,
      "text": "1. The amount of encrypted data possible in a single invocation is 2^32-1 blocks of 64 bytes each, because of the size of the block counter field in the ChaCha20 block function. This gives a total of 274,877,906,880 bytes, or nearly 256 GB. This should be enough for traffic protocols such as IPsec and TLS, but may be too small for file and/or disk encryption. For such uses, we can return to the original design, reduce the nonce to 64 bits, and use the integer at position 13 as the top 32 bits of a 64-bit block counter, increasing the total message size to over a million petabytes (1,180,591,620,717,411,303,360 bytes to be exact).",
      "ja": "1. ChaCha20ブロック関数のブロックカウンターフィールドのサイズのため、1回の呼び出しで可能な暗号化データの量は、それぞれ64バイトの2^32-1ブロックです。これにより、合計で274,877,906,880バイト、つまりほぼ256 GBになります。これは、IPsecやTLSなどのトラフィックプロトコルには十分ですが、ファイルやディスクの暗号化には小さすぎる可能性があります。このような用途では、元の設計に戻り、ノンスを64ビットに削減し、位置13の整数を64ビットブロックカウンターの上位32ビットとして使用して、メッセージの合計サイズを100万ペタバイト（正確には1,180,591,620,717,411,303,360バイト）。"
    },
    {
      "indent": 3,
      "text": "2. Despite the previous item, the ciphertext length field in the construction of the buffer on which Poly1305 runs limits the ciphertext (and hence, the plaintext) size to 2^64 bytes, or sixteen thousand petabytes (18,446,744,073,709,551,616 bytes to be exact).",
      "ja": "2. 前の項目とは異なり、Poly1305が実行されるバッファーの構築における暗号文の長さフィールドは、暗号文（したがって、プレーンテキスト）のサイズを2^64バイト、つまり1万千ペタバイト（正確には、18,446,744,073,709,551,616バイト）に制限します。"
    },
    {
      "indent": 3,
      "text": "The AEAD construction in this section is a novel composition of ChaCha20 and Poly1305. A security analysis of this composition is given in [Procter].",
      "ja": "このセクションのAEAD構造は、ChaCha20とPoly1305の新しい構成です。この構成のセキュリティ分析は、[Procter]に記載されています。"
    },
    {
      "indent": 3,
      "text": "Here is a list of the parameters for this construction as defined in Section 4 of [RFC5116]:",
      "ja": "[RFC5116]のセクション4で定義されているこの構造のパラメータのリストを次に示します。"
    },
    {
      "indent": 3,
      "text": "o K_LEN (key length) is 32 octets.",
      "ja": "o K_LEN（キーの長さ）は32オクテットです。"
    },
    {
      "indent": 3,
      "text": "o P_MAX (maximum size of the plaintext) is 274,877,906,880 bytes, or nearly 256 GB.",
      "ja": "o P_MAX（プレーンテキストの最大サイズ）は274,877,906,880バイト、またはほぼ256 GBです。"
    },
    {
      "indent": 3,
      "text": "o A_MAX (maximum size of the associated data) is set to 2^64-1 octets by the length field for associated data.",
      "ja": "o A_MAX（関連データの最大サイズ）は、関連データの長さフィールドによって2^64-1オクテットに設定されます。"
    },
    {
      "indent": 3,
      "text": "o N_MIN = N_MAX = 12 octets.",
      "ja": "o ん＿みん ＝ ん＿まＸ ＝ １２ おｃてｔｓ。"
    },
    {
      "indent": 3,
      "text": "o C_MAX = P_MAX + tag length = 274,877,906,896 octets.",
      "ja": "o C_MAX = P_MAX +タグの長さ= 274,877,906,896オクテット。"
    },
    {
      "indent": 3,
      "text": "Distinct AAD inputs (as described in Section 3.3 of [RFC5116]) shall be concatenated into a single input to AEAD_CHACHA20_POLY1305. It is up to the application to create a structure in the AAD input if it is needed.",
      "ja": "個別のAAD入力（[RFC5116]のセクション3.3で説明）は、AEAD_CHACHA20_POLY1305への単一の入力に連結されます。必要に応じて、AAD入力に構造を作成するのはアプリケーションの責任です。"
    },
    {
      "indent": 0,
      "text": "2.8.1. Pseudocode for the AEAD Construction",
      "section_title": true,
      "ja": "2.8.1. AEAD構築の疑似コード"
    },
    {
      "indent": 6,
      "text": "pad16(x):\n   if (len(x) % 16)==0\n      then return NULL\n      else return copies(0, 16-(len(x)%16))\n   end",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "chacha20_aead_encrypt(aad, key, iv, constant, plaintext):\n   nonce = constant | iv\n   otk = poly1305_key_gen(key, nonce)\n   ciphertext = chacha20_encrypt(key, 1, nonce, plaintext)\n   mac_data = aad | pad16(aad)\n   mac_data |= ciphertext | pad16(ciphertext)\n   mac_data |= num_to_8_le_bytes(aad.length)\n   mac_data |= num_to_8_le_bytes(ciphertext.length)\n   tag = poly1305_mac(mac_data, otk)\n   return (ciphertext, tag)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "2.8.2. Example and Test Vector for AEAD_CHACHA20_POLY1305",
      "section_title": true,
      "ja": "2.8.2. AEAD_CHACHA20_POLY1305の例とテストベクトル"
    },
    {
      "indent": 3,
      "text": "For a test vector, we will use the following inputs to the AEAD_CHACHA20_POLY1305 function:",
      "ja": "テストベクタの場合、AEAD_CHACHA20_POLY1305関数に次の入力を使用します。"
    },
    {
      "indent": 2,
      "text": "Plaintext:\n000  4c 61 64 69 65 73 20 61 6e 64 20 47 65 6e 74 6c  Ladies and Gentl\n016  65 6d 65 6e 20 6f 66 20 74 68 65 20 63 6c 61 73  emen of the clas\n032  73 20 6f 66 20 27 39 39 3a 20 49 66 20 49 20 63  s of '99: If I c\n048  6f 75 6c 64 20 6f 66 66 65 72 20 79 6f 75 20 6f  ould offer you o\n064  6e 6c 79 20 6f 6e 65 20 74 69 70 20 66 6f 72 20  nly one tip for\n080  74 68 65 20 66 75 74 75 72 65 2c 20 73 75 6e 73  the future, suns\n096  63 72 65 65 6e 20 77 6f 75 6c 64 20 62 65 20 69  creen would be i\n112  74 2e                                            t.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "AAD:\n000  50 51 52 53 c0 c1 c2 c3 c4 c5 c6 c7              PQRS........",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Key:\n000  80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f  ................\n016  90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "IV:\n000  40 41 42 43 44 45 46 47                          @ABCDEFG",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "32-bit fixed-common part:\n000  07 00 00 00                                      ....",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Setup for generating Poly1305 one-time key (sender id=7):\n    61707865  3320646e  79622d32  6b206574\n    83828180  87868584  8b8a8988  8f8e8d8c\n    93929190  97969594  9b9a9998  9f9e9d9c\n    00000000  00000007  43424140  47464544\n\nAfter generating Poly1305 one-time key:\n    252bac7b  af47b42d  557ab609  8455e9a4\n    73d6e10a  ebd97510  7875932a  ff53d53e\n    decc7ea2  b44ddbad  e49c17d1  d8430bc9\n    8c94b7bc  8b7d4b4b  3927f67d  1669a432",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Poly1305 Key:\n000  7b ac 2b 25 2d b4 47 af 09 b6 7a 55 a4 e9 55 84  {.+%-.G...zU..U.\n016  0a e1 d6 73 10 75 d9 eb 2a 93 75 78 3e d5 53 ff  ...s.u..*.ux>.S.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Poly1305 r =  455e9a4057ab6080f47b42c052bac7b\nPoly1305 s = ff53d53e7875932aebd9751073d6e10a",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "keystream bytes:\n9f:7b:e9:5d:01:fd:40:ba:15:e2:8f:fb:36:81:0a:ae:\nc1:c0:88:3f:09:01:6e:de:dd:8a:d0:87:55:82:03:a5:\n4e:9e:cb:38:ac:8e:5e:2b:b8:da:b2:0f:fa:db:52:e8:\n75:04:b2:6e:be:69:6d:4f:60:a4:85:cf:11:b8:1b:59:\nfc:b1:c4:5f:42:19:ee:ac:ec:6a:de:c3:4e:66:69:78:\n8e:db:41:c4:9c:a3:01:e1:27:e0:ac:ab:3b:44:b9:cf:\n5c:86:bb:95:e0:6b:0d:f2:90:1a:b6:45:e4:ab:e6:22:\n15:38",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Ciphertext:\n000  d3 1a 8d 34 64 8e 60 db 7b 86 af bc 53 ef 7e c2  ...4d.`.{...S.~.\n016  a4 ad ed 51 29 6e 08 fe a9 e2 b5 a7 36 ee 62 d6  ...Q)n......6.b.\n032  3d be a4 5e 8c a9 67 12 82 fa fb 69 da 92 72 8b  =..^..g....i..r.\n048  1a 71 de 0a 9e 06 0b 29 05 d6 a5 b6 7e cd 3b 36  .q.....)....~.;6\n064  92 dd bd 7f 2d 77 8b 8c 98 03 ae e3 28 09 1b 58  ....-w......(..X\n080  fa b3 24 e4 fa d6 75 94 55 85 80 8b 48 31 d7 bc  ..$...u.U...H1..\n096  3f f4 de f0 8e 4b 7a 9d e5 76 d2 65 86 ce c6 4b  ?....Kz..v.e...K\n112  61 16                                            a.",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "AEAD Construction for Poly1305:\n000  50 51 52 53 c0 c1 c2 c3 c4 c5 c6 c7 00 00 00 00  PQRS............\n016  d3 1a 8d 34 64 8e 60 db 7b 86 af bc 53 ef 7e c2  ...4d.`.{...S.~.\n032  a4 ad ed 51 29 6e 08 fe a9 e2 b5 a7 36 ee 62 d6  ...Q)n......6.b.\n048  3d be a4 5e 8c a9 67 12 82 fa fb 69 da 92 72 8b  =..^..g....i..r.\n064  1a 71 de 0a 9e 06 0b 29 05 d6 a5 b6 7e cd 3b 36  .q.....)....~.;6\n080  92 dd bd 7f 2d 77 8b 8c 98 03 ae e3 28 09 1b 58  ....-w......(..X\n096  fa b3 24 e4 fa d6 75 94 55 85 80 8b 48 31 d7 bc  ..$...u.U...H1..\n112  3f f4 de f0 8e 4b 7a 9d e5 76 d2 65 86 ce c6 4b  ?....Kz..v.e...K\n128  61 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00  a...............\n144  0c 00 00 00 00 00 00 00 72 00 00 00 00 00 00 00  ........r.......",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Note the four zero bytes in line 000 and the 14 zero bytes in line 128",
      "ja": "行000の4つのゼロバイトと行128の14のゼロバイトに注意してください。"
    },
    {
      "indent": 3,
      "text": "Tag:\n1a:e1:0b:59:4f:09:e2:6a:7e:90:2e:cb:d0:60:06:91",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "3. Implementation Advice",
      "section_title": true,
      "ja": "3. 実装に関するアドバイス"
    },
    {
      "indent": 3,
      "text": "Each block of ChaCha20 involves 16 move operations and one increment operation for loading the state, 80 each of XOR, addition and roll operations for the rounds, 16 more add operations and 16 XOR operations for protecting the plaintext. Section 2.3 describes the ChaCha block function as \"adding the original input words\". This implies that before starting the rounds on the ChaCha state, we copy it aside, only to add it in later. This is correct, but we can save a few operations if we instead copy the state and do the work on the copy. This way, for the next block you don't need to recreate the state, but only to increment the block counter. This saves approximately 5.5% of the cycles.",
      "ja": "ChaCha20の各ブロックには、状態をロードするための16の移動操作と1つのインクリメント操作、ラウンドのXOR、加算およびロール操作それぞれ80、平文を保護するための16の追加操作および16のXOR操作が含まれます。 2.3節では、ChaChaブロック機能を「元の入力単語の追加」として説明しています。これは、ChaCha状態でラウンドを開始する前に、それを脇にコピーし、後で追加することを意味します。これは正しいですが、代わりに状態をコピーして、そのコピーに対して作業を行うと、いくつかの操作を節約できます。このように、次のブロックでは、状態を再作成する必要はありませんが、ブロックカウンターをインクリメントするだけです。これにより、サイクルの約5.5％が節約されます。"
    },
    {
      "indent": 3,
      "text": "It is not recommended to use a generic big number library such as the one in OpenSSL for the arithmetic operations in Poly1305. Such libraries use dynamic allocation to be able to handle an integer of any size, but that flexibility comes at the expense of performance as well as side-channel security. More efficient implementations that run in constant time are available, one of them in D. J. Bernstein's own library, NaCl ([NaCl]). A constant-time but not optimal approach would be to naively implement the arithmetic operations for 288-bit integers, because even a naive implementation will not exceed 2^288 in the multiplication of (acc+block) and r. An efficient constant-time implementation can be found in the public domain library poly1305-donna ([Poly1305_Donna]).",
      "ja": "Poly1305での算術演算にOpenSSLのライブラリなどの一般的なビッグナンバーライブラリを使用することはお勧めしません。このようなライブラリは、動的割り当てを使用して任意のサイズの整数を処理できるようにしますが、その柔軟性は、パフォーマンスとサイドチャネルセキュリティを犠牲にして得られます。一定の時間で実行されるより効率的な実装が利用可能で、そのうちの1つはD. J. Bernstein自身のライブラリNaCl（[NaCl]）にあります。 （acc + block）とrの乗算で単純な実装でも2^288を超えないため、定数時間ではあるが最適ではないアプローチは、288ビット整数の算術演算を単純に実装することです。効率的な一定時間の実装は、パブリックドメインライブラリpoly1305-donna（[Poly1305_Donna]）にあります。"
    },
    {
      "indent": 0,
      "text": "4. Security Considerations",
      "section_title": true,
      "ja": "4. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The ChaCha20 cipher is designed to provide 256-bit security.",
      "ja": "ChaCha20暗号は、256ビットのセキュリティを提供するように設計されています。"
    },
    {
      "indent": 3,
      "text": "The Poly1305 authenticator is designed to ensure that forged messages are rejected with a probability of 1-(n/(2^102)) for a 16n-byte message, even after sending 2^64 legitimate messages, so it is SUF-CMA (strong unforgeability against chosen-message attacks) in the terminology of [AE].",
      "ja": "Poly1305オーセンティケーターは、2^64の正当なメッセージを送信した後でも、16nバイトのメッセージに対して1-（n /（2^102））の確率で偽造メッセージが確実に拒否されるように設計されているため、SUF-CMA（ [AE]の用語では、選択したメッセージ攻撃に対する強力な偽造不能性）。"
    },
    {
      "indent": 3,
      "text": "Proving the security of either of these is beyond the scope of this document. Such proofs are available in the referenced academic papers ([ChaCha], [Poly1305], [LatinDances], [LatinDances2], and [Zhenqing2012]).",
      "ja": "これらのいずれかのセキュリティを証明することは、このドキュメントの範囲を超えています。このような証明は、参照されている学術論文（[ChaCha]、[Poly1305]、[LatinDances]、[LatinDances2]、および[Zhenqing2012]）で入手できます。"
    },
    {
      "indent": 3,
      "text": "The most important security consideration in implementing this document is the uniqueness of the nonce used in ChaCha20. Counters and LFSRs are both acceptable ways of generating unique nonces, as is encrypting a counter using a block cipher with a 64-bit block size such as DES. Note that it is not acceptable to use a truncation of a counter encrypted with block ciphers with 128-bit or 256-bit blocks, because such a truncation may repeat after a short time.",
      "ja": "このドキュメントを実装する上で最も重要なセキュリティの考慮事項は、ChaCha20で使用されるナンスの一意性です。 DESなどの64ビットブロックサイズのブロック暗号を使用してカウンターを暗号化する場合と同様に、カウンターとLFSRはどちらも一意のナンスを生成するための受け入れ可能な方法です。 128ビットまたは256ビットブロックのブロック暗号で暗号化されたカウンターのトランケーションを使用することは受け入れられないことに注意してください。そのようなトランケーションは短時間後に繰り返される可能性があるためです。"
    },
    {
      "indent": 3,
      "text": "Consequences of repeating a nonce: If a nonce is repeated, then both the one-time Poly1305 key and the keystream are identical between the messages. This reveals the XOR of the plaintexts, because the XOR of the plaintexts is equal to the XOR of the ciphertexts.",
      "ja": "nonceを繰り返すことの結果：nonceが繰り返される場合、1回限りのPoly1305キーとキーストリームの両方がメッセージ間で同一です。これは、平文のXORが暗号文のXORと等しいため、平文のXORを明らかにします。"
    },
    {
      "indent": 3,
      "text": "The Poly1305 key MUST be unpredictable to an attacker. Randomly generating the key would fulfill this requirement, except that Poly1305 is often used in communications protocols, so the receiver should know the key. Pseudorandom number generation such as by encrypting a counter is acceptable. Using ChaCha with a secret key and a nonce is also acceptable.",
      "ja": "Poly1305キーは、攻撃者にとって予測不可能である必要があります。ランダムにキーを生成すると、Poly1305が通信プロトコルで使用されることが多いので、受信者がキーを知っている必要があることを除いて、この要件を満たします。カウンターの暗号化などによる疑似乱数の生成は許容されます。 ChaChaを秘密鍵とnonceで使用することも可能です。"
    },
    {
      "indent": 3,
      "text": "The algorithms presented here were designed to be easy to implement in constant time to avoid side-channel vulnerabilities. The operations used in ChaCha20 are all additions, XORs, and fixed rolls. All of these can and should be implemented in constant time. Access to offsets into the ChaCha state and the number of operations do not depend on any property of the key, eliminating the chance of information about the key leaking through the timing of cache misses.",
      "ja": "ここで紹介するアルゴリズムは、サイドチャネルの脆弱性を回避するために、一定の時間で簡単に実装できるように設計されています。 ChaCha20で使用される操作はすべて、追加、XOR、および固定ロールです。これらはすべて一定の時間で実装でき、実装する必要があります。 ChaCha状態へのオフセットへのアクセスと操作の数はキーのプロパティに依存しないため、キャッシュミスのタイミングを通じてキーがリークする可能性がなくなります。"
    },
    {
      "indent": 0,
      "text": " For Poly1305, the operations are addition, multiplication. and modulus, all on numbers with greater than 128 bits. This can be done in constant time, but a naive implementation (such as using some generic big number library) will not be constant time. For example, if the multiplication is performed as a separate operation from the modulus, the result will sometimes be under 2^256 and sometimes be above 2^256. Implementers should be careful about timing side-channels for Poly1305 by using the appropriate implementation of these operations.",
      "ja": "Poly1305の場合、演算は加算、乗算です。およびモジュラス、すべて128ビットを超える数値。これは一定の時間で実行できますが、単純な実装（一般的なビッグライブラリの使用など）は一定の時間ではありません。たとえば、乗算が係数とは別の演算として実行される場合、結果は2^256未満になることもあれば、2^256を超えることもあります。実装者は、これらの操作の適切な実装を使用して、Poly1305のサイドチャネルのタイミングに注意する必要があります。"
    },
    {
      "indent": 3,
      "text": "Validating the authenticity of a message involves a bitwise comparison of the calculated tag with the received tag. In most use cases, nonces and AAD contents are not \"used up\" until a valid message is received. This allows an attacker to send multiple identical messages with different tags until one passes the tag comparison. This is hard if the attacker has to try all 2^128 possible tags one by one. However, if the timing of the tag comparison operation reveals how long a prefix of the calculated and received tags is identical, the number of messages can be reduced significantly. For this reason, with online protocols, implementation MUST use a constant-time comparison function rather than relying on optimized but insecure library functions such as the C language's memcmp().",
      "ja": "メッセージの信頼性の検証には、計算されたタグと受信したタグのビット単位の比較が含まれます。ほとんどの使用例では、ナンスとAADコンテンツは、有効なメッセージが受信されるまで「使い果たされ」ません。これにより、攻撃者は、タグの比較に合格するまで、異なるタグを持つ複数の同一のメッセージを送信できます。攻撃者がすべての2^128の可能なタグを1つずつ試す必要がある場合、これは困難です。ただし、タグ比較操作のタイミングによって、計算されたタグと受信されたタグのプレフィックスが同じ長さであることが判明した場合は、メッセージの数を大幅に減らすことができます。このため、オンラインプロトコルでは、実装はC言語のmemcmp()などの最適化されているが安全でないライブラリ関数に依存するのではなく、一定時間比較関数を使用する必要があります。"
    },
    {
      "indent": 3,
      "text": "Additionally, any protocol using this algorithm MUST include the complete tag to minimize the opportunity for forgery. Tag truncation MUST NOT be done.",
      "ja": "さらに、このアルゴリズムを使用するプロトコルには、偽造の可能性を最小限に抑えるために完全なタグを含める必要があります。タグの切り捨ては行わないでください。"
    },
    {
      "indent": 0,
      "text": "5. IANA Considerations",
      "section_title": true,
      "ja": "5. IANAに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "IANA has updated the entry in the \"Authenticated Encryption with Associated Data (AEAD) Parameters\" registry with 29 as the Numeric ID and \"AEAD_CHACHA20_POLY1305\" as the name to point to this document as its reference.",
      "ja": "IANAは、「関連データを使用した認証暗号化（AEAD）パラメータ」レジストリのエントリを、数値IDが29、名前が「AEAD_CHACHA20_POLY1305」で、このドキュメントを参照として指すように更新しました。"
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6. 参考文献"
    },
    {
      "indent": 0,
      "text": "6.1. Normative References",
      "section_title": true,
      "ja": "6.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[ChaCha] Bernstein, D., \"ChaCha, a variant of Salsa20\", January 2008, <http://cr.yp.to/chacha/chacha-20080128.pdf>.",
      "ja": "[ChaCha] Bernstein、D。、「ChaCha、Salsa20のバリアント」、2008年1月、<http://cr.yp.to/chacha/chacha-20080128.pdf>。"
    },
    {
      "indent": 3,
      "text": "[Poly1305] Bernstein, D., \"The Poly1305-AES message-authentication code\", March 2005, <http://cr.yp.to/mac/poly1305-20050329.pdf>.",
      "ja": "[Poly1305] Bernstein、D。、「The Poly1305-AES message-authentication code」、2005年3月、<http://cr.yp.to/mac/poly1305-20050329.pdf>。"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 0,
      "text": "6.2. Informative References",
      "section_title": true,
      "ja": "6.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[AE] Bellare, M. and C. Namprempre, \"Authenticated Encryption: Relations among notions and analysis of the generic composition paradigm\", DOI 10.1007/s00145-008-9026-x, September 2008, <http://dl.acm.org/citation.cfm?id=1410269>.",
      "ja": "[AE] Bellare、M。およびC. Namprempre、「Authenticated Encryption：Relations between notions and analysis of the generic composition paradigm」、DOI 10.1007 / s00145-008-9026-x、2008年9月、<http：//dl.acm .org / citation.cfm？id = 1410269>。"
    },
    {
      "indent": 3,
      "text": "[Cache-Collisions] Bonneau, J. and I. Mironov, \"Cache-Collision Timing Attacks Against AES\", 2006, <http://research.microsoft.com/pubs/64024/aes-timing.pdf>.",
      "ja": "[キャッシュコリジョン] Bonneau、J。およびI. Mironov、「AESに対するキャッシュコリジョンタイミング攻撃」、2006年、<http://research.microsoft.com/pubs/64024/aes-timing.pdf>。"
    },
    {
      "indent": 3,
      "text": "[FIPS-197] National Institute of Standards and Technology, \"Advanced Encryption Standard (AES)\", FIPS PUB 197, November 2001, <http://csrc.nist.gov/publications/fips/fips197/ fips-197.pdf>.",
      "ja": "[FIPS-197]米国国立標準技術研究所、「Advanced Encryption Standard（AES）」、FIPS PUB 197、2001年11月、<http://csrc.nist.gov/publications/fips/fips197/ fips-197.pdf >。"
    },
    {
      "indent": 3,
      "text": "[LatinDances] Aumasson, J., Fischer, S., Khazaei, S., Meier, W., and C. Rechberger, \"New Features of Latin Dances: Analysis of Salsa, ChaCha, and Rumba\", December 2007, <http://cr.yp.to/rumba20/newfeatures-20071218.pdf>.",
      "ja": "[LatinDances] Aumasson、J.、Fischer、S.、Khazaei、S.、Meier、W。、およびC. Rechberger、「ラテンダンスの新機能：サルサ、チャチャ、およびルンバの分析」、2007年12月、<http ：//cr.yp.to/rumba20/newfeatures-20071218.pdf>。"
    },
    {
      "indent": 3,
      "text": "[LatinDances2] Ishiguro, T., Kiyomoto, S., and Y. Miyake, \"Modified version of 'Latin Dances Revisited: New Analytic Results of Salsa20 and ChaCha'\", February 2012, <https://eprint.iacr.org/2012/065.pdf>.",
      "ja": "[LatinDances2]石黒徹、清本進、三宅裕、「「ラテンダンスの再考：サルサ20とチャチャの新しい分析結果」」、2012年2月、<https://eprint.iacr.org /2012/065.pdf>。"
    },
    {
      "indent": 3,
      "text": "[NaCl] Bernstein, D., Lange, T., and P. Schwabe, \"NaCl: Networking and Cryptography library\", July 2012, <http://nacl.cr.yp.to>.",
      "ja": "[NaCl] Bernstein、D.、Lange、T。、およびP. Schwabe、「NaCl：Networking and Cryptography library」、2012年7月、<http://nacl.cr.yp.to>。"
    },
    {
      "indent": 3,
      "text": "[Poly1305_Donna] \"poly1305-donna\", commit e6ad6e0, March 2016, <https://github.com/floodyberry/poly1305-donna>.",
      "ja": "[Poly1305_Donna]「poly1305-donna」、コミットe6ad6e0、2016年3月、<https://github.com/floodyberry/poly1305-donna>。"
    },
    {
      "indent": 3,
      "text": "[Procter] Procter, G., \"A Security Analysis of the Composition of ChaCha20 and Poly1305\", August 2014, <http://eprint.iacr.org/2014/613.pdf>.",
      "ja": "[Procter] Procter、G。、「ChaCha20とPoly1305の構成のセキュリティ分析」、2014年8月、<http://eprint.iacr.org/2014/613.pdf>。"
    },
    {
      "indent": 3,
      "text": "[RFC5116] McGrew, D., \"An Interface and Algorithms for Authenticated Encryption\", RFC 5116, DOI 10.17487/RFC5116, January 2008, <https://www.rfc-editor.org/info/rfc5116>.",
      "ja": "[RFC5116] McGrew、D。、「認証された暗号化のためのインターフェースとアルゴリズム」、RFC 5116、DOI 10.17487 / RFC5116、2008年1月、<https://www.rfc-editor.org/info/rfc5116>。"
    },
    {
      "indent": 3,
      "text": "[RFC7296] Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T. Kivinen, \"Internet Key Exchange Protocol Version 2 (IKEv2)\", STD 79, RFC 7296, DOI 10.17487/RFC7296, October 2014, <https://www.rfc-editor.org/info/rfc7296>.",
      "ja": "[RFC7296] Kaufman、C.、Hoffman、P.、Nir、Y.、Eronen、P。、およびT. Kivinen、「インターネットキーエクスチェンジプロトコルバージョン2（IKEv2）」、STD 79、RFC 7296、DOI 10.17487 / RFC7296 、2014年10月、<https://www.rfc-editor.org/info/rfc7296>。"
    },
    {
      "indent": 3,
      "text": "[RFC7539] Nir, Y. and A. Langley, \"ChaCha20 and Poly1305 for IETF Protocols\", RFC 7539, DOI 10.17487/RFC7539, May 2015, <https://www.rfc-editor.org/info/rfc7539>.",
      "ja": "[RFC7539] Nir、Y。およびA. Langley、「IETFプロトコル用のChaCha20およびPoly1305」、RFC 7539、DOI 10.17487 / RFC7539、2015年5月、<https://www.rfc-editor.org/info/rfc7539>。"
    },
    {
      "indent": 3,
      "text": "[SP800-67] National Institute of Standards and Technology, \"Recommendation for the Triple Data Encryption Algorithm (TDEA) Block Cipher\", NIST 800-67, Rev. 2, November 2017, <https://csrc.nist.gov/publications/detail/sp/800-67/ rev-2/final>.",
      "ja": "[SP800-67]米国国立標準技術研究所、「トリプルデータ暗号化アルゴリズム（TDEA）ブロック暗号の推奨」、NIST 800-67、Rev。2、2017年11月、<https://csrc.nist.gov/ Publications / detail / sp / 800-67 / rev-2 / final>。"
    },
    {
      "indent": 3,
      "text": "[Standby-Cipher] McGrew, D., Grieco, A., and Y. Sheffer, \"Selection of Future Cryptographic Standards\", Work in Progress, draft-mcgrew-standby-cipher-00, January 2013.",
      "ja": "[Standby-Cipher] McGrew、D.、Grieco、A。、およびY. Sheffer、「Selection of Future Cryptographic Standards」、Work in Progress、draft-mcgrew-standby-cipher-00、2013年1月。"
    },
    {
      "indent": 3,
      "text": "[Zhenqing2012] Zhenqing, S., Bin, Z., Dengguo, F., and W. Wenling, \"Improved Key Recovery Attacks on Reduced-Round Salsa20 and ChaCha*\", 2012.",
      "ja": "[Zhenqing2012] Zhenqing、S.、Bin、Z.、Dengguo、F.、W. Wenling、 \"Improved Key Recovery Attacks on Reduced-Round Salsa20 and ChaCha *\"、2012。"
    },
    {
      "indent": 0,
      "text": "Appendix A. Additional Test Vectors",
      "section_title": true,
      "ja": "付録A.追加のテストベクトル"
    },
    {
      "indent": 3,
      "text": "The subsections of this appendix contain more test vectors for the algorithms in the subsections of Section 2.",
      "ja": "この付録のサブセクションには、セクション2のサブセクションのアルゴリズムのテストベクトルがさらに含まれています。"
    },
    {
      "indent": 0,
      "text": "A.1. The ChaCha20 Block Functions",
      "section_title": true,
      "ja": "A.1. ChaCha20ブロックの機能"
    },
    {
      "indent": 2,
      "text": "Test Vector #1:\n==============\n\nKey:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n\nNonce:\n000  00 00 00 00 00 00 00 00 00 00 00 00              ............\n\nBlock Counter = 0\n\n  ChaCha state at the end\n      ade0b876  903df1a0  e56a5d40  28bd8653\n      b819d2bd  1aed8da0  ccef36a8  c70d778b\n      7c5941da  8d485751  3fe02477  374ad8b8\n      f4b8436a  1ca11815  69b687c3  8665eeb2\n\nKeystream:\n000  76 b8 e0 ad a0 f1 3d 90 40 5d 6a e5 53 86 bd 28  v.....=.@]j.S..(\n016  bd d2 19 b8 a0 8d ed 1a a8 36 ef cc 8b 77 0d c7  .........6...w..\n032  da 41 59 7c 51 57 48 8d 77 24 e0 3f b8 d8 4a 37  .AY|QWH.w$.?..J7\n048  6a 43 b8 f4 15 18 a1 1c c3 87 b6 69 b2 ee 65 86  jC.........i..e.\n",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #2:\n==============\n\nKey:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n\nNonce:\n000  00 00 00 00 00 00 00 00 00 00 00 00              ............\n\nBlock Counter = 1\n\n  ChaCha state at the end\n      bee7079f  7a385155  7c97ba98  0d082d73\n      a0290fcb  6965e348  3e53c612  ed7aee32\n      7621b729  434ee69c  b03371d5  d539d874\n      281fed31  45fb0a51  1f0ae1ac  6f4d794b\n\nKeystream:\n000  9f 07 e7 be 55 51 38 7a 98 ba 97 7c 73 2d 08 0d  ....UQ8z...|s-..\n016  cb 0f 29 a0 48 e3 65 69 12 c6 53 3e 32 ee 7a ed  ..).H.ei..S>2.z.\n032  29 b7 21 76 9c e6 4e 43 d5 71 33 b0 74 d8 39 d5  ).!v..NC.q3.t.9.\n048  31 ed 1f 28 51 0a fb 45 ac e1 0a 1f 4b 79 4d 6f  1..(Q..E....KyMo",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #3:\n==============\n\nKey:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................\n\nNonce:\n000  00 00 00 00 00 00 00 00 00 00 00 00              ............\n\nBlock Counter = 1\n\n  ChaCha state at the end\n      2452eb3a  9249f8ec  8d829d9b  ddd4ceb1\n      e8252083  60818b01  f38422b8  5aaa49c9\n      bb00ca8e  da3ba7b4  c4b592d1  fdf2732f\n      4436274e  2561b3c8  ebdd4aa6  a0136c00\n\nKeystream:\n000  3a eb 52 24 ec f8 49 92 9b 9d 82 8d b1 ce d4 dd  :.R$..I.........\n016  83 20 25 e8 01 8b 81 60 b8 22 84 f3 c9 49 aa 5a  . %....`.\"...I.Z\n032  8e ca 00 bb b4 a7 3b da d1 92 b5 c4 2f 73 f2 fd  ......;...../s..\n048  4e 27 36 44 c8 b3 61 25 a6 4a dd eb 00 6c 13 a0  N'6D..a%.J...l..",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #4:\n==============\n\nKey:\n000  00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n\nNonce:\n000  00 00 00 00 00 00 00 00 00 00 00 00              ............\n\nBlock Counter = 2\n\n  ChaCha state at the end\n      fb4dd572  4bc42ef1  df922636  327f1394\n      a78dea8f  5e269039  a1bebbc1  caf09aae\n      a25ab213  48a6b46c  1b9d9bcb  092c5be6\n      546ca624  1bec45d5  87f47473  96f0992e\n\nKeystream:\n000  72 d5 4d fb f1 2e c4 4b 36 26 92 df 94 13 7f 32  r.M....K6&.....2\n016  8f ea 8d a7 39 90 26 5e c1 bb be a1 ae 9a f0 ca  ....9.&^........\n032  13 b2 5a a2 6c b4 a6 48 cb 9b 9d 1b e6 5b 2c 09  ..Z.l..H.....[,.\n048  24 a6 6c 54 d5 45 ec 1b 73 74 f4 87 2e 99 f0 96  $.lT.E..st......",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #5:\n==============\n\nKey:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n\nNonce:\n000  00 00 00 00 00 00 00 00 00 00 00 02              ............\n\nBlock Counter = 0\n\n  ChaCha state at the end\n      374dc6c2  3736d58c  b904e24a  cd3f93ef\n      88228b1a  96a4dfb3  5b76ab72  c727ee54\n      0e0e978a  f3145c95  1b748ea8  f786c297\n      99c28f5f  628314e8  398a19fa  6ded1b53\n\nKeystream:\n000  c2 c6 4d 37 8c d5 36 37 4a e2 04 b9 ef 93 3f cd  ..M7..67J.....?.\n016  1a 8b 22 88 b3 df a4 96 72 ab 76 5b 54 ee 27 c7  ..\".....r.v[T.'.\n032  8a 97 0e 0e 95 5c 14 f3 a8 8e 74 1b 97 c2 86 f7  .....\\....t.....\n048  5f 8f c2 99 e8 14 83 62 fa 19 8a 39 53 1b ed 6d  _......b...9S..m",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.2. ChaCha20 Encryption",
      "section_title": true,
      "ja": "A.2. ChaCha20暗号化"
    },
    {
      "indent": 2,
      "text": "Test Vector #1:\n==============",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Key:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Nonce:\n000  00 00 00 00 00 00 00 00 00 00 00 00              ............",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Initial Block Counter = 0",
      "ja": "初期ブロックカウンタ= 0"
    },
    {
      "indent": 2,
      "text": "Plaintext:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n032  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n048  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Ciphertext:\n000  76 b8 e0 ad a0 f1 3d 90 40 5d 6a e5 53 86 bd 28  v.....=.@]j.S..(\n016  bd d2 19 b8 a0 8d ed 1a a8 36 ef cc 8b 77 0d c7  .........6...w..\n032  da 41 59 7c 51 57 48 8d 77 24 e0 3f b8 d8 4a 37  .AY|QWH.w$.?..J7\n048  6a 43 b8 f4 15 18 a1 1c c3 87 b6 69 b2 ee 65 86  jC.........i..e.",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #2:\n==============",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Key:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Nonce:\n000  00 00 00 00 00 00 00 00 00 00 00 02              ............",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "  Initial Block Counter = 1\n  Plaintext:\n  000  41 6e 79 20 73 75 62 6d 69 73 73 69 6f 6e 20 74  Any submission t\n  016  6f 20 74 68 65 20 49 45 54 46 20 69 6e 74 65 6e  o the IETF inten\n  032  64 65 64 20 62 79 20 74 68 65 20 43 6f 6e 74 72  ded by the Contr\n  048  69 62 75 74 6f 72 20 66 6f 72 20 70 75 62 6c 69  ibutor for publi\n  064  63 61 74 69 6f 6e 20 61 73 20 61 6c 6c 20 6f 72  cation as all or\n  080  20 70 61 72 74 20 6f 66 20 61 6e 20 49 45 54 46   part of an IETF\n  096  20 49 6e 74 65 72 6e 65 74 2d 44 72 61 66 74 20   Internet-Draft\n  112  6f 72 20 52 46 43 20 61 6e 64 20 61 6e 79 20 73  or RFC and any s\n  128  74 61 74 65 6d 65 6e 74 20 6d 61 64 65 20 77 69  tatement made wi\n  144  74 68 69 6e 20 74 68 65 20 63 6f 6e 74 65 78 74  thin the context\n  160  20 6f 66 20 61 6e 20 49 45 54 46 20 61 63 74 69   of an IETF acti\n  176  76 69 74 79 20 69 73 20 63 6f 6e 73 69 64 65 72  vity is consider\n  192  65 64 20 61 6e 20 22 49 45 54 46 20 43 6f 6e 74  ed an \"IETF Cont\n  208  72 69 62 75 74 69 6f 6e 22 2e 20 53 75 63 68 20  ribution\". Such\n  224  73 74 61 74 65 6d 65 6e 74 73 20 69 6e 63 6c 75  statements inclu\n  240  64 65 20 6f 72 61 6c 20 73 74 61 74 65 6d 65 6e  de oral statemen\n  256  74 73 20 69 6e 20 49 45 54 46 20 73 65 73 73 69  ts in IETF sessi\n  272  6f 6e 73 2c 20 61 73 20 77 65 6c 6c 20 61 73 20  ons, as well as\n  288  77 72 69 74 74 65 6e 20 61 6e 64 20 65 6c 65 63  written and elec\n  304  74 72 6f 6e 69 63 20 63 6f 6d 6d 75 6e 69 63 61  tronic communica\n  320  74 69 6f 6e 73 20 6d 61 64 65 20 61 74 20 61 6e  tions made at an\n  336  79 20 74 69 6d 65 20 6f 72 20 70 6c 61 63 65 2c  y time or place,\n  352  20 77 68 69 63 68 20 61 72 65 20 61 64 64 72 65   which are addre\n  368  73 73 65 64 20 74 6f                             ssed to\n  Ciphertext:\n  000  a3 fb f0 7d f3 fa 2f de 4f 37 6c a2 3e 82 73 70  ...}../.O7l.>.sp\n  016  41 60 5d 9f 4f 4f 57 bd 8c ff 2c 1d 4b 79 55 ec  A`].OOW...,.KyU.\n  032  2a 97 94 8b d3 72 29 15 c8 f3 d3 37 f7 d3 70 05  *....r)....7..p.\n  048  0e 9e 96 d6 47 b7 c3 9f 56 e0 31 ca 5e b6 25 0d  ....G...V.1.^.%.\n  064  40 42 e0 27 85 ec ec fa 4b 4b b5 e8 ea d0 44 0e  @B.'....KK....D.\n  080  20 b6 e8 db 09 d8 81 a7 c6 13 2f 42 0e 52 79 50   ........./B.RyP\n  096  42 bd fa 77 73 d8 a9 05 14 47 b3 29 1c e1 41 1c  B..ws....G.)..A.\n  112  68 04 65 55 2a a6 c4 05 b7 76 4d 5e 87 be a8 5a  h.eU*....vM^...Z\n  128  d0 0f 84 49 ed 8f 72 d0 d6 62 ab 05 26 91 ca 66  ...I..r..b..&..f\n  144  42 4b c8 6d 2d f8 0e a4 1f 43 ab f9 37 d3 25 9d  BK.m-....C..7.%.\n  160  c4 b2 d0 df b4 8a 6c 91 39 dd d7 f7 69 66 e9 28  ......l.9...if.(\n  176  e6 35 55 3b a7 6c 5c 87 9d 7b 35 d4 9e b2 e6 2b  .5U;.l\\..{5....+\n  192  08 71 cd ac 63 89 39 e2 5e 8a 1e 0e f9 d5 28 0f  .q..c.9.^.....(.\n  208  a8 ca 32 8b 35 1c 3c 76 59 89 cb cf 3d aa 8b 6c  ..2.5.<vY...=..l\n  224  cc 3a af 9f 39 79 c9 2b 37 20 fc 88 dc 95 ed 84  .:..9y.+7 ......\n  240  a1 be 05 9c 64 99 b9 fd a2 36 e7 e8 18 b0 4b 0b  ....d....6....K.\n  256  c3 9c 1e 87 6b 19 3b fe 55 69 75 3f 88 12 8c c0  ....k.;.Uiu?....\n  272  8a aa 9b 63 d1 a1 6f 80 ef 25 54 d7 18 9c 41 1f  ...c..o..%T...A.\n  288  58 69 ca 52 c5 b8 3f a3 6f f2 16 b9 c1 d3 00 62  Xi.R..?.o......b\n  304  be bc fd 2d c5 bc e0 91 19 34 fd a7 9a 86 f6 e6  ...-.....4......\n  320  98 ce d7 59 c3 ff 9b 64 77 33 8f 3d a4 f9 cd 85  ...Y...dw3.=....\n  336  14 ea 99 82 cc af b3 41 b2 38 4d d9 02 f3 d1 ab  .......A.8M.....\n  352  7a c6 1d d2 9c 6f 21 ba 5b 86 2f 37 30 e3 7c fd  z....o!.[./70.|.\n  368  c4 fd 80 6c 22 f2 21                             ...l\".!",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #3:\n==============",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Key:\n000  1c 92 40 a5 eb 55 d3 8a f3 33 88 86 04 f6 b5 f0  ..@..U...3......\n016  47 39 17 c1 40 2b 80 09 9d ca 5c bc 20 70 75 c0  G9..@+....\\. pu.",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Nonce:\n000  00 00 00 00 00 00 00 00 00 00 00 02              ............",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Initial Block Counter = 42",
      "ja": "初期ブロックカウンター= 42"
    },
    {
      "indent": 2,
      "text": "Plaintext:\n000  27 54 77 61 73 20 62 72 69 6c 6c 69 67 2c 20 61  'Twas brillig, a\n016  6e 64 20 74 68 65 20 73 6c 69 74 68 79 20 74 6f  nd the slithy to\n032  76 65 73 0a 44 69 64 20 67 79 72 65 20 61 6e 64  ves.Did gyre and\n048  20 67 69 6d 62 6c 65 20 69 6e 20 74 68 65 20 77   gimble in the w\n064  61 62 65 3a 0a 41 6c 6c 20 6d 69 6d 73 79 20 77  abe:.All mimsy w\n080  65 72 65 20 74 68 65 20 62 6f 72 6f 67 6f 76 65  ere the borogove\n096  73 2c 0a 41 6e 64 20 74 68 65 20 6d 6f 6d 65 20  s,.And the mome\n112  72 61 74 68 73 20 6f 75 74 67 72 61 62 65 2e     raths outgrabe.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Ciphertext:\n000  62 e6 34 7f 95 ed 87 a4 5f fa e7 42 6f 27 a1 df  b.4....._..Bo'..\n016  5f b6 91 10 04 4c 0d 73 11 8e ff a9 5b 01 e5 cf  _....L.s....[...\n032  16 6d 3d f2 d7 21 ca f9 b2 1e 5f b1 4c 61 68 71  .m=..!...._.Lahq\n048  fd 84 c5 4f 9d 65 b2 83 19 6c 7f e4 f6 05 53 eb  ...O.e...l....S.\n064  f3 9c 64 02 c4 22 34 e3 2a 35 6b 3e 76 43 12 a6  ..d..\"4.*5k>vC..\n080  1a 55 32 05 57 16 ea d6 96 25 68 f8 7d 3f 3f 77  .U2.W....%h.}??w\n096  04 c6 a8 d1 bc d1 bf 4d 50 d6 15 4b 6d a7 31 b1  .......MP..Km.1.\n112  87 b5 8d fd 72 8a fa 36 75 7a 79 7a c1 88 d1     ....r..6uzyz...",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.3. Poly1305 Message Authentication Code",
      "section_title": true,
      "ja": "A.3. Poly1305メッセージ認証コード"
    },
    {
      "indent": 3,
      "text": "Notice how, in test vector #2, r is equal to zero. The part of the Poly1305 algorithm where the accumulator is multiplied by r means that with r equal zero, the tag will be equal to s regardless of the content of the text. Fortunately, all the proposed methods of generating r are such that getting this particular weak key is very unlikely.",
      "ja": "テストベクトル＃2では、rがゼロに等しいことに注意してください。アキュムレータにrを乗算するPoly1305アルゴリズムの部分は、rがゼロの場合、テキストの内容に関係なく、タグがsに等しくなることを意味します。幸いにも、提案されているrの生成方法はすべて、この特定の弱いキーを取得することはほとんどありません。"
    },
    {
      "indent": 2,
      "text": "Test Vector #1:\n==============",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "One-time Poly1305 Key:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Text to MAC:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n032  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n048  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Tag:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #2:\n==============",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "  One-time Poly1305 Key:\n  000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  016  36 e5 f6 b5 c5 e0 60 70 f0 ef ca 96 22 7a 86 3e  6.....`p....\"z.>\n  Text to MAC:\n  000  41 6e 79 20 73 75 62 6d 69 73 73 69 6f 6e 20 74  Any submission t\n  016  6f 20 74 68 65 20 49 45 54 46 20 69 6e 74 65 6e  o the IETF inten\n  032  64 65 64 20 62 79 20 74 68 65 20 43 6f 6e 74 72  ded by the Contr\n  048  69 62 75 74 6f 72 20 66 6f 72 20 70 75 62 6c 69  ibutor for publi\n  064  63 61 74 69 6f 6e 20 61 73 20 61 6c 6c 20 6f 72  cation as all or\n  080  20 70 61 72 74 20 6f 66 20 61 6e 20 49 45 54 46   part of an IETF\n  096  20 49 6e 74 65 72 6e 65 74 2d 44 72 61 66 74 20   Internet-Draft\n  112  6f 72 20 52 46 43 20 61 6e 64 20 61 6e 79 20 73  or RFC and any s\n  128  74 61 74 65 6d 65 6e 74 20 6d 61 64 65 20 77 69  tatement made wi\n  144  74 68 69 6e 20 74 68 65 20 63 6f 6e 74 65 78 74  thin the context\n  160  20 6f 66 20 61 6e 20 49 45 54 46 20 61 63 74 69   of an IETF acti\n  176  76 69 74 79 20 69 73 20 63 6f 6e 73 69 64 65 72  vity is consider\n  192  65 64 20 61 6e 20 22 49 45 54 46 20 43 6f 6e 74  ed an \"IETF Cont\n  208  72 69 62 75 74 69 6f 6e 22 2e 20 53 75 63 68 20  ribution\". Such\n  224  73 74 61 74 65 6d 65 6e 74 73 20 69 6e 63 6c 75  statements inclu\n  240  64 65 20 6f 72 61 6c 20 73 74 61 74 65 6d 65 6e  de oral statemen\n  256  74 73 20 69 6e 20 49 45 54 46 20 73 65 73 73 69  ts in IETF sessi\n  272  6f 6e 73 2c 20 61 73 20 77 65 6c 6c 20 61 73 20  ons, as well as\n  288  77 72 69 74 74 65 6e 20 61 6e 64 20 65 6c 65 63  written and elec\n  304  74 72 6f 6e 69 63 20 63 6f 6d 6d 75 6e 69 63 61  tronic communica\n  320  74 69 6f 6e 73 20 6d 61 64 65 20 61 74 20 61 6e  tions made at an\n  336  79 20 74 69 6d 65 20 6f 72 20 70 6c 61 63 65 2c  y time or place,\n  352  20 77 68 69 63 68 20 61 72 65 20 61 64 64 72 65   which are addre\n  368  73 73 65 64 20 74 6f                             ssed to",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Tag:\n000  36 e5 f6 b5 c5 e0 60 70 f0 ef ca 96 22 7a 86 3e  6.....`p....\"z.>",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #3:\n==============",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "One-time Poly1305 Key:\n000  36 e5 f6 b5 c5 e0 60 70 f0 ef ca 96 22 7a 86 3e  6.....`p....\"z.>\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Text to MAC:\n000  41 6e 79 20 73 75 62 6d 69 73 73 69 6f 6e 20 74  Any submission t\n016  6f 20 74 68 65 20 49 45 54 46 20 69 6e 74 65 6e  o the IETF inten\n032  64 65 64 20 62 79 20 74 68 65 20 43 6f 6e 74 72  ded by the Contr\n048  69 62 75 74 6f 72 20 66 6f 72 20 70 75 62 6c 69  ibutor for publi\n064  63 61 74 69 6f 6e 20 61 73 20 61 6c 6c 20 6f 72  cation as all or\n080  20 70 61 72 74 20 6f 66 20 61 6e 20 49 45 54 46   part of an IETF\n096  20 49 6e 74 65 72 6e 65 74 2d 44 72 61 66 74 20   Internet-Draft\n112  6f 72 20 52 46 43 20 61 6e 64 20 61 6e 79 20 73  or RFC and any s\n128  74 61 74 65 6d 65 6e 74 20 6d 61 64 65 20 77 69  tatement made wi\n144  74 68 69 6e 20 74 68 65 20 63 6f 6e 74 65 78 74  thin the context\n160  20 6f 66 20 61 6e 20 49 45 54 46 20 61 63 74 69   of an IETF acti\n176  76 69 74 79 20 69 73 20 63 6f 6e 73 69 64 65 72  vity is consider\n192  65 64 20 61 6e 20 22 49 45 54 46 20 43 6f 6e 74  ed an \"IETF Cont\n208  72 69 62 75 74 69 6f 6e 22 2e 20 53 75 63 68 20  ribution\". Such\n224  73 74 61 74 65 6d 65 6e 74 73 20 69 6e 63 6c 75  statements inclu\n240  64 65 20 6f 72 61 6c 20 73 74 61 74 65 6d 65 6e  de oral statemen\n256  74 73 20 69 6e 20 49 45 54 46 20 73 65 73 73 69  ts in IETF sessi\n272  6f 6e 73 2c 20 61 73 20 77 65 6c 6c 20 61 73 20  ons, as well as\n288  77 72 69 74 74 65 6e 20 61 6e 64 20 65 6c 65 63  written and elec\n304  74 72 6f 6e 69 63 20 63 6f 6d 6d 75 6e 69 63 61  tronic communica\n320  74 69 6f 6e 73 20 6d 61 64 65 20 61 74 20 61 6e  tions made at an\n336  79 20 74 69 6d 65 20 6f 72 20 70 6c 61 63 65 2c  y time or place,\n352  20 77 68 69 63 68 20 61 72 65 20 61 64 64 72 65   which are addre\n368  73 73 65 64 20 74 6f                             ssed to",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Tag:\n000  f3 47 7e 7c d9 54 17 af 89 a6 b8 79 4c 31 0c f0  .G~|.T.....yL1..",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #4:\n==============",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "One-time Poly1305 Key:\n000  1c 92 40 a5 eb 55 d3 8a f3 33 88 86 04 f6 b5 f0  ..@..U...3......\n016  47 39 17 c1 40 2b 80 09 9d ca 5c bc 20 70 75 c0  G9..@+....\\. pu.",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Text to MAC:\n000  27 54 77 61 73 20 62 72 69 6c 6c 69 67 2c 20 61  'Twas brillig, a\n016  6e 64 20 74 68 65 20 73 6c 69 74 68 79 20 74 6f  nd the slithy to\n032  76 65 73 0a 44 69 64 20 67 79 72 65 20 61 6e 64  ves.Did gyre and\n048  20 67 69 6d 62 6c 65 20 69 6e 20 74 68 65 20 77   gimble in the w\n064  61 62 65 3a 0a 41 6c 6c 20 6d 69 6d 73 79 20 77  abe:.All mimsy w\n080  65 72 65 20 74 68 65 20 62 6f 72 6f 67 6f 76 65  ere the borogove\n096  73 2c 0a 41 6e 64 20 74 68 65 20 6d 6f 6d 65 20  s,.And the mome\n112  72 61 74 68 73 20 6f 75 74 67 72 61 62 65 2e     raths outgrabe.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Tag:\n000  45 41 66 9a 7e aa ee 61 e7 08 dc 7c bc c5 eb 62  EAf.~..a...|...b",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Test Vector #5: If one uses 130-bit partial reduction, does the code handle the case where partially reduced final result is not fully reduced?",
      "ja": "テストベクトル＃5：130ビットの部分削減を使用する場合、コードは部分的に削減された最終結果が完全に削減されない場合を処理しますか？"
    },
    {
      "indent": 3,
      "text": "R:\n02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nS:\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\ndata:\nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\ntag:\n03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Test Vector #6: What happens if addition of s overflows modulo 2^128?",
      "ja": "テストベクトル #6: s の加算が 2^128 を法としてオーバーフローするとどうなるでしょうか?"
    },
    {
      "indent": 3,
      "text": "R:\n02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nS:\nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\ndata:\n02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\ntag:\n03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Test Vector #7: What happens if data limb is all ones and there is carry from lower limb?",
      "ja": "Test Vector＃7：データリムがすべて1で、下肢からのキャリーがある場合はどうなりますか？"
    },
    {
      "indent": 3,
      "text": "R:\n01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nS:\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\ndata:\nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\nF0 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\n11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\ntag:\n05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Test Vector #8: What happens if final result from polynomial part is exactly 2^130-5?",
      "ja": "テストベクトル＃8：多項式部分の最終結果が正確に2^130-5の場合はどうなりますか？"
    },
    {
      "indent": 3,
      "text": "R:\n01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nS:\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\ndata:\nFF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\nFB FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE\n01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\ntag:\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Test Vector #9: What happens if final result from polynomial part is exactly 2^130-6?",
      "ja": "テストベクトル＃9：多項式部分の最終結果が正確に2^130-6の場合はどうなりますか？"
    },
    {
      "indent": 3,
      "text": "R:\n02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nS:\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\ndata:\nFD FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\ntag:\nFA FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Test Vector #10: What happens if 5*H+L-type reduction produces 131-bit intermediate result?",
      "ja": "テストベクタ＃10：5 * H + Lタイプの削減により131ビットの中間結果が生成されるとどうなりますか？"
    },
    {
      "indent": 3,
      "text": "R:\n01 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00\nS:\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\ndata:\nE3 35 94 D7 50 5E 43 B9 00 00 00 00 00 00 00 00\n33 94 D7 50 5E 43 79 CD 01 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\ntag:\n14 00 00 00 00 00 00 00 55 00 00 00 00 00 00 00",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Test Vector #11: What happens if 5*H+L-type reduction produces 131-bit final result?",
      "ja": "テスト ベクトル #11: 5*H+L タイプの削減により 131 ビットの最終結果が生成される場合はどうなるでしょうか?"
    },
    {
      "indent": 3,
      "text": "R:\n01 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00\nS:\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\ndata:\nE3 35 94 D7 50 5E 43 B9 00 00 00 00 00 00 00 00\n33 94 D7 50 5E 43 79 CD 01 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\ntag:\n13 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.4. Poly1305 Key Generation Using ChaCha20",
      "section_title": true,
      "ja": "A.4. ChaCha20を使用したPoly1305キーの生成"
    },
    {
      "indent": 2,
      "text": "Test Vector #1:\n==============",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "The ChaCha20 Key:\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "The nonce:\n000  00 00 00 00 00 00 00 00 00 00 00 00              ............",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Poly1305 one-time key:\n000  76 b8 e0 ad a0 f1 3d 90 40 5d 6a e5 53 86 bd 28  v.....=.@]j.S..(\n016  bd d2 19 b8 a0 8d ed 1a a8 36 ef cc 8b 77 0d c7  .........6...w..",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #2:\n==============",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "The ChaCha20 Key\n000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n016  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "The nonce:\n000  00 00 00 00 00 00 00 00 00 00 00 02              ............",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Poly1305 one-time key:\n000  ec fa 25 4f 84 5f 64 74 73 d3 cb 14 0d a9 e8 76  ..%O._dts......v\n016  06 cb 33 06 6c 44 7b 87 bc 26 66 dd e3 fb b7 39  ..3.lD{..&f....9",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Test Vector #3:\n==============",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "The ChaCha20 Key\n000  1c 92 40 a5 eb 55 d3 8a f3 33 88 86 04 f6 b5 f0  ..@..U...3......\n016  47 39 17 c1 40 2b 80 09 9d ca 5c bc 20 70 75 c0  G9..@+....\\. pu.",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "The nonce:\n000  00 00 00 00 00 00 00 00 00 00 00 02              ............",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Poly1305 one-time key:\n000  96 5e 3b c6 f9 ec 7e d9 56 08 08 f4 d2 29 f9 4b  .^;...~.V....).K\n016  13 7f f2 75 ca 9b 3f cb dd 59 de aa d2 33 10 ae  ...u..?..Y...3..",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "A.5. ChaCha20-Poly1305 AEAD Decryption",
      "section_title": true,
      "ja": "A.5. ChaCha20-Poly1305 AEAD復号化"
    },
    {
      "indent": 3,
      "text": "Below we see decrypting a message. We receive a ciphertext, a nonce, and a tag. We know the key. We will check the tag and then (assuming that it validates) decrypt the ciphertext. In this particular protocol, we'll assume that there is no padding of the plaintext.",
      "ja": "以下はメッセージの復号化です。暗号文、nonce、タグを受け取ります。私たちは鍵を知っています。タグをチェックしてから、それが検証されると仮定して、暗号文を復号化します。この特定のプロトコルでは、平文のパディングがないと仮定します。"
    },
    {
      "indent": 2,
      "text": "The ChaCha20 Key\n000  1c 92 40 a5 eb 55 d3 8a f3 33 88 86 04 f6 b5 f0  ..@..U...3......\n016  47 39 17 c1 40 2b 80 09 9d ca 5c bc 20 70 75 c0  G9..@+....\\. pu.",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Ciphertext:\n000  64 a0 86 15 75 86 1a f4 60 f0 62 c7 9b e6 43 bd  d...u...`.b...C.\n016  5e 80 5c fd 34 5c f3 89 f1 08 67 0a c7 6c 8c b2  ^.\\.4\\....g..l..\n032  4c 6c fc 18 75 5d 43 ee a0 9e e9 4e 38 2d 26 b0  Ll..u]C....N8-&.\n048  bd b7 b7 3c 32 1b 01 00 d4 f0 3b 7f 35 58 94 cf  ...<2.....;.5X..\n064  33 2f 83 0e 71 0b 97 ce 98 c8 a8 4a bd 0b 94 81  3/..q......J....\n080  14 ad 17 6e 00 8d 33 bd 60 f9 82 b1 ff 37 c8 55  ...n..3.`....7.U\n096  97 97 a0 6e f4 f0 ef 61 c1 86 32 4e 2b 35 06 38  ...n...a..2N+5.8\n112  36 06 90 7b 6a 7c 02 b0 f9 f6 15 7b 53 c8 67 e4  6..{j|.....{S.g.\n128  b9 16 6c 76 7b 80 4d 46 a5 9b 52 16 cd e7 a4 e9  ..lv{.MF..R.....\n144  90 40 c5 a4 04 33 22 5e e2 82 a1 b0 a0 6c 52 3e  .@...3\"^.....lR>\n160  af 45 34 d7 f8 3f a1 15 5b 00 47 71 8c bc 54 6a  .E4..?..[.Gq..Tj\n176  0d 07 2b 04 b3 56 4e ea 1b 42 22 73 f5 48 27 1a  ..+..VN..B\"s.H'.\n192  0b b2 31 60 53 fa 76 99 19 55 eb d6 31 59 43 4e  ..1`S.v..U..1YCN\n208  ce bb 4e 46 6d ae 5a 10 73 a6 72 76 27 09 7a 10  ..NFm.Z.s.rv'.z.\n224  49 e6 17 d9 1d 36 10 94 fa 68 f0 ff 77 98 71 30  I....6...h..w.q0\n240  30 5b ea ba 2e da 04 df 99 7b 71 4d 6c 6f 2c 29  0[.......{qMlo,)\n256  a6 ad 5c b4 02 2b 02 70 9b                       ..\\..+.p.",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "The nonce:\n000  00 00 00 00 01 02 03 04 05 06 07 08              ............",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "The AAD:\n000  f3 33 88 86 00 00 00 00 00 00 4e 91              .3........N.",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Received Tag:\n000  ee ad 9d 67 89 0c bb 22 39 23 36 fe a1 85 1f 38  ...g...\"9#6....8",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "First, we calculate the one-time Poly1305 key",
      "ja": "まず、1回限りのPoly1305キーを計算します"
    },
    {
      "indent": 4,
      "text": "ChaCha state with key setup\n    61707865  3320646e  79622d32  6b206574\n    a540921c  8ad355eb  868833f3  f0b5f604\n    c1173947  09802b40  bc5cca9d  c0757020\n    00000000  00000000  04030201  08070605\n\nChaCha state after 20 rounds\n    a94af0bd  89dee45c  b64bb195  afec8fa1\n    508f4726  63f554c0  1ea2c0db  aa721526\n    11b1e514  a0bacc0f  828a6015  d7825481\n    e8a4a850  d9dcbbd6  4c2de33a  f8ccd912",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": " out bytes:\nbd:f0:4a:a9:5c:e4:de:89:95:b1:4b:b6:a1:8f:ec:af:\n26:47:8f:50:c0:54:f5:63:db:c0:a2:1e:26:15:72:aa",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 2,
      "text": "Poly1305 one-time key:\n000  bd f0 4a a9 5c e4 de 89 95 b1 4b b6 a1 8f ec af  ..J.\\.....K.....\n016  26 47 8f 50 c0 54 f5 63 db c0 a2 1e 26 15 72 aa  &G.P.T.c....&.r.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Next, we construct the AEAD buffer",
      "ja": "次に、AEADバッファーを作成します。"
    },
    {
      "indent": 2,
      "text": "Poly1305 Input:\n000  f3 33 88 86 00 00 00 00 00 00 4e 91 00 00 00 00  .3........N.....\n016  64 a0 86 15 75 86 1a f4 60 f0 62 c7 9b e6 43 bd  d...u...`.b...C.\n032  5e 80 5c fd 34 5c f3 89 f1 08 67 0a c7 6c 8c b2  ^.\\.4\\....g..l..\n048  4c 6c fc 18 75 5d 43 ee a0 9e e9 4e 38 2d 26 b0  Ll..u]C....N8-&.\n064  bd b7 b7 3c 32 1b 01 00 d4 f0 3b 7f 35 58 94 cf  ...<2.....;.5X..\n080  33 2f 83 0e 71 0b 97 ce 98 c8 a8 4a bd 0b 94 81  3/..q......J....\n096  14 ad 17 6e 00 8d 33 bd 60 f9 82 b1 ff 37 c8 55  ...n..3.`....7.U\n112  97 97 a0 6e f4 f0 ef 61 c1 86 32 4e 2b 35 06 38  ...n...a..2N+5.8\n128  36 06 90 7b 6a 7c 02 b0 f9 f6 15 7b 53 c8 67 e4  6..{j|.....{S.g.\n144  b9 16 6c 76 7b 80 4d 46 a5 9b 52 16 cd e7 a4 e9  ..lv{.MF..R.....\n160  90 40 c5 a4 04 33 22 5e e2 82 a1 b0 a0 6c 52 3e  .@...3\"^.....lR>\n176  af 45 34 d7 f8 3f a1 15 5b 00 47 71 8c bc 54 6a  .E4..?..[.Gq..Tj\n192  0d 07 2b 04 b3 56 4e ea 1b 42 22 73 f5 48 27 1a  ..+..VN..B\"s.H'.\n208  0b b2 31 60 53 fa 76 99 19 55 eb d6 31 59 43 4e  ..1`S.v..U..1YCN\n224  ce bb 4e 46 6d ae 5a 10 73 a6 72 76 27 09 7a 10  ..NFm.Z.s.rv'.z.\n240  49 e6 17 d9 1d 36 10 94 fa 68 f0 ff 77 98 71 30  I....6...h..w.q0\n256  30 5b ea ba 2e da 04 df 99 7b 71 4d 6c 6f 2c 29  0[.......{qMlo,)\n272  a6 ad 5c b4 02 2b 02 70 9b 00 00 00 00 00 00 00  ..\\..+.p........\n288  0c 00 00 00 00 00 00 00 09 01 00 00 00 00 00 00  ................",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "We calculate the Poly1305 tag and find that it matches",
      "ja": "Poly1305タグを計算し、それが一致することを確認します"
    },
    {
      "indent": 2,
      "text": "Calculated Tag:\n000  ee ad 9d 67 89 0c bb 22 39 23 36 fe a1 85 1f 38  ...g...\"9#6....8",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Finally, we decrypt the ciphertext",
      "ja": "最後に、暗号文を復号化します"
    },
    {
      "indent": 2,
      "text": "Plaintext::\n000  49 6e 74 65 72 6e 65 74 2d 44 72 61 66 74 73 20  Internet-Drafts\n016  61 72 65 20 64 72 61 66 74 20 64 6f 63 75 6d 65  are draft docume\n032  6e 74 73 20 76 61 6c 69 64 20 66 6f 72 20 61 20  nts valid for a\n048  6d 61 78 69 6d 75 6d 20 6f 66 20 73 69 78 20 6d  maximum of six m\n064  6f 6e 74 68 73 20 61 6e 64 20 6d 61 79 20 62 65  onths and may be\n080  20 75 70 64 61 74 65 64 2c 20 72 65 70 6c 61 63   updated, replac\n096  65 64 2c 20 6f 72 20 6f 62 73 6f 6c 65 74 65 64  ed, or obsoleted\n112  20 62 79 20 6f 74 68 65 72 20 64 6f 63 75 6d 65   by other docume\n128  6e 74 73 20 61 74 20 61 6e 79 20 74 69 6d 65 2e  nts at any time.\n144  20 49 74 20 69 73 20 69 6e 61 70 70 72 6f 70 72   It is inappropr\n160  69 61 74 65 20 74 6f 20 75 73 65 20 49 6e 74 65  iate to use Inte\n176  72 6e 65 74 2d 44 72 61 66 74 73 20 61 73 20 72  rnet-Drafts as r\n192  65 66 65 72 65 6e 63 65 20 6d 61 74 65 72 69 61  eference materia\n208  6c 20 6f 72 20 74 6f 20 63 69 74 65 20 74 68 65  l or to cite the\n224  6d 20 6f 74 68 65 72 20 74 68 61 6e 20 61 73 20  m other than as\n240  2f e2 80 9c 77 6f 72 6b 20 69 6e 20 70 72 6f 67  /...work in prog\n256  72 65 73 73 2e 2f e2 80 9d                       ress./...",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Appendix B. Performance Measurements of ChaCha20",
      "section_title": true,
      "ja": "付録B. ChaCha20のパフォーマンス測定"
    },
    {
      "indent": 3,
      "text": "The following measurements were made by Adam Langley for a blog post published on February 27th, 2014. The original blog post was available at the time of this writing at <https://www.imperialviolet.org/2014/02/27/tlssymmetriccrypto.html>.",
      "ja": "以下の測定値は、2014年2月27日に公開されたブログ投稿に対してAdam Langleyによって行われました。元のブログ投稿は、この記事の執筆時点で<https://www.imperialviolet.org/2014/02/27/tlssymmetriccryptoから入手できました。 .html>。"
    },
    {
      "indent": 5,
      "text": "+----------------------------+-------------+-------------------+\n| Chip                       | AES-128-GCM | ChaCha20-Poly1305 |\n+----------------------------+-------------+-------------------+\n| OMAP 4460                  |  24.1 MB/s  |     75.3 MB/s     |\n| Snapdragon S4 Pro          |  41.5 MB/s  |     130.9 MB/s    |\n| Sandy Bridge Xeon (AES-NI) |   900 MB/s  |      500 MB/s     |\n+----------------------------+-------------+-------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 25,
      "text": "Table 1: Speed Comparison",
      "ja": "表1：速度の比較"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "ChaCha20 and Poly1305 were invented by Daniel J. Bernstein. The AEAD construction and the method of creating the one-time Poly1305 key were invented by Adam Langley.",
      "ja": "ChaCha20とPoly1305はDaniel J. Bernsteinによって発明されました。 AEADの構造と、1回限りのPoly1305キーを作成する方法は、Adam Langleyによって発明されました。"
    },
    {
      "indent": 3,
      "text": "Thanks to Robert Ransom, Watson Ladd, Stefan Buhler, Dan Harkins, and Kenny Paterson for their helpful comments and explanations. Thanks to Niels Moller for suggesting the more efficient AEAD construction in this document. Special thanks to Ilari Liusvaara for providing extra test vectors, helpful comments, and for being the first to attempt an implementation from this document. Thanks to Sean Parkinson for suggesting improvements to the examples and the pseudocode. Thanks to David Ireland for pointing out a bug in the pseudocode, and to Stephen Farrell and Alyssa Rowan for pointing out missing advise in the security considerations.",
      "ja": "役立つコメントと説明を提供してくれたRobert Ransom、Watson Ladd、Stefan Buhler、Dan Harkins、およびKenny Patersonに感謝します。このドキュメントでより効率的なAEADの構築を提案してくれたNiels Mollerに感謝します。追加のテストベクトル、役立つコメントを提供してくれたこと、およびこのドキュメントの実装を最初に試みてくれたIlari Liusvaaraに特に感謝します。例と疑似コードの改善を提案してくれたSean Parkinsonに感謝します。疑似コードのバグを指摘してくれたDavid Irelandに、セキュリティの考慮事項に欠けているアドバイスを指摘してくれたStephen FarrellとAlyssa Rowanに感謝します。"
    },
    {
      "indent": 3,
      "text": "Special thanks goes to Gordon Procter for performing a security analysis of the composition and publishing [Procter].",
      "ja": "構成と公開のセキュリティ分析を実行してくれたGordon Procterに特に感謝します[Procter]。"
    },
    {
      "indent": 3,
      "text": "Jim Schaad and John Mattson provided feedback on tag truncation, and Russ Housley, Stanislav Smyshlyaev, and John Mattson each provided a review of this version.",
      "ja": "Jim SchaadとJohn Mattsonがタグの切り捨てについてフィードバックを提供し、Russ Housley、Stanislav Smyshlyaev、およびJohn Mattsonがそれぞれこのバージョンのレビューを提供しました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Yoav Nir Dell EMC 9 Andrei Sakharov St Haifa 3190500 Israel",
      "ja": "Yoav Nir ​​Dell EMC 9 Andrei Sakharov St Haifa 3190500 Israel"
    },
    {
      "indent": 3,
      "text": "Email: ynir.ietf@gmail.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Adam Langley Google, Inc.",
      "ja": "Adam Langley Google、Inc."
    },
    {
      "indent": 3,
      "text": "Email: agl@google.com",
      "raw": true,
      "ja": ""
    }
  ]
}