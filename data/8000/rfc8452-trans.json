{
  "title": {
    "text": "RFC 8452 - AES-GCM-SIV: Nonce Misuse-Resistant Authenticated Encryption",
    "ja": "RFC 8452 - AES-GCM-SIV：ノンス不正使用耐性認証暗号化"
  },
  "number": 8452,
  "created_at": "2020-08-23 12:38:31.772512+09:00",
  "updated_by": "自動生成(GPT)＆有志による翻訳・編集",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Research Task Force (IRTF)                            S. Gueron\nRequest for Comments: 8452                University of Haifa and Amazon\nCategory: Informational                                       A. Langley\nISSN: 2070-1721                                               Google LLC\n                                                              Y. Lindell\n                                    Bar-Ilan University and Unbound Tech\n                                                              April 2019",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "AES-GCM-SIV: Nonce Misuse-Resistant Authenticated Encryption",
      "ja": "AES-GCM-SIV：ノンス不正使用耐性認証暗号化"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This memo specifies two authenticated encryption algorithms that are nonce misuse resistant -- that is, they do not fail catastrophically if a nonce is repeated.",
      "ja": "このメモは、ノンスの誤用に耐性のある2つの認証済み暗号化アルゴリズムを指定します。"
    },
    {
      "indent": 3,
      "text": "This document is the product of the Crypto Forum Research Group.",
      "ja": "このドキュメントは、Crypto Forum Research Groupの製品です。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "ja": "本文書の状態"
    },
    {
      "indent": 3,
      "text": "This document is not an Internet Standards Track specification; it is published for informational purposes.",
      "ja": "このドキュメントはInternet Standards Trackの仕様ではありません。情報提供を目的として公開されています。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Research Task Force (IRTF). The IRTF publishes the results of Internet-related research and development activities. These results might not be suitable for deployment. This RFC represents the consensus of the Crypto Forum Research Group of the Internet Research Task Force (IRTF). Documents approved for publication by the IRSG are not candidates for any level of Internet Standard; see Section 2 of RFC 7841.",
      "ja": "この文書は、Internet Research Task Force（IRTF）の製品です。 IRTFは、インターネット関連の研究開発活動の結果を公開しています。これらの結果は、展開に適さない可能性があります。このRFCは、インターネット研究タスクフォース（IRTF）の暗号フォーラム研究グループの合意を表します。 IRSGによる公開が承認されたドキュメントは、どのレベルのインターネット標準の候補にもなりません。 RFC 7841のセクション2をご覧ください。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc8452.",
      "ja": "このドキュメントの現在のステータス、エラータ、およびフィードバックの提供方法に関する情報は、https://www.rfc-editor.org/info/rfc8452で入手できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2019 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "Copyright（c）2019 IETF Trustおよびドキュメントの作成者として識別された人物。全著作権所有。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document.",
      "ja": "この文書は、BCP 78およびIETF文書に関するIETFトラストの法的規定（https://trustee.ietf.org/license-info）の対象であり、この文書の発行日に有効です。これらのドキュメントは、このドキュメントに関するあなたの権利と制限を説明しているため、注意深く確認してください。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2\n2.  Requirements Language . . . . . . . . . . . . . . . . . . . .   3\n3.  POLYVAL . . . . . . . . . . . . . . . . . . . . . . . . . . .   3\n4.  Encryption  . . . . . . . . . . . . . . . . . . . . . . . . .   4\n5.  Decryption  . . . . . . . . . . . . . . . . . . . . . . . . .   7\n6.  AEADs . . . . . . . . . . . . . . . . . . . . . . . . . . . .  10\n7.  Field Operation Examples  . . . . . . . . . . . . . . . . . .  10\n8.  Worked Example  . . . . . . . . . . . . . . . . . . . . . . .  10\n9.  Security Considerations . . . . . . . . . . . . . . . . . . .  11\n10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  14\n11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  14\n  11.1.  Normative References . . . . . . . . . . . . . . . . . .  14\n  11.2.  Informative References . . . . . . . . . . . . . . . . .  15\nAppendix A.  The Relationship between POLYVAL and GHASH . . . . .  17\nAppendix B.  Additional Comparisons with AES-GCM  . . . . . . . .  19\nAppendix C.  Test Vectors . . . . . . . . . . . . . . . . . . . .  20\n  C.1.  AEAD_AES_128_GCM_SIV  . . . . . . . . . . . . . . . . . .  20\n  C.2.  AEAD_AES_256_GCM_SIV  . . . . . . . . . . . . . . . . . .  30\n  C.3.  Counter Wrap Tests  . . . . . . . . . . . . . . . . . . .  41\nAcknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  42\nAuthors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  42",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The concept of Authenticated Encryption with Additional Data (AEAD) [RFC5116] couples confidentiality and integrity in a single operation, avoiding the risks of the previously common practice of using ad hoc constructions of block-cipher and hash primitives. The most popular AEAD, AES-GCM [GCM], is seeing widespread use due to its attractive performance.",
      "ja": "Authenticated Encryption with Additional Data（AEAD）[RFC5116]のコンセプトは、単一の操作で機密性と完全性を結合し、ブロック暗号およびハッシュプリミティブのアドホック構造を使用する以前の一般的な手法のリスクを回避します。最も人気のあるAEADであるAES-GCM [GCM]は、その魅力的な性能により広く使用されています。"
    },
    {
      "indent": 3,
      "text": "However, some AEADs (including AES-GCM) suffer catastrophic failures of confidentiality and/or integrity when two distinct messages are encrypted with the same key and nonce. While the requirements for AEADs specify that the pair of (key, nonce) shall only ever be used once, and thus prohibit this, this is a worry in practice.",
      "ja": "しかし、一部のAEAD（AES-GCMを含む）では、2つの異なるメッセージを同じ鍵とノンスで暗号化すると、機密性または整合性に重大な障害が生じることがあります。AEADの要件では、鍵とノンスのペアは一度しか使用できないと規定されているため、このような使用は禁止されていますが、実際には懸念事項となります。"
    },
    {
      "indent": 3,
      "text": "Nonce misuse-resistant AEADs do not suffer from this problem. For this class of AEADs, encrypting two messages with the same nonce only discloses whether the messages were equal or not. This is the minimum amount of information that a deterministic algorithm can leak in this situation.",
      "ja": "ノンス悪用耐性を持つAEADは、この問題の影響を受けません。このクラスのAEADでは、2つのメッセージを同じノンスで暗号化しても、メッセージが同一かどうかしか分かりません。これは、この状況において決定論的アルゴリズムが漏洩できる最小限の情報量です。"
    },
    {
      "indent": 0,
      "text": " This memo specifies two nonce misuse-resistant AEADs: AEAD_AES_128_GCM_SIV and AEAD_AES_256_GCM_SIV. These AEADs are designed to be able to take advantage of existing hardware support for AES-GCM and can decrypt within 5% of the speed of AES-GCM (for multikilobyte messages). Encryption is, perforce, slower than AES-GCM, because two passes are required in order to achieve that nonce misuse-resistance property. However, measurements suggest that it can still run at two-thirds of the speed of AES-GCM.",
      "ja": "このメモでは、ノンス不正使用耐性を備えた2つのAEAD（AEAD_AES_128_GCM_SIVとAEAD_AES_256_GCM_SIV）について規定しています。これらのAEADは、AES-GCMの既存のハードウェアサポートを活用できるように設計されており、AES-GCMの速度の5%以内で復号できます（マルチキロバイトのメッセージの場合）。暗号化は、ノンス不正使用耐性を実現するために2回のパスが必要となるため、必然的にAES-GCMよりも遅くなります。しかしながら、測定結果によると、それでもAES-GCMの3分の2の速度で実行できることが示されています。"
    },
    {
      "indent": 3,
      "text": "We suggest that these AEADs be considered in any situation where nonce uniqueness cannot be guaranteed. This includes situations where there is no stateful counter or where such state cannot be guaranteed, as when multiple encryptors use the same key. As discussed in Section 9, it is RECOMMENDED to use this scheme with randomly chosen nonces.",
      "ja": "これらのAEADは、ノンスの一意性を保証できない状況で検討することをお勧めします。これには、ステートフルカウンターがない場合や、複数の暗号化機能が同じキーを使用する場合など、そのような状態を保証できない状況が含まれます。セクション9で説明したように、ランダムに選択されたノンスでこのスキームを使用することをお勧めします。"
    },
    {
      "indent": 3,
      "text": "This document represents the consensus of the Crypto Forum Research Group (CFRG).",
      "ja": "このドキュメントは、Crypto Forum Research Group（CFRG）のコンセンサスを表しています。"
    },
    {
      "indent": 0,
      "text": "2. Requirements Language",
      "section_title": true,
      "ja": "2. 要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、「OPTIONAL」は、BCP 14 [RFC2119] [RFC8174]で説明されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "3. POLYVAL",
      "section_title": true,
      "ja": "3. POLYVAL"
    },
    {
      "indent": 3,
      "text": "The GCM-SIV construction is similar to GCM: the block cipher is used in counter mode to encrypt the plaintext, and a polynomial authenticator is used to provide integrity. The authenticator in GCM-SIV is called POLYVAL.",
      "ja": "GCM-SIVの構造はGCMに似ています。ブロック暗号はカウンターモードで平文を暗号化するために使用され、整合性を保証するために多項式認証子が使用されます。GCM-SIVの認証子はPOLYVALと呼ばれます。"
    },
    {
      "indent": 3,
      "text": "POLYVAL, like GHASH (the authenticator in AES-GCM; see [GCM], Section 6.4), operates in a binary field of size 2^128. The field is defined by the irreducible polynomial x^128 + x^127 + x^126 + x^121 + 1. The sum of any two elements in the field is the result of XORing them. The product of any two elements is calculated using standard (binary) polynomial multiplication followed by reduction modulo the irreducible polynomial.",
      "ja": "POLYVALは、GHASH（AES-GCMの認証子。[GCM]、セクション6.4を参照）と同様に、サイズ2^128のバイナリフィールドで動作します。このフィールドは、既約多項式x^128 + x^127 + x^126 + x^121 + 1で定義されます。フィールド内の任意の2つの要素の和は、それらの排他的論理和（XOR）の結果です。任意の2つの要素の積は、標準的な（バイナリ）多項式の乗算と、その既約多項式を法とする縮約によって計算されます。"
    },
    {
      "indent": 3,
      "text": "We define another binary operation on elements of the field: dot(a, b), where dot(a, b) = a * b * x^-128. The value of the field element x^-128 is equal to x^127 + x^124 + x^121 + x^114 + 1. The result of this multiplication, dot(a, b), is another field element.",
      "ja": "体の元に対する別の二項演算 dot(a, b) を定義します。ここで dot(a, b) = a * b * x^-128 です。体の元 x^-128 の値は、x^127 + x^124 + x^121 + x^114 + 1 に等しくなります。この乗算の結果 dot(a, b) は、別の体の元です。"
    },
    {
      "indent": 3,
      "text": "Polynomials in this field are converted to and from 128-bit strings by taking the least significant bit of the first byte to be the coefficient of x^0, the most significant bit of the first byte to be the coefficient of x^7, and so on, until the most significant bit of the last byte is the coefficient of x^127.",
      "ja": "このフィールドの多項式は、最初のバイトの最下位ビットを x^0 の係数、最初のバイトの最上位ビットを x^7 の係数とし、最後のバイトの最上位ビットが x^127 の係数になるまで、128 ビット文字列との間で変換されます。"
    },
    {
      "indent": 3,
      "text": "POLYVAL takes a field element, H, and a series of field elements X_1, ..., X_s. Its result is S_s, where S is defined by the iteration S_0 = 0; S_j = dot(S_{j-1} + X_j, H), for j = 1..s.",
      "ja": "POLYVALは、体元Hと一連の体元X_1, ..., X_sを受け取ります。その結果はS_sです。ここでSは、S_0 = 0; S_j = dot(S_{j-1} + X_j, H)（j = 1..s）という反復によって定義されます。"
    },
    {
      "indent": 3,
      "text": "We note that POLYVAL(H, X_1, X_2, ...) is equal to ByteReverse(GHASH(ByteReverse(H) * x, ByteReverse(X_1), ByteReverse(X_2), ...)), where ByteReverse is a function that reverses the order of 16 bytes. See Appendix A for a more detailed explanation.",
      "ja": "POLYVAL(H, X_1, X_2, ...) は ByteReverse(GHASH(ByteReverse(H) * x, ByteReverse(X_1), ByteReverse(X_2), ...)) と等しいことに注意してください。ここで、ByteReverse は16バイトの順序を反転する関数です。詳細な説明は付録Aを参照してください。"
    },
    {
      "indent": 0,
      "text": "4. Encryption",
      "section_title": true,
      "ja": "4. 暗号化"
    },
    {
      "indent": 3,
      "text": "AES-GCM-SIV encryption takes a 16- or 32-byte key-generating key, a 96-bit nonce, and plaintext and additional data byte strings of variable length. It outputs an authenticated ciphertext that will be 16 bytes longer than the plaintext. Both encryption and decryption are only defined on inputs that are a whole number of bytes.",
      "ja": "AES-GCM-SIV暗号化には、16バイトまたは32バイトのキー生成キー、96ビットのノンス、およびプレーンテキストと可変長の追加のデータバイト文字列が必要です。プレーンテキストよりも16バイト長い認証済み暗号文を出力します。暗号化と復号化は両方とも、バイト数が整数である入力でのみ定義されます。"
    },
    {
      "indent": 3,
      "text": "If the key-generating key is 16 bytes long, then AES-128 is used throughout. Otherwise, AES-256 is used throughout.",
      "ja": "キー生成キーの長さが16バイトの場合、AES-128が全体で使用されます。それ以外の場合は、AES-256が全体で使用されます。"
    },
    {
      "indent": 3,
      "text": "The first step of encryption is to generate per-nonce, message-authentication and message-encryption keys. The message-authentication key is 128 bit, and the message-encryption key is either 128 (for AES-128) or 256 bit (for AES-256).",
      "ja": "暗号化の最初のステップは、nonce単位のメッセージ認証およびメッセージ暗号化鍵を生成することです。メッセージ認証キーは128ビットで、メッセージ暗号化キーは128（AES-128の場合）または256ビット（AES-256の場合）です。"
    },
    {
      "indent": 3,
      "text": "These keys are generated by encrypting a series of plaintext blocks that contain a 32-bit, little-endian counter followed by the nonce, and then discarding the second half of the resulting ciphertext. In the AES-128 case, 128 + 128 = 256 bits of key material need to be generated, and, since encrypting each block yields 64 bits after discarding half, four blocks need to be encrypted. The counter values for these blocks are 0, 1, 2, and 3. For AES-256, six blocks are needed in total, with counter values 0 through 5 (inclusive).",
      "ja": "これらの鍵は、32ビットのリトルエンディアンカウンターとそれに続くノンスを含む一連の平文ブロックを暗号化し、結果の暗号文の後半を破棄することによって生成されます。 AES-128の場合、128 + 128 = 256ビットの鍵素材を生成する必要があり、各ブロックを暗号化すると半分を破棄した後に64ビットになるため、4つのブロックを暗号化する必要があります。これらのブロックのカウンター値は0、1、2、3です。AES-256の場合、カウンター値が0〜5（両端を含む）の合計6つのブロックが必要です。"
    },
    {
      "indent": 3,
      "text": "In pseudocode form, where \"++\" indicates concatenation and \"x[:8]\" indicates taking only the first eight bytes from x:",
      "ja": "擬似コード形式では、「++」は連結を示し、「x[:8]」はxから最初の8バイトのみを取得することを示します。"
    },
    {
      "indent": 3,
      "text": "func derive_keys(key_generating_key, nonce) {\n  message_authentication_key =\n      AES(key = key_generating_key,\n          block = little_endian_uint32(0) ++ nonce)[:8] ++\n      AES(key = key_generating_key,\n          block = little_endian_uint32(1) ++ nonce)[:8]\n  message_encryption_key =\n      AES(key = key_generating_key,\n          block = little_endian_uint32(2) ++ nonce)[:8] ++\n      AES(key = key_generating_key,\n          block = little_endian_uint32(3) ++ nonce)[:8]\n\n  if bytelen(key_generating_key) == 32 {\n    message_encryption_key ++=\n        AES(key = key_generating_key,\n            block = little_endian_uint32(4) ++ nonce)[:8] ++\n        AES(key = key_generating_key,\n            block = little_endian_uint32(5) ++ nonce)[:8]\n  }\n\n  return message_authentication_key, message_encryption_key\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Define the \"length block\" as a 16-byte value that is the concatenation of the 64-bit, little-endian encodings of bytelen(additional_data) * 8 and bytelen(plaintext) * 8. Pad the plaintext and additional data with zeros until they are each a multiple of 16 bytes, the AES block size. Then X_1, X_2, ... (the series of field elements that are inputs to POLYVAL) are the concatenation of the padded additional data, the padded plaintext, and the length block.",
      "ja": "「長さブロック」を、64ビットのリトルエンディアン符号化であるbytelen(追加データ) * 8とbytelen(平文) * 8を連結した16バイトの値として定義します。平文と追加データは、それぞれがAESブロックサイズである16バイトの倍数になるまでゼロで埋められます。そして、X_1、X_2、…（POLYVALへの入力となるフィールド要素の列）は、埋められた追加データ、埋められた平文、および長さブロックを連結したものになります。"
    },
    {
      "indent": 3,
      "text": "Calculate S_s = POLYVAL(message-authentication-key, X_1, X_2, ...). XOR the first twelve bytes of S_s with the nonce and clear the most significant bit of the last byte. Encrypt the result with AES using the message-encryption key to produce the tag.",
      "ja": "S_s = POLYVAL(メッセージ認証キー, X_1, X_2, ...) を計算します。S_s の最初の12バイトとノンスをXORし、最後のバイトの最上位ビットをクリアします。結果をメッセージ暗号化キーを用いてAESで暗号化し、タグを生成します。"
    },
    {
      "indent": 3,
      "text": "(It's worth highlighting a contrast with AES-GCM here: AES-GCM authenticates the encoded additional data and ciphertext, while AES-GCM-SIV authenticates the encoded additional data and plaintext.)",
      "ja": "（ここでAES-GCMとの対比を強調することは価値があります：AES-GCM-SIVがエンコードされた追加データとプレーンテキストを認証する一方で、AES-GCMはエンコードされた追加データと暗号文を認証します。）"
    },
    {
      "indent": 0,
      "text": " The encrypted plaintext is produced by using AES, with the message-encryption key, in counter mode (see [SP800-38A], Section 6.5) on the unpadded plaintext. The initial counter block is the tag with the most significant bit of the last byte set to one. The counter advances by incrementing the first 32 bits interpreted as an unsigned, little-endian integer, wrapping at 2^32. The result of the encryption is the encrypted plaintext (truncated to the length of the plaintext), followed by the tag.",
      "ja": "暗号化された平文は、メッセージ暗号化キーを使用して、カウンターモード（[SP800-38A]、セクション6.5を参照）でAESを使用し、パディングされていない平文で生成されます。最初のカウンターブロックは、最後のバイトの最上位ビットが1に設定されたタグです。カウンターは、符号なしのリトルエンディアン整数として解釈される最初の32ビットをインクリメントし、2^32でラップして進みます。暗号化の結果は、暗号化された平文（平文の長さに切り捨てられた）であり、その後にタグが続きます。"
    },
    {
      "indent": 3,
      "text": "In pseudocode form, the encryption process can be expressed as:",
      "ja": "擬似コード形式では、暗号化プロセスは次のように表すことができます。"
    },
    {
      "indent": 3,
      "text": "func right_pad_to_multiple_of_16_bytes(input) {\n  while (bytelen(input) % 16 != 0) {\n    input = input ++ \"\\x00\"\n  }\n  return input\n}\n\nfunc AES_CTR(key, initial_counter_block, in) {\n  block = initial_counter_block\n\n  output = \"\"\n  while bytelen(in) > 0 {\n    keystream_block = AES(key = key, block = block)\n    block[0:4] = little_endian_uint32(\n        read_little_endian_uint32(block[0:4]) + 1)\n\n    todo = min(bytelen(in), bytelen(keystream_block)\n    for j = 0; j < todo; j++ {\n      output = output ++ (keystream_block[j] ^ in[j])\n    }\n\n    in = in[todo:]\n  }\n\n  return output\n}\n\nfunc encrypt(key_generating_key,\n             nonce,\n             plaintext,\n             additional_data) {\n  if bytelen(plaintext) > 2^36 {\n    fail()\n  }\n  if bytelen(additional_data) > 2^36 {\n    fail()\n  }\n\n  message_encryption_key, message_authentication_key =\n      derive_keys(key_generating_key, nonce)\n  length_block =\n      little_endian_uint64(bytelen(additional_data) * 8) ++\n      little_endian_uint64(bytelen(plaintext) * 8)\n  padded_plaintext = right_pad_to_multiple_of_16_bytes(plaintext)\n  padded_ad = right_pad_to_multiple_of_16_bytes(additional_data)\n  S_s = POLYVAL(key = message_authentication_key,\n                input = padded_ad ++ padded_plaintext ++\n                        length_block)\n  for i = 0; i < 12; i++ {\n    S_s[i] ^= nonce[i]\n  }\n  S_s[15] &= 0x7f\n  tag = AES(key = message_encryption_key, block = S_s)\n\n  counter_block = tag\n  counter_block[15] |= 0x80\n  return AES_CTR(key = message_encryption_key,\n                 initial_counter_block = counter_block,\n                 in = plaintext) ++\n         tag\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "5. Decryption",
      "section_title": true,
      "ja": "5. 復号"
    },
    {
      "indent": 3,
      "text": "Decryption takes a 16- or 32-byte key-generating key, a 96-bit nonce, and ciphertext and additional data byte strings of variable length. It either fails or outputs a plaintext that is 16 bytes shorter than the ciphertext.",
      "ja": "復号化には、16バイトまたは32バイトのキー生成キー、96ビットのノンス、および暗号文と可変長の追加のデータバイト文字列が必要です。失敗するか、暗号文より16バイト短い平文を出力します。"
    },
    {
      "indent": 3,
      "text": "To decrypt an AES-GCM-SIV ciphertext, first derive the message-encryption and message-authentication keys in the same manner as when encrypting.",
      "ja": "AES-GCM-SIV暗号文を復号化するには、まず、暗号化時と同じ方法でメッセージ暗号化キーとメッセージ認証キーを導出します。"
    },
    {
      "indent": 3,
      "text": "If the ciphertext is less than 16 bytes or more than 2^36 + 16 bytes, then fail. Otherwise, split the input into the encrypted plaintext and a 16-byte tag. Decrypt the encrypted plaintext with the message-encryption key in counter mode, where the initial counter block is the tag with the most significant bit of the last byte set to one. Advance the counter for each block in the same way as when encrypting. At this point, the plaintext is unauthenticated and MUST NOT be output until the following tag confirmation is complete:",
      "ja": "暗号文が16バイト未満または2^36 + 16バイトを超える場合、失敗します。それ以外の場合は、入力を暗号化された平文と16バイトのタグに分割します。カウンターモードでメッセージ暗号化キーを使用して暗号化された平文を復号化します。最初のカウンターブロックは、最後のバイトの最上位ビットが1に設定されたタグです。暗号化時と同じ方法で、各ブロックのカウンターを進めます。この時点では、平文は認証されておらず、次のタグの確認が完了するまで出力してはなりません。"
    },
    {
      "indent": 0,
      "text": " Pad the additional data and plaintext with zeros until they are each a multiple of 16 bytes, the AES block size. Calculate the length block and X_1, X_2, ... as above and compute S_s = POLYVAL(message-authentication-key, X_1, X_2, ...) Compute the expected tag by XORing S_s and the nonce, clearing the most significant bit of the last byte and encrypting with the message-encryption key. Compare the provided and expected tag values in constant time. Fail the decryption if they do not match (and do not release the plaintext); otherwise, return the plaintext.",
      "ja": "追加のデータとプレーンテキストを、それぞれが16バイトの倍数、AESブロックサイズになるまでゼロでパディングします。上記のように長さブロックとX_1、X_2、...を計算し、S_s = POLYVAL（message-authentication-key、X_1、X_2、...）を計算します。最後のバイトの暗号化とメッセージ暗号化キーによる暗号化。提供されたタグ値と期待されるタグ値を一定の時間で比較します。それらが一致しない場合（および平文を解放しない場合）は、復号化に失敗します。それ以外の場合は、平文を返します。"
    },
    {
      "indent": 3,
      "text": "In pseudocode form, the decryption process can be expressed as:",
      "ja": "疑似コード形式では、復号化プロセスは次のように表現できます。"
    },
    {
      "indent": 3,
      "text": "func decrypt(key_generating_key,\n             nonce,\n             ciphertext,\n             additional_data) {\n  if bytelen(ciphertext) < 16 || bytelen(ciphertext) > 2^36 + 16 {\n    fail()\n  }\n  if bytelen(additional_data) > 2^36 {\n    fail()\n  }\n\n  message_encryption_key, message_authentication_key =\n      derive_keys(key_generating_key, nonce)\n\n  tag = ciphertext[bytelen(ciphertext)-16:]\n\n  counter_block = tag\n  counter_block[15] |= 0x80\n  plaintext = AES_CTR(key = message_encryption_key,\n                      initial_counter_block = counter_block,\n                      in = ciphertext[:bytelen(ciphertext)-16])\n\n  length_block =\n      little_endian_uint64(bytelen(additional_data) * 8) ++\n      little_endian_uint64(bytelen(plaintext) * 8)\n  padded_plaintext = right_pad_to_multiple_of_16_bytes(plaintext)\n  padded_ad = right_pad_to_multiple_of_16_bytes(additional_data)\n  S_s = POLYVAL(key = message_authentication_key,\n                input = padded_ad ++ padded_plaintext ++\n                        length_block)\n  for i = 0; i < 12; i++ {\n    S_s[i] ^= nonce[i]\n  }\n  S_s[15] &= 0x7f\n  expected_tag = AES(key = message_encryption_key, block = S_s)\n\n  xor_sum = 0\n  for i := 0; i < bytelen(expected_tag); i++ {\n    xor_sum |= expected_tag[i] ^ tag[i]\n  }\n\n  if xor_sum != 0 {\n    fail()\n  }\n\n  return plaintext\n}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "6. AEADs",
      "section_title": true,
      "ja": "6. AEAD"
    },
    {
      "indent": 3,
      "text": "We define two AEADs, in the format of RFC 5116, that use AES-GCM-SIV: AEAD_AES_128_GCM_SIV and AEAD_AES_256_GCM_SIV. They differ only in the size of the AES key used.",
      "ja": "RFC 5116の形式で、AES-GCM-SIVを使用する2つのAEADを定義します：AEAD_AES_128_GCM_SIVとAEAD_AES_256_GCM_SIV。使用されるAESキーのサイズのみが異なります。"
    },
    {
      "indent": 3,
      "text": "The key input to these AEADs becomes the key-generating key. Thus, AEAD_AES_128_GCM_SIV takes a 16-byte key and AEAD_AES_256_GCM_SIV takes a 32-byte key.",
      "ja": "これらのAEADへのキー入力は、キー生成キーになります。したがって、AEAD_AES_128_GCM_SIVは16バイトのキーを受け取り、AEAD_AES_256_GCM_SIVは32バイトのキーを受け取ります。"
    },
    {
      "indent": 3,
      "text": "The parameters for AEAD_AES_128_GCM_SIV are then as follows: K_LEN is 16, P_MAX is 2^36, A_MAX is 2^36, N_MIN and N_MAX are 12, and C_MAX is 2^36 + 16.",
      "ja": "AEAD_AES_128_GCM_SIVのパラメーターは次のとおりです。K_LENは16、P_MAXは2^36、A_MAXは2^36、N_MINとN_MAXは12、C_MAXは2^36 + 16です。"
    },
    {
      "indent": 3,
      "text": "The parameters for AEAD_AES_256_GCM_SIV differ only in the key size: K_LEN is 32, P_MAX is 2^36, A_MAX is 2^36, N_MIN and N_MAX are 12, and C_MAX is 2^36 + 16.",
      "ja": "AEAD_AES_256_GCM_SIVのパラメーターは、キーサイズのみが異なります。K_LENは32、P_MAXは2^36、A_MAXは2^36、N_MINとN_MAXは12、C_MAXは2^36 + 16です。"
    },
    {
      "indent": 0,
      "text": "7. Field Operation Examples",
      "section_title": true,
      "ja": "7. フィールド操作の例"
    },
    {
      "indent": 3,
      "text": "Polynomials in this document will be written as 16-byte values. For example, the sixteen bytes 01000000000000000000000000000492 would represent the polynomial x^127 + x^124 + x^121 + x^114 + 1, which is also the value of x^-128 in this field.",
      "ja": "このドキュメントの多項式は、16バイトの値として書き込まれます。たとえば、16バイトの01000000000000000000000000000492は、多項式x^127 + x^124 + x^121 + x^114 + 1を表します。これは、このフィールドのx^-128の値でもあります。"
    },
    {
      "indent": 4,
      "text": "  If a = 66e94bd4ef8a2c3b884cfa59ca342b2e and\n     b = ff000000000000000000000000000000,\nthen a + b = 99e94bd4ef8a2c3b884cfa59ca342b2e,\n     a * b = 37856175e9dc9df26ebc6d6171aa0ae9, and\n     dot(a, b) = ebe563401e7e91ea3ad6426b8140c394.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "8. Worked Example",
      "section_title": true,
      "ja": "8. 実施例"
    },
    {
      "indent": 3,
      "text": "Consider the encryption of the plaintext \"Hello world\" with the additional data \"example\" under key ee8e1ed9ff2540ae8f2ba9f50bc2f27c using AEAD_AES_128_GCM_SIV. The random nonce that we'll use for this example is 752abad3e0afb5f434dc4310.",
      "ja": "AEAD_AES_128_GCM_SIVを使用して、キーee8e1ed9ff2540ae8f2ba9f50bc2f27cの下に「example」という追加データを含む平文「Hello world」の暗号化を検討してください。この例で使用するランダムなノンスは752abad3e0afb5f434dc4310です。"
    },
    {
      "indent": 3,
      "text": "In order to generate the message-authentication and message-encryption keys, a counter is combined with the nonce to form four blocks. These blocks are encrypted with the key given above:",
      "ja": "メッセージ認証およびメッセージ暗号化キーを生成するために、カウンターはノンスと結合されて4つのブロックを形成します。これらのブロックは、上記のキーで暗号化されています。"
    },
    {
      "indent": 3,
      "text": "Counter |       Nonce                         Ciphertext\n00000000752abad3e0afb5f434dc4310 -> 310728d9911f1f38c40e952ca83d093e\n01000000752abad3e0afb5f434dc4310 -> 37b24316c3fab9a046ae90952daa0450\n02000000752abad3e0afb5f434dc4310 -> a4c5ae624996327947920b2d2412474b\n03000000752abad3e0afb5f434dc4310 -> c100be4d7e2c6edd1efef004305ab1e7",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The length block contains the encoding of the bit lengths of the additional data and plaintext, respectively. The string \"example\" is seven characters, thus 56 bits (or 0x38 in hex). The string \"Hello world\" is 11 characters, or 88 = 0x58 bits. Thus, the length block is 38000000000000005800000000000000.",
      "ja": "長さブロックには、それぞれ追加データとプレーンテキストのビット長のエンコーディングが含まれています。文字列「example」は7文字なので、56ビット（16進数では0x38）です。文字列「Hello world」は11文字、つまり88 = 0x58ビットです。したがって、ブロック長は38000000000000005800000000000000です。"
    },
    {
      "indent": 3,
      "text": "The input to POLYVAL is the padded additional data, padded plaintext, and then the length block. This is 6578616d706c650000000000000000004 8656c6c6f20776f726c64000000000038000000000000005800000000000000, based on the ASCII encoding of \"example\" (6578616d706c65) and \"Hello world\" (48656c6c6f20776f726c64).",
      "ja": "POLYVALへの入力は、パディングされた追加データ、パディングされたプレーンテキスト、そして長さブロックです。これは6578616d706c650000000000000000004 8656c6c6f20776f726c64000000000038000000000000005800000000000000で、「example」（6578616d706c65）と「Hello world」（48656c6c6f20776f726c64）のASCIIエンコーディングに基づいています。"
    },
    {
      "indent": 3,
      "text": "Calling POLYVAL with the message-authentication key and the input above results in S_s = ad7fcf0b5169851662672f3c5f95138f.",
      "ja": "メッセージ認証キーと上記の入力を使用してPOLYVALを呼び出すと、S_s = ad7fcf0b5169851662672f3c5f95138fになります。"
    },
    {
      "indent": 3,
      "text": "Before encrypting, the nonce is XORed in and the most significant bit of the last byte is cleared. This gives d85575d8b1c630e256bb6c2c5f95130f, because that bit happened to be one previously. Encrypting with the message-encryption key (using AES-128) gives the tag, which is 4fbcdeb7e4793f4a1d7e4faa70100af1.",
      "ja": "暗号化する前に、ノンスがXORされ、最後のバイトの最上位ビットがクリアされます。これにより、d85575d8b1c630e256bb6c2c5f95130fが生成されます。これは、そのビットが偶然以前にあったためです。メッセージ暗号化キー（AES-128を使用）で暗号化すると、タグ（4fbcdeb7e4793f4a1d7e4faa70100af1）が得られます。"
    },
    {
      "indent": 3,
      "text": "In order to form the initial counter block, the most significant bit of the last byte of the tag is set to one. That doesn't result in a change in this example. Encrypting this with the message key (using AES-128) gives the first block of the keystream: 1551f2c1787e81deac9a99f139540ab5.",
      "ja": "初期カウンターブロックを形成するために、タグの最後のバイトの最上位ビットが1に設定されます。この例では変更はありません。これをメッセージキーで暗号化すると（AES-128を使用）、キーストリームの最初のブロック1551f2c1787e81deac9a99f139540ab5が得られます。"
    },
    {
      "indent": 3,
      "text": "The final ciphertext is the result of XORing the plaintext with the keystream and appending the tag. That gives 5d349ead175ef6b1def6fd4fbcdeb7e4793f4a1d7e4faa70100af1.",
      "ja": "最終的な暗号文は、平文とキーストリームのXORとタグの付加の結果です。これにより、5d349ead175ef6b1def6fd4fbcdeb7e4793f4a1d7e4faa70100af1が得られます。"
    },
    {
      "indent": 0,
      "text": "9. Security Considerations",
      "section_title": true,
      "ja": "9. セキュリティに関する考慮事項"
    },
    {
      "indent": 0,
      "text": " AES-GCM-SIV decryption involves first producing an unauthenticated plaintext. This plaintext is vulnerable to manipulation by an attacker; thus, if an implementation released some or all of the plaintext before authenticating it, other parts of a system may process malicious data as if it were authentic. AES-GCM might be less likely to lead implementations to do this because there the ciphertext is generally authenticated before, or concurrently with, the plaintext calculation. Therefore, this text requires that implementations MUST NOT release unauthenticated plaintext. Thus, system designers should consider memory limitations when picking the size of AES-GCM-SIV plaintexts: large plaintexts may not fit in the available memory of some machines, tempting implementations to release unverified plaintext.",
      "ja": "AES-GCM-SIV復号化では、最初に認証されていない平文を生成します。この平文は、攻撃者による操作に対して脆弱です。したがって、実装が認証の前に平文の一部またはすべてをリリースした場合、システムの他の部分が悪意のあるデータを本物であるかのように処理する可能性があります。 AES-GCMは、暗号文が通常は平文の計算の前または同時に認証されるため、実装がこれを行う可能性が低くなる可能性があります。したがって、このテキストは、実装が認証されていない平文をリリースしてはならないことを要求します。したがって、システム設計者は、AES-GCM-SIVプレーンテキストのサイズを選択するときにメモリの制限を考慮する必要があります。大きなプレーンテキストは、一部のマシンの使用可能なメモリに収まらない可能性があり、検証されていないプレーンテキストをリリースするように誘惑します。"
    },
    {
      "indent": 3,
      "text": "A detailed cryptographic analysis of AES-GCM-SIV appears in [AES-GCM-SIV], and the remainder of this section is a summary of that paper.",
      "ja": "AES-GCM-SIVの詳細な暗号分析は[AES-GCM-SIV]にあり、このセクションの残りの部分はその論文の要約です。"
    },
    {
      "indent": 3,
      "text": "The AEADs defined in this document calculate fresh AES keys for each nonce. This allows a larger number of plaintexts to be encrypted under a given key. Without this step, AES-GCM-SIV encryption would be limited by the birthday bound like other standard modes (e.g., AES-GCM, AES-CCM [RFC3610], and AES-SIV [RFC5297]). This means that when 2^64 blocks have been encrypted overall, a distinguishing adversary who is trying to break the confidentiality of the scheme has an advantage of 1/2. Thus, in order to limit the adversary's advantage to 2^-32, at most 2^48 blocks can be encrypted overall. In contrast, by deriving fresh keys from each nonce, it is possible to encrypt a far larger number of messages and blocks with AES-GCM-SIV.",
      "ja": "このドキュメントで定義されているAEADは、ノンスごとに新しいAESキーを計算します。これにより、より多くのプレーンテキストを特定のキーで暗号化できます。この手順がないと、AES-GCM-SIV暗号化は、他の標準モード（AES-GCM、AES-CCM [RFC3610]、AES-SIV [RFC5297]など）と同様に、誕生日の範囲によって制限されます。これは、2^64ブロックが全体的に暗号化されている場合、スキームの機密性を破ろうとする著名な敵が1/2の利点を持つことを意味します。したがって、攻撃者の利点を2^-32に制限するために、最大で2^48ブロックを全体的に暗号化できます。対照的に、各ノンスから新しいキーを導出することにより、AES-GCM-SIVを使用して、はるかに多くのメッセージとブロックを暗号化することが可能です。"
    },
    {
      "indent": 3,
      "text": "We stress that nonce misuse-resistant schemes guarantee that if a nonce repeats, then the only security loss is that identical plaintexts will produce identical ciphertexts. Since this can also be a concern (as the fact that the same plaintext has been encrypted twice is revealed), we do not recommend using a fixed nonce as a policy. In addition, as we show below, better-than-birthday bounds are achieved by AES-GCM-SIV when the nonce repetition rate is low. Finally, as shown in [BHT18], there is a great security benefit in the multiuser/multikey setting when each particular nonce is reused by a small number of users only. We stress that the nonce misuse-resistance property is not intended to be coupled with intentional nonce reuse; rather, such schemes provide the best possible security in the event of nonce reuse. Due to all of the above, it is RECOMMENDED that AES-GCM-SIV nonces be randomly generated.",
      "ja": "nonceの誤用耐性のあるスキームは、nonceが繰り返された場合に、唯一のセキュリティ損失は、同一の平文が同一の暗号文を生成することを保証することを強調します。これも問題になる可能性があるため（同じ平文が2回暗号化されているという事実が明らかになるため）、固定ノンスをポリシーとして使用することはお勧めしません。さらに、以下に示すように、ノンス反復率が低い場合、AES-GCM-SIVによって誕生日より良い境界が達成されます。最後に、[BHT18]に示すように、特定の各ノンスが少数のユーザーのみによって再利用される場合、マルチユーザー/マルチキー設定には大きなセキュリティ上の利点があります。 nonceの誤用耐性プロパティは、意図的なnonceの再利用と組み合わせることを意図したものではないことを強調します。むしろ、そのようなスキームはnonceの再利用の場合に可能な限り最高のセキュリティを提供します。上記のすべてが原因で、AES-GCM-SIV nonceがランダムに生成されることが推奨されます。"
    },
    {
      "indent": 3,
      "text": "Some example usage bounds for AES-GCM-SIV are given below. The adversary's advantage is the \"AdvEnc\" from [key-derive] and is colloquially the ability of an attacker to distinguish ciphertexts from random bit strings. The bounds below limit this advantage to 2^-32. For up to 256 uses of the same nonce and key (i.e., where one can assume that nonce misuse is no more than this bound), the following message limits should be respected (this assumes a short additional authenticated data (AAD), i.e., less than 64 bytes):",
      "ja": "AES-GCM-SIVの使用範囲の例を以下に示します。攻撃者の利点は、[key-derive]の「AdvEnc」であり、口語的には攻撃者が暗号文をランダムなビット文字列から区別する能力です。以下の境界は、この利点を2^-32に制限します。同じノンスとキーを最大256回使用する場合（つまり、ノンスの誤用がこの範囲以下であると想定できる場合）、次のメッセージ制限を尊重する必要があります（これは、短い追加の認証済みデータ（AAD）を想定しています）。 64バイト未満）："
    },
    {
      "indent": 6,
      "text": "2^29 messages, where each plaintext is at most 1 GiB",
      "ja": "2^29メッセージ、各平文は最大1 GiB"
    },
    {
      "indent": 0,
      "text": " 2^35 messages, where each plaintext is at most 128 MiB 2^49 messages, where each plaintext is at most 1 MiB",
      "ja": "各プレーンテキストが最大128 MiBである2^35メッセージ、各プレーンテキストが最大1 MiBである2^49メッセージ"
    },
    {
      "indent": 6,
      "text": "2^61 messages, where each plaintext is at most 16 KiB",
      "ja": "2^61メッセージ、各プレーンテキストは最大16 KiB"
    },
    {
      "indent": 3,
      "text": "Suzuki et al. [multi-birthday] show that even if nonces are selected uniformly at random, the probability that one or more values would be repeated 256 or more times is negligible until the number of nonces reaches 2^102. (Specifically, the probability is 1/((2^96)^(255)) * Binomial(q, 256), where q is the number of nonces.) Since 2^102 is vastly greater than the limit on the number of plaintexts per key given above, we don't feel that this limit on the number of repeated nonces will be a problem. This also means that selecting nonces at random is a safe practice with AES-GCM-SIV. The bounds obtained for random nonces are as follows (as above, for these bounds, the adversary's advantage is at most 2^-32):",
      "ja": "鈴木ほか[複数の誕生日]は、ノンスがランダムに均一に選択された場合でも、1つ以上の値が256回以上繰り返される確率は、ノンスの数が2^102に達するまで無視できることを示しています。 （具体的には、確率は1 /（（2^96）^（255））* Binomial（q、256）です。ここで、qはノンスの数です。）2^102は、上記で与えられたキーごとの平文では、繰り返されるノンスの数のこの制限が問題になるとは思われません。これはまた、ランダムにノンスを選択することが、AES-GCM-SIVで安全な方法であることを意味します。ランダムなノンスで得られる境界は次のとおりです（上記のように、これらの境界では、敵の利点は最大で2^-32です）。"
    },
    {
      "indent": 6,
      "text": "2^32 messages, where each plaintext is at most 8 GiB",
      "ja": "2^32メッセージ、各平文は最大8 GiB"
    },
    {
      "indent": 6,
      "text": "2^48 messages, where each plaintext is at most 32 MiB",
      "ja": "2^48メッセージ、各平文は最大32 MiB"
    },
    {
      "indent": 6,
      "text": "2^64 messages, where each plaintext is at most 128 KiB",
      "ja": "2^64メッセージ、各平文は最大128 KiB"
    },
    {
      "indent": 3,
      "text": "For situations where, for some reason, an even higher number of nonce repeats is possible (e.g., in devices with very poor randomness), the message limits need to be reconsidered. Theorem 7 in [AES-GCM-SIV] contains more details, but for up to 1,024 repeats of each nonce, the limits would be (again assuming a short AAD, i.e., less than 64 bytes):",
      "ja": "なんらかの理由でさらに多くのノンスリピートが可能な状況（たとえば、ランダム性が非常に低いデバイス）では、メッセージの制限を再検討する必要があります。 [AES-GCM-SIV]の定理7には詳細が含まれていますが、各ノンスの最大1,024回の繰り返しの場合、制限は次のようになります（ここでも、短いAAD、つまり64バイト未満を想定しています）。"
    },
    {
      "indent": 6,
      "text": "2^25 messages, where each plaintext is at most 1 GiB",
      "ja": "2^25メッセージ、各平文は最大1 GiB"
    },
    {
      "indent": 6,
      "text": "2^31 messages, where each plaintext is at most 128 MiB",
      "ja": "2^31メッセージ、各平文は最大128 MiB"
    },
    {
      "indent": 6,
      "text": "2^45 messages, where each plaintext is at most 1 MiB",
      "ja": "2^45メッセージ、各プレーンテキストは最大1 MiB"
    },
    {
      "indent": 6,
      "text": "2^57 messages, where each plaintext is at most 16 KiB",
      "ja": "2^57メッセージ、各平文は最大16 KiB"
    },
    {
      "indent": 0,
      "text": " In addition to calculating fresh AES keys for each nonce, these AEADs also calculate fresh POLYVAL keys. Previous versions of GCM-SIV did not do this and instead used part of the AEAD's key as the POLYVAL key. Bleichenbacher pointed out [Bleichenbacher16] that this allowed an attacker who controlled the AEAD key to force the POLYVAL key to be zero. If a user of this AEAD authenticated messages with a secret additional-data value, then this would be insecure as the attacker could calculate a valid authenticator without knowing the input. This does not violate the standard properties of an AEAD as the additional data is not assumed to be confidential. However, we want these AEADs to be robust against plausible misuse and also to be drop-in replacements for AES-GCM and so derive nonce-specific POLYVAL keys to avoid this issue.",
      "ja": "各ノンスの新しいAESキーを計算することに加えて、これらのAEADは新しいPOLYVALキーも計算します。以前のバージョンのGCM-SIVはこれを行わず、代わりにAEADのキーの一部をPOLYVALキーとして使用していました。 Bleichenbacherさんは、これにより、AEADキーを制御する攻撃者がPOLYVALキーを強制的に0にできることを指摘しました[Bleichenbacher16]。このAEADのユーザーが秘密の追加データ値でメッセージを認証した場合、攻撃者が入力を知らなくても有効な認証子を計算できるため、これは安全ではありません。追加のデータは機密であると想定されていないため、これはAEADの標準プロパティに違反しません。ただし、これらのAEADは、ありそうな誤用に対してロバストであり、AES-GCMのドロップイン代替品であり、ノンス固有のPOLYVALキーを導出して、この問題を回避することを望んでいます。"
    },
    {
      "indent": 3,
      "text": "We also wish to note that the probability of successful forgery increases with the number of attempts that an attacker is permitted. The advantage defined in [key-derive] and used above is specified in terms of the ability of an attacker to distinguish ciphertexts from random bit strings. It thus covers both confidentiality and integrity, and Theorem 6.2 in [key-derive] shows that the advantage increases with the number of decryption attempts, although much more slowly than with the number of encryptions; the dependence on the number of decryption queries for forgery is actually only linear, not quadratic. The latter is an artifact of the bound in the paper not being tight. If an attacker is permitted extremely large numbers of attempts, then the tiny probability that any given attempt succeeds may sum to a non-trivial chance.",
      "ja": "また、攻撃者が許可された試行回数に応じて、偽造が成功する確率が高くなることにも注意してください。 [key-derive]で定義され、上記で使用された利点は、攻撃者が暗号文をランダムなビット文字列から区別する能力に関して指定されています。したがって、機密性と整合性の両方をカバーします。[key-derive]の定理6.2は、暗号化の数よりもはるかにゆっくりですが、復号化の試行回数とともに利点が増加することを示しています。偽造の復号化クエリの数への依存は、実際には線形であり、二次ではありません。後者は、紙の境界がきつすぎないことによるアーチファクトです。攻撃者が非常に多くの試行を許可されている場合、任意の試行が成功する小さな確率は、合計して取るに足らない可能性があります。"
    },
    {
      "indent": 3,
      "text": "A security analysis of a similar scheme without nonce-based key derivation appears in [GCM-SIV], and a full analysis of the bounds when applying nonce-based key derivation appears in [key-derive]. A larger table of bounds and other information appears at [aes-gcm-siv-homepage].",
      "ja": "nonceベースの鍵導出のない同様のスキームのセキュリティ分析は[GCM-SIV]に表示され、nonceベースの鍵導出を適用するときの境界の完全な分析は[key-derive]に表示されます。 [aes-gcm-siv-homepage]に、境界とその他の情報の大きな表が表示されます。"
    },
    {
      "indent": 3,
      "text": "The multiuser/multikey security of AES-GCM-SIV was studied by [BHT18], which showed that security is almost the same as in the single-user setting, as long as nonces do not repeat many times across many users. This is the case when nonces are chosen randomly.",
      "ja": "AES-GCM-SIVのマルチユーザー/マルチキーセキュリティは[BHT18]によって調査され、ノンスが多くのユーザー間で何度も繰り返されない限り、セキュリティはシングルユーザー設定とほぼ同じであることが示されました。これは、ノンスがランダムに選択される場合です。"
    },
    {
      "indent": 0,
      "text": "10. IANA Considerations",
      "section_title": true,
      "ja": "10. IANAに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "IANA has added two entries to the \"AEAD Algorithms\" registry: AEAD_AES_128_GCM_SIV (Numeric ID 30) and AEAD_AES_256_GCM_SIV (Numeric ID 31), both referencing this document as their specification.",
      "ja": "IANAは「AEAD Algorithms」レジストリに2つのエントリ、AEAD_AES_128_GCM_SIV（数値ID 30）とAEAD_AES_256_GCM_SIV（数値ID 31）を追加しました。どちらもこのドキュメントを仕様として参照しています。"
    },
    {
      "indent": 0,
      "text": "11. References",
      "section_title": true,
      "ja": "11. 参考文献"
    },
    {
      "indent": 0,
      "text": "11.1. Normative References",
      "section_title": true,
      "ja": "11.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119] Bradner, S., \"Key words for use in RFCs to Indicate Requirement Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.",
      "ja": "[RFC2119] Bradner、S。、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>。"
    },
    {
      "indent": 3,
      "text": "[RFC8174] Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "ja": "[RFC8174] Leiba、B。、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>。"
    },
    {
      "indent": 3,
      "text": "[SP800-38A] Dworkin, M., \"Recommendation for Block Cipher Modes of Operation: Methods and Techniques\", NIST SP 800-38A, DOI 10.6028/NIST.SP.800-38A, December 2001, <https://csrc.nist.gov/publications/detail/sp/800-38a/ final>.",
      "ja": "[SP800-38A] Dworkin、M。、「ブロック暗号操作モードの推奨：方法と手法」、NIST SP 800-38A、DOI 10.6028 / NIST.SP.800-38A、2001年12月、<https：// csrc .nist.gov / publications / detail / sp / 800-38a / final>。"
    },
    {
      "indent": 0,
      "text": "11.2. Informative References",
      "section_title": true,
      "ja": "11.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[AES-GCM-SIV] Gueron, S., Langley, A., and Y. Lindell, \"AES-GCM-SIV: Specification and Analysis\", July 2017, <https://eprint.iacr.org/2017/168>.",
      "ja": "[AES-GCM-SIV]ゲロン、S。、ラングレー、A。、およびY.リンデル、「AES-GCM-SIV：仕様および分析」、2017年7月、<https://eprint.iacr.org/2017/ 168>。"
    },
    {
      "indent": 3,
      "text": "[aes-gcm-siv-homepage] Gueron, S., Langley, A., and Y. Lindell, \"Webpage for the AES-GCM-SIV Mode of Operation\", <https://cyber.biu.ac.il/aes-gcm-siv/>.",
      "ja": "[aes-gcm-siv-homepage]ゲロン、S。、ラングレー、A。、およびY.リンデル、「AES-GCM-SIV動作モードのWebページ」、<https://cyber.biu.ac.il / aes-gcm-siv />。"
    },
    {
      "indent": 3,
      "text": "[BHT18] Bose, P., Hoang, V., and S. Tessaro, \"Revisiting AES-GCM-SIV: Multi-user Security, Faster Key Derivation, and Better Bounds\", Advances in Cryptology - EUROCRYPT 2018, DOI 10.1007/978-3-319-78381-9_18, May 2018, <https://eprint.iacr.org/2018/136.pdf>.",
      "ja": "[BHT18] Bose、P.、Hoang、V。、およびS. Tessaro、「AES-GCM-SIVの再考：マルチユーザーセキュリティ、より高速な鍵導出、およびより優れた境界」、暗号学の進歩-EUROCRYPT 2018、DOI 10.1007 / 978-3-319-78381-9_18、2018年5月、<https://eprint.iacr.org/2018/136.pdf>。"
    },
    {
      "indent": 3,
      "text": "[Bleichenbacher16] Bleichenbacher, D., \"Subject: AES-GCM-SIV security of the additional data\", message to the cfrg mailing list, 24 June 2016, <https://mailarchive.ietf.org/arch/msg/cfrg/ qgh-Yxmj7CC7cq2YZLpmfGA3x-o>.",
      "ja": "[Bleichenbacher16] Bleichenbacher、D.、「件名：追加データのAES-GCM-SIVセキュリティ」、cfrgメーリングリストへのメッセージ、2016年6月24日、<https://mailarchive.ietf.org/arch/msg/cfrg / qgh-Yxmj7CC7cq2YZLpmfGA3x-o>。"
    },
    {
      "indent": 3,
      "text": "[GCM] Dworkin, M., \"Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC\", NIST SP 800-38D, DOI 10.6028/NIST.SP.800-38D, November 2007, <https://csrc.nist.gov/publications/detail/sp/800-38d/ final>.",
      "ja": "[GCM] Dworkin、M。、「Block Cipher Modes of Operation：Galois / Counter Mode（GCM）and GMAC」、NIST SP 800-38D、DOI 10.6028 / NIST.SP.800-38D、2007年11月、<https ：//csrc.nist.gov/publications/detail/sp/800-38d/ final>。"
    },
    {
      "indent": 3,
      "text": "[GCM-SIV] Gueron, S. and Y. Lindell, \"GCM-SIV: Full Nonce Misuse-Resistant Authenticated Encryption at Under One Cycle Per Byte\", Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, DOI 10.1145/2810103.2813613, October 2015, <http://doi.acm.org/10.1145/2810103.2813613>.",
      "ja": "[GCM-SIV]ゲロン、S。、およびY.リンデル、「GCM-SIV：1サイクルあたり1サイクル未満での完全な誤用耐性認証暗号化」、第22回コンピュータおよび通信セキュリティに関するACM SIGSAC会議の議事録、DOI 10.1145 / 2810103.2813613、2015年10月、<http://doi.acm.org/10.1145/2810103.2813613>。"
    },
    {
      "indent": 3,
      "text": "[key-derive] Gueron, S. and Y. Lindell, \"Better Bounds for Block Cipher Modes of Operation via Nonce-Based Key Derivation\", Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, DOI 10.1145/3133956.3133992, 2017, <https://doi.org/10.1145/3133956.3133992>.",
      "ja": "[key-derive] Gueron、S. and Y. Lindell、 \"Better Bound Bounds of Block Cipher Modes of Operation By Nonce-Based Key Derivation\"、Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security、DOI 10.1145 / 3133956.3133992、2017 、<https://doi.org/10.1145/3133956.3133992>。"
    },
    {
      "indent": 3,
      "text": "[multi-birthday] Suzuki, K., Tonien, D., Kurosawa, K., and K. Toyota, \"Birthday Paradox for Multi-collisions\", Information Security and Cryptology - ICISC 2006, Lecture Notes in Computer Science, Volume 4296, DOI 10.1007/11927587_5, 2006, <http://dx.doi.org/10.1007/11927587_5>.",
      "ja": "[multi-birthday] Suzuki, K., Tonien, D., Kurosawa, K., and K. Toyota,「マルチコリジョンの誕生のパラドックス」、情報セキュリティと暗号学-ICISC 2006、コンピュータサイエンスの講義ノート、ボリューム4296 、DOI 10.1007 / 11927587_5、2006、<http://dx.doi.org/10.1007/11927587_5>。"
    },
    {
      "indent": 3,
      "text": "[RFC3610] Whiting, D., Housley, R., and N. Ferguson, \"Counter with CBC-MAC (CCM)\", RFC 3610, DOI 10.17487/RFC3610, September 2003, <https://www.rfc-editor.org/info/rfc3610>.",
      "ja": "[RFC3610] Whiting、D.、Housley、R。、およびN. Ferguson、「Counter with CBC-MAC（CCM）」、RFC 3610、DOI 10.17487 / RFC3610、2003年9月、<https：//www.rfc-editor .org / info / rfc3610>。"
    },
    {
      "indent": 3,
      "text": "[RFC5116] McGrew, D., \"An Interface and Algorithms for Authenticated Encryption\", RFC 5116, DOI 10.17487/RFC5116, January 2008, <https://www.rfc-editor.org/info/rfc5116>.",
      "ja": "[RFC5116] McGrew、D。、「認証された暗号化のためのインターフェースとアルゴリズム」、RFC 5116、DOI 10.17487 / RFC5116、2008年1月、<https://www.rfc-editor.org/info/rfc5116>。"
    },
    {
      "indent": 3,
      "text": "[RFC5297] Harkins, D., \"Synthetic Initialization Vector (SIV) Authenticated Encryption Using the Advanced Encryption Standard (AES)\", RFC 5297, DOI 10.17487/RFC5297, October 2008, <https://www.rfc-editor.org/info/rfc5297>.",
      "ja": "[RFC5297] Harkins、D。、「Advanced Encryption Standard（AES）を使用したSynthetic Initialization Vector（SIV）Authenticated Encryption」、RFC 5297、DOI 10.17487 / RFC5297、2008年10月、<https://www.rfc-editor.org / info / rfc5297>。"
    },
    {
      "indent": 0,
      "text": "Appendix A. The Relationship between POLYVAL and GHASH",
      "section_title": true,
      "ja": "付録A. POLYVALとGHASHの関係"
    },
    {
      "indent": 3,
      "text": "GHASH and POLYVAL both operate in GF(2^128), although with different irreducible polynomials: POLYVAL works modulo x^128 + x^127 + x^126 + x^121 + 1 and GHASH works modulo x^128 + x^7 + x^2 + x + 1. Note that these irreducible polynomials are the \"reverse\" of each other.",
      "ja": "GHASHとPOLYVALは両方ともGF（2^128）で動作しますが、異なる既約多項式では、POLYVALはx^128 + x^127 + x^126 + x^121 + 1を法として機能し、GHASHはx^128 + x^7を法として機能します+ x^2 + x + 1.これらの既約多項式は互いに「逆」であることに注意してください。"
    },
    {
      "indent": 3,
      "text": "GHASH also has a different mapping between 128-bit strings and field elements. Whereas POLYVAL takes the least significant to most significant bits of the first byte to be the coefficients of x^0 to x^7, GHASH takes them to be the coefficients of x^7 to x^0. This continues until, for the last byte, POLYVAL takes the least significant to most significant bits to be the coefficients of x^120 to x^127, while GHASH takes them to be the coefficients of x^127 to x^120.",
      "ja": "GHASHは、128ビット文字列とフィールド要素の間のマッピングも異なります。 POLYVALは最初のバイトの最下位ビットから最上位ビットをx^0〜x^7の係数と見なしますが、GHASHはそれらをx^7〜x^0の係数とします。これは、最後のバイトについて、POLYVALが最下位ビットから最上位ビットをx^120からx^127の係数とするまで続き、GHASHがそれらをx^127からx^120の係数とするまで続きます。"
    },
    {
      "indent": 3,
      "text": "The combination of these facts means that it's possible to \"convert\" values between the two by reversing the order of the bytes in a 16-byte string. The differing interpretations of bit order takes care of reversing the bits within each byte, and then reversing the bytes does the rest. This may have a practical benefit for implementations that wish to implement both GHASH and POLYVAL.",
      "ja": "これらの事実の組み合わせは、16バイト文字列のバイトの順序を逆にすることで、2つの値を「変換」することが可能であることを意味します。ビット順序の解釈が異なると、各バイト内のビットが反転し、残りの部分はバイトを反転します。これは、GHASHとPOLYVALの両方を実装することを希望する実装にとって、実用的なメリットがあります。"
    },
    {
      "indent": 3,
      "text": "In order to be clear which field a given operation is performed in, let mulX_GHASH be a function that takes a 16-byte string, converts it to an element of GHASH's field using GHASH's convention, multiplies it by x, and converts it back to a string. Likewise, let mulX_POLYVAL be a function that converts a 16-byte string to an element of POLYVAL's field using POLYVAL's convention, multiplies it by x, and converts it back.",
      "ja": "特定の操作がどのフィールドで実行されるかを明確にするために、mulX_GHASHを16バイトの文字列を取り、GHASHの規則を使用してGHASHのフィールドの要素に変換し、xを掛けて、変換してaに戻す関数とします。ストリング。同様に、mulX_POLYVALを、POLYVALの規則を使用して16バイトの文字列をPOLYVALのフィールドの要素に変換し、xを乗算して元に戻す関数とする。"
    },
    {
      "indent": 3,
      "text": "Given the 16-byte string 01000000000000000000000000000000, mulX_GHASH of that string is 00800000000000000000000000000000 and mulX_POLYVAL of that string is 02000000000000000000000000000000. As a more general example, given 9c98c04df9387ded828175a92ba652d8, mulX_GHASH of that string is 4e4c6026fc9c3ef6c140bad495d3296c and mulX_POLYVAL of it is 3931819bf271fada0503eb52574ca5f2.",
      "ja": "16バイトの文字列01000000000000000000000000000000与えられ、その文字列のmulX_GHASHは00800000000000000000000000000000あり、その文字列のmulX_POLYVALは、より一般的な例として02000000000000000000000000000000.ある、9c98c04df9387ded828175a92ba652d8与えられ、その文字列のmulX_GHASHは4e4c6026fc9c3ef6c140bad495d3296cであり、それのmulX_POLYVALは3931819bf271fada0503eb52574ca5f2あります。"
    },
    {
      "indent": 3,
      "text": "Lastly, let ByteReverse be the function that takes a 16-byte string and returns a copy where the order of the bytes has been reversed.",
      "ja": "最後に、ByteReverseを16バイトの文字列を取り、バイトの順序を逆にしたコピーを返す関数とします。"
    },
    {
      "indent": 3,
      "text": "Now GHASH and POLYVAL can be defined in terms of one another:",
      "ja": "これで、GHASHとPOLYVALを相互に定義できます。"
    },
    {
      "indent": 3,
      "text": "POLYVAL(H, X_1, ..., X_n) =\nByteReverse(GHASH(mulX_GHASH(ByteReverse(H)), ByteReverse(X_1), ...,\nByteReverse(X_n)))",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "GHASH(H, X_1, ..., X_n) =\nByteReverse(POLYVAL(mulX_POLYVAL(ByteReverse(H)), ByteReverse(X_1),\n..., ByteReverse(X_n)))",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "As a worked example: let H = 25629347589242761d31f826ba4b757b, X_1 = 4f4f95668c83dfb6401762bb2d01a262, and X_2 = d1a24ddd2721d006bbe45f20d3c9f362. POLYVAL(H, X_1, X_2) = f7a3b47b846119fae5b7866cf5e5b77e.",
      "ja": "機能する例として、H = 25629347589242761d31f826ba4b757b、X_1 = 4f4f95668c83dfb6401762bb2d01a262、X_2 = d1a24ddd2721d006bbe45f20d3c9f362とします。 POLYVAL（H、X_1、X_2）= f7a3b47b846119fae5b7866cf5e5b77e。"
    },
    {
      "indent": 3,
      "text": "If we wished to calculate this given only an implementation of GHASH, then the key for GHASH would be",
      "ja": "GHASHの実装のみを前提としてこれを計算したい場合、GHASHのキーは次のようになります。"
    },
    {
      "indent": 3,
      "text": "mulX_GHASH(ByteReverse(H)) = dcbaa5dd137c188ebb21492c23c9b112.",
      "ja": "Root_battle（Batteryverse（H））= Dec 5D 138C16A：21492C23C9 Bog 2。"
    },
    {
      "indent": 3,
      "text": "Then ByteReverse(GHASH(dcba..., ByteReverse(X_1), ByteReverse(X_2))) = f7a3b47b846119fae5b7866cf5e5b77e, as required.",
      "ja": "次に、ByteReverse（GHASH（dcba ...、ByteReverse（X_1）、ByteReverse（X_2）））= f7a3b47b846119fae5b7866cf5e5b77e、必要に応じて。"
    },
    {
      "indent": 3,
      "text": "In the other direction, GHASH(H, X_1, X_2) = bd9b3997046731fb96251b91f9c99d7a. If we wished to calculate this given only an implementation of POLYVAL, then we would first calculate the key for POLYVAL:",
      "ja": "反対方向では、GHASH（H、X_1、X_2）= bd9b3997046731fb96251b91f9c99d7aです。 POLYVALの実装のみを前提としてこれを計算したい場合は、最初にPOLYVALのキーを計算します。"
    },
    {
      "indent": 2,
      "text": "mulX_POLYVAL(ByteReverse(H)) = f6ea96744df0633aec8424b18e26c54a.",
      "ja": "mulX_POLYVAL（ByteReverse（H））= f6ea96744df0633aec8424b18e26c54a。"
    },
    {
      "indent": 2,
      "text": "Then ByteReverse(POLYVAL(f6ea..., ByteReverse(X_1), ByteReverse(X_2))) = bd9b3997046731fb96251b91f9c99d7a.",
      "ja": "次に、ByteReverse（POLYVAL（f6ea ...、ByteReverse（X_1）、ByteReverse（X_2）））= bd9b3997046731fb96251b91f9c99d7a。"
    },
    {
      "indent": 0,
      "text": "Appendix B. Additional Comparisons with AES-GCM",
      "section_title": true,
      "ja": "付録B. AES-GCMとの追加の比較"
    },
    {
      "indent": 3,
      "text": "Some functional properties that differ between AES-GCM and AES-GCM-SIV that are also worth noting:",
      "ja": "AES-GCMとAES-GCM-SIVの間で異なるいくつかの機能プロパティは、注目に値します。"
    },
    {
      "indent": 3,
      "text": "AES-GCM allows plaintexts to be encrypted in a streaming fashion -- i.e., the beginning of the plaintext can be encrypted and transmitted before the entire message has been processed. AES-GCM-SIV requires two passes for encryption and so cannot do this.",
      "ja": "AES-GCMを使用すると、プレーンテキストをストリーミング方式で暗号化できます。つまり、メッセージ全体が処理される前に、プレーンテキストの先頭を暗号化して送信できます。 AES-GCM-SIVは暗号化に2つのパスを必要とするため、これを行うことはできません。"
    },
    {
      "indent": 3,
      "text": "AES-GCM allows a constant additional-data input to be precomputed in order to save per-message computation. AES-GCM-SIV varies the authenticator key based on the nonce and so does not permit this.",
      "ja": "AES-GCMでは、メッセージごとの計算を節約するために、一定の追加データ入力を事前に計算できます。 AES-GCM-SIVは、ノンスに基づいて認証キーを変更するため、これを許可しません。"
    },
    {
      "indent": 3,
      "text": "The performance for AES-GCM versus AES-GCM-SIV on small machines can be roughly characterized by the number of AES operations and the number of GF(2^128) multiplications needed to process a message.",
      "ja": "小規模なマシンでのAES-GCMとAES-GCM-SIVのパフォーマンスは、AES演算の数とメッセージの処理に必要なGF（2^128）乗算の数によっておおまかに特徴付けることができます。"
    },
    {
      "indent": 6,
      "text": "Let a = (bytelen(additional-data) + 15) / 16 and\n    p = (bytelen(plaintext) + 15) / 16.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Then AES-GCM requires p + 1 AES operations and p + a + 1 field multiplications.",
      "ja": "次に、AES-GCMはp + 1 AES演算とp + a + 1フィールド乗算を必要とします。"
    },
    {
      "indent": 3,
      "text": "Defined similarly, AES-GCM-SIV with AES-128 requires p + 5 AES operations and p + a + 1 field multiplications. With AES-256, that becomes p + 7 AES operations.",
      "ja": "同様に定義すると、AES-128を使用するAES-GCM-SIVには、p + 5 AES演算とp + a + 1フィールド乗算が必要です。 AES-256では、それはp + 7 AES演算になります。"
    },
    {
      "indent": 3,
      "text": "With large machines, the available parallelism becomes far more important, and such simple performance analysis is no longer representative. For such machines, we find that decryption of AES-GCM-SIV is only about 5% slower than AES-GCM, as long as the message is at least a couple of kilobytes. Encryption tends to run about two-thirds the speed because of the additional pass required.",
      "ja": "大規模なマシンでは、利用可能な並列処理がはるかに重要になり、そのような単純なパフォーマンス分析はもはや代表的ではありません。このようなマシンの場合、メッセージが少なくとも数キロバイトである限り、AES-GCM-SIVの復号化はAES-GCMよりも約5％遅いだけです。暗号化は、追加のパスが必要なため、約3分の2の速度で実行される傾向があります。"
    },
    {
      "indent": 0,
      "text": "Appendix C. Test Vectors",
      "section_title": true,
      "ja": "付録C.テストベクトル"
    },
    {
      "indent": 0,
      "text": "C.1. AEAD_AES_128_GCM_SIV",
      "section_title": true,
      "ja": "C.1. AEAD_AES_128_GCM_SIV"
    },
    {
      "indent": 3,
      "text": "Plaintext (0 bytes) =\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             00000000000000000000000000000000\nPOLYVAL result =            00000000000000000000000000000000\nPOLYVAL result XOR nonce =  03000000000000000000000000000000\n... and masked =            03000000000000000000000000000000\nTag =                       dc20e2d83f25705bb49e439eca56de25\nInitial counter =           dc20e2d83f25705bb49e439eca56dea5\nResult (16 bytes) =         dc20e2d83f25705bb49e439eca56de25\n\n\nPlaintext (8 bytes) =       0100000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            00000000000000004000000000000000\nPOLYVAL result =            eb93b7740962c5e49d2a90a7dc5cec74\nPOLYVAL result XOR nonce =  e893b7740962c5e49d2a90a7dc5cec74\n... and masked =            e893b7740962c5e49d2a90a7dc5cec74\nTag =                       578782fff6013b815b287c22493a364c\nInitial counter =           578782fff6013b815b287c22493a36cc\nResult (24 bytes) =         b5d839330ac7b786578782fff6013b81\n                            5b287c22493a364c\n\n\nPlaintext (12 bytes) =      010000000000000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            00000000000000006000000000000000\nPOLYVAL result =            48eb6c6c5a2dbe4a1dde508fee06361b\nPOLYVAL result XOR nonce =  4beb6c6c5a2dbe4a1dde508fee06361b\n... and masked =            4beb6c6c5a2dbe4a1dde508fee06361b\nTag =                       a4978db357391a0bc4fdec8b0d106639\n\nInitial counter =           a4978db357391a0bc4fdec8b0d1066b9\nResult (28 bytes) =         7323ea61d05932260047d942a4978db3\n                            57391a0bc4fdec8b0d106639\n\n\nPlaintext (16 bytes) =      01000000000000000000000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            00000000000000008000000000000000\nPOLYVAL result =            20806c26e3c1de019e111255708031d6\nPOLYVAL result XOR nonce =  23806c26e3c1de019e111255708031d6\n... and masked =            23806c26e3c1de019e11125570803156\nTag =                       303aaf90f6fe21199c6068577437a0c4\nInitial counter =           303aaf90f6fe21199c6068577437a0c4\nResult (32 bytes) =         743f7c8077ab25f8624e2e948579cf77\n                            303aaf90f6fe21199c6068577437a0c4\n\n\nPlaintext (32 bytes) =      01000000000000000000000000000000\n                            02000000000000000000000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            00000000000000000001000000000000\nPOLYVAL result =            ce6edc9a50b36d9a98986bbf6a261c3b\nPOLYVAL result XOR nonce =  cd6edc9a50b36d9a98986bbf6a261c3b\n... and masked =            cd6edc9a50b36d9a98986bbf6a261c3b\nTag =                       1a8e45dcd4578c667cd86847bf6155ff\nInitial counter =           1a8e45dcd4578c667cd86847bf6155ff\nResult (48 bytes) =         84e07e62ba83a6585417245d7ec413a9\n                            fe427d6315c09b57ce45f2e3936a9445\n                            1a8e45dcd4578c667cd86847bf6155ff\n\n\nPlaintext (48 bytes) =      01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            00000000000000008001000000000000\nPOLYVAL result =            81388746bc22d26b2abc3dcb15754222\nPOLYVAL result XOR nonce =  82388746bc22d26b2abc3dcb15754222\n... and masked =            82388746bc22d26b2abc3dcb15754222\nTag =                       5e6e311dbf395d35b0fe39c2714388f8\nInitial counter =           5e6e311dbf395d35b0fe39c2714388f8\nResult (64 bytes) =         3fd24ce1f5a67b75bf2351f181a475c7\n                            b800a5b4d3dcf70106b1eea82fa1d64d\n                            f42bf7226122fa92e17a40eeaac1201b\n                            5e6e311dbf395d35b0fe39c2714388f8\n\n\nPlaintext (64 bytes) =      01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            00000000000000000002000000000000\nPOLYVAL result =            1e39b6d3344d348f6044f89935d1cf78\nPOLYVAL result XOR nonce =  1d39b6d3344d348f6044f89935d1cf78\n... and masked =            1d39b6d3344d348f6044f89935d1cf78\nTag =                       8a263dd317aa88d56bdf3936dba75bb8\nInitial counter =           8a263dd317aa88d56bdf3936dba75bb8\nResult (80 bytes) =         2433668f1058190f6d43e360f4f35cd8\n                            e475127cfca7028ea8ab5c20f7ab2af0\n                            2516a2bdcbc08d521be37ff28c152bba\n                            36697f25b4cd169c6590d1dd39566d3f\n                            8a263dd317aa88d56bdf3936dba75bb8\n\n\nPlaintext (8 bytes) =       0200000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            08000000000000004000000000000000\nPOLYVAL result =            b26781e7e2c1376f96bec195f3709b2a\nPOLYVAL result XOR nonce =  b16781e7e2c1376f96bec195f3709b2a\n... and masked =            b16781e7e2c1376f96bec195f3709b2a\nTag =                       3b0a1a2560969cdf790d99759abd1508\nInitial counter =           3b0a1a2560969cdf790d99759abd1588\nResult (24 bytes) =         1e6daba35669f4273b0a1a2560969cdf\n                            790d99759abd1508\n\n\nPlaintext (12 bytes) =      020000000000000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            08000000000000006000000000000000\nPOLYVAL result =            111f5affb18e4cc1164a01bdc12a4145\nPOLYVAL result XOR nonce =  121f5affb18e4cc1164a01bdc12a4145\n... and masked =            121f5affb18e4cc1164a01bdc12a4145\nTag =                       08299c5102745aaa3a0c469fad9e075a\nInitial counter =           08299c5102745aaa3a0c469fad9e07da\nResult (28 bytes) =         296c7889fd99f41917f4462008299c51\n                            02745aaa3a0c469fad9e075a\n\n\nPlaintext (16 bytes) =      02000000000000000000000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            08000000000000008000000000000000\nPOLYVAL result =            79745ab508622c8a958543675fac4688\nPOLYVAL result XOR nonce =  7a745ab508622c8a958543675fac4688\n... and masked =            7a745ab508622c8a958543675fac4608\nTag =                       8f8936ec039e4e4bb97ebd8c4457441f\nInitial counter =           8f8936ec039e4e4bb97ebd8c4457449f\nResult (32 bytes) =         e2b0c5da79a901c1745f700525cb335b\n                            8f8936ec039e4e4bb97ebd8c4457441f\nPlaintext (32 bytes) =      02000000000000000000000000000000\n                            03000000000000000000000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            08000000000000000001000000000000\nPOLYVAL result =            2ce7daaf7c89490822051255b12eca6b\nPOLYVAL result XOR nonce =  2fe7daaf7c89490822051255b12eca6b\n... and masked =            2fe7daaf7c89490822051255b12eca6b\nTag =                       e6af6a7f87287da059a71684ed3498e1\nInitial counter =           e6af6a7f87287da059a71684ed3498e1\nResult (48 bytes) =         620048ef3c1e73e57e02bb8562c416a3\n                            19e73e4caac8e96a1ecb2933145a1d71\n                            e6af6a7f87287da059a71684ed3498e1\n\n\nPlaintext (48 bytes) =      02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            08000000000000008001000000000000\nPOLYVAL result =            9ca987715d69c1786711dfcd22f830fc\nPOLYVAL result XOR nonce =  9fa987715d69c1786711dfcd22f830fc\n... and masked =            9fa987715d69c1786711dfcd22f8307c\nTag =                       6a8cc3865f76897c2e4b245cf31c51f2\nInitial counter =           6a8cc3865f76897c2e4b245cf31c51f2\nResult (64 bytes) =         50c8303ea93925d64090d07bd109dfd9\n                            515a5a33431019c17d93465999a8b005\n                            3201d723120a8562b838cdff25bf9d1e\n                            6a8cc3865f76897c2e4b245cf31c51f2\n\n\nPlaintext (64 bytes) =      02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            05000000000000000000000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            05000000000000000000000000000000\n                            08000000000000000002000000000000\nPOLYVAL result =            ffcd05d5770f34ad9267f0a59994b15a\nPOLYVAL result XOR nonce =  fccd05d5770f34ad9267f0a59994b15a\n... and masked =            fccd05d5770f34ad9267f0a59994b15a\nTag =                       cdc46ae475563de037001ef84ae21744\nInitial counter =           cdc46ae475563de037001ef84ae217c4\nResult (80 bytes) =         2f5c64059db55ee0fb847ed513003746\n                            aca4e61c711b5de2e7a77ffd02da42fe\n                            ec601910d3467bb8b36ebbaebce5fba3\n                            0d36c95f48a3e7980f0e7ac299332a80\n                            cdc46ae475563de037001ef84ae21744\n\n\nPlaintext (4 bytes) =       02000000\nAAD (12 bytes) =            010000000000000000000000\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            60000000000000002000000000000000\nPOLYVAL result =            f6ce9d3dcd68a2fd603c7ecc18fb9918\nPOLYVAL result XOR nonce =  f5ce9d3dcd68a2fd603c7ecc18fb9918\n... and masked =            f5ce9d3dcd68a2fd603c7ecc18fb9918\nTag =                       07eb1f84fb28f8cb73de8e99e2f48a14\nInitial counter =           07eb1f84fb28f8cb73de8e99e2f48a94\nResult (20 bytes) =         a8fe3e8707eb1f84fb28f8cb73de8e99\n                            e2f48a14\n\n\nPlaintext (20 bytes) =      03000000000000000000000000000000\n                            04000000\nAAD (18 bytes) =            01000000000000000000000000000000\n                            0200\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            9000000000000000a000000000000000\nPOLYVAL result =            4781d492cb8f926c504caa36f61008fe\nPOLYVAL result XOR nonce =  4481d492cb8f926c504caa36f61008fe\n... and masked =            4481d492cb8f926c504caa36f610087e\nTag =                       24afc9805e976f451e6d87f6fe106514\nInitial counter =           24afc9805e976f451e6d87f6fe106594\nResult (36 bytes) =         6bb0fecf5ded9b77f902c7d5da236a43\n                            91dd029724afc9805e976f451e6d87f6\n                            fe106514\n\n\nPlaintext (18 bytes) =      03000000000000000000000000000000\n                            0400\nAAD (20 bytes) =            01000000000000000000000000000000\n                            02000000\nKey =                       01000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = d9b360279694941ac5dbc6987ada7377\nRecord encryption key =     4004a0dcd862f2a57360219d2d44ef6c\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            a0000000000000009000000000000000\nPOLYVAL result =            75cbc23a1a10e348aeb8e384b5cc79fd\nPOLYVAL result XOR nonce =  76cbc23a1a10e348aeb8e384b5cc79fd\n... and masked =            76cbc23a1a10e348aeb8e384b5cc797d\nTag =                       bff9b2ef00fb47920cc72a0c0f13b9fd\nInitial counter =           bff9b2ef00fb47920cc72a0c0f13b9fd\nResult (34 bytes) =         44d0aaf6fb2f1f34add5e8064e83e12a\n                            2adabff9b2ef00fb47920cc72a0c0f13\n                            b9fd\n\nPlaintext (0 bytes) =\nAAD (0 bytes) =\nKey =                       e66021d5eb8e4f4066d4adb9c33560e4\nNonce =                     f46e44bb3da0015c94f70887\nRecord authentication key = 036ee1fe2d7926af68898095e54e7b3c\nRecord encryption key =     5e46482396008223b5c1d25173d87539\nPOLYVAL input =             00000000000000000000000000000000\nPOLYVAL result =            00000000000000000000000000000000\nPOLYVAL result XOR nonce =  f46e44bb3da0015c94f7088700000000\n... and masked =            f46e44bb3da0015c94f7088700000000\nTag =                       a4194b79071b01a87d65f706e3949578\nInitial counter =           a4194b79071b01a87d65f706e39495f8\nResult (16 bytes) =         a4194b79071b01a87d65f706e3949578\n\n\nPlaintext (3 bytes) =       7a806c\nAAD (5 bytes) =             46bb91c3c5\nKey =                       36864200e0eaf5284d884a0e77d31646\nNonce =                     bae8e37fc83441b16034566b\nRecord authentication key = 3e28de1120b2981a0155795ca2812af6\nRecord encryption key =     6d4b78b31a4c9c03d8db0f42f7507fae\nPOLYVAL input =             46bb91c3c50000000000000000000000\n                            7a806c00000000000000000000000000\n                            28000000000000001800000000000000\nPOLYVAL result =            43d9a745511dcfa21b96dd606f1d5720\nPOLYVAL result XOR nonce =  f931443a99298e137ba28b0b6f1d5720\n... and masked =            f931443a99298e137ba28b0b6f1d5720\nTag =                       711bd85bc1e4d3e0a462e074eea428a8\nInitial counter =           711bd85bc1e4d3e0a462e074eea428a8\nResult (19 bytes) =         af60eb711bd85bc1e4d3e0a462e074ee\n                            a428a8\n\n\nPlaintext (6 bytes) =       bdc66f146545\nAAD (10 bytes) =            fc880c94a95198874296\nKey =                       aedb64a6c590bc84d1a5e269e4b47801\nNonce =                     afc0577e34699b9e671fdd4f\nRecord authentication key = 43b8de9cea62330d15cccfc84a33e8c8\nRecord encryption key =     8e54631607e431e095b54852868e3a27\nPOLYVAL input =             fc880c94a95198874296000000000000\n                            bdc66f14654500000000000000000000\n                            50000000000000003000000000000000\nPOLYVAL result =            26498e0d2b1ef004e808c458e8f2f515\nPOLYVAL result XOR nonce =  8989d9731f776b9a8f171917e8f2f515\n... and masked =            8989d9731f776b9a8f171917e8f2f515\nTag =                       d6a9c45545cfc11f03ad743dba20f966\nInitial counter =           d6a9c45545cfc11f03ad743dba20f9e6\nResult (22 bytes) =         bb93a3e34d3cd6a9c45545cfc11f03ad\n                            743dba20f966\n\n\nPlaintext (9 bytes) =       1177441f195495860f\nAAD (15 bytes) =            046787f3ea22c127aaf195d1894728\nKey =                       d5cc1fd161320b6920ce07787f86743b\nNonce =                     275d1ab32f6d1f0434d8848c\nRecord authentication key = 8a51df64d93eaf667c2c09bd454ce5c5\nRecord encryption key =     43ab276c2b4a473918ca73f2dd85109c\nPOLYVAL input =             046787f3ea22c127aaf195d189472800\n                            1177441f195495860f00000000000000\n                            78000000000000004800000000000000\nPOLYVAL result =            63a3451c0b23345ad02bba59956517cf\nPOLYVAL result XOR nonce =  44fe5faf244e2b5ee4f33ed5956517cf\n... and masked =            44fe5faf244e2b5ee4f33ed59565174f\nTag =                       1d02fd0cd174c84fc5dae2f60f52fd2b\nInitial counter =           1d02fd0cd174c84fc5dae2f60f52fdab\nResult (25 bytes) =         4f37281f7ad12949d01d02fd0cd174c8\n                            4fc5dae2f60f52fd2b\n\n\nPlaintext (12 bytes) =      9f572c614b4745914474e7c7\nAAD (20 bytes) =            c9882e5386fd9f92ec489c8fde2be2cf\n                            97e74e93\nKey =                       b3fed1473c528b8426a582995929a149\nNonce =                     9e9ad8780c8d63d0ab4149c0\nRecord authentication key = 22f50707a95dd416df069d670cb775e8\nRecord encryption key =     f674a5584ee21fe97b4cebc468ab61e4\nPOLYVAL input =             c9882e5386fd9f92ec489c8fde2be2cf\n                            97e74e93000000000000000000000000\n                            9f572c614b4745914474e7c700000000\n                            a0000000000000006000000000000000\nPOLYVAL result =            0cca0423fba9d77fe7e2e6963b08cdd0\nPOLYVAL result XOR nonce =  9250dc5bf724b4af4ca3af563b08cdd0\n... and masked =            9250dc5bf724b4af4ca3af563b08cd50\nTag =                       c1dc2f871fb7561da1286e655e24b7b0\nInitial counter =           c1dc2f871fb7561da1286e655e24b7b0\nResult (28 bytes) =         f54673c5ddf710c745641c8bc1dc2f87\n                            1fb7561da1286e655e24b7b0\n\n\nPlaintext (15 bytes) =      0d8c8451178082355c9e940fea2f58\nAAD (25 bytes) =            2950a70d5a1db2316fd568378da107b5\n                            2b0da55210cc1c1b0a\nKey =                       2d4ed87da44102952ef94b02b805249b\nNonce =                     ac80e6f61455bfac8308a2d4\nRecord authentication key = 0b00a29a83e7e95b92e3a0783b29f140\nRecord encryption key =     a430c27f285aed913005975c42eed5f3\nPOLYVAL input =             2950a70d5a1db2316fd568378da107b5\n                            2b0da55210cc1c1b0a00000000000000\n                            0d8c8451178082355c9e940fea2f5800\n                            c8000000000000007800000000000000\nPOLYVAL result =            1086ef25247aa41009bbc40871d9b350\nPOLYVAL result XOR nonce =  bc0609d3302f1bbc8ab366dc71d9b350\n... and masked =            bc0609d3302f1bbc8ab366dc71d9b350\nTag =                       83b3449b9f39552de99dc214a1190b0b\nInitial counter =           83b3449b9f39552de99dc214a1190b8b\nResult (31 bytes) =         c9ff545e07b88a015f05b274540aa183\n                            b3449b9f39552de99dc214a1190b0b\n\n\nPlaintext (18 bytes) =      6b3db4da3d57aa94842b9803a96e07fb\n                            6de7\nAAD (30 bytes) =            1860f762ebfbd08284e421702de0de18\n                            baa9c9596291b08466f37de21c7f\nKey =                       bde3b2f204d1e9f8b06bc47f9745b3d1\nNonce =                     ae06556fb6aa7890bebc18fe\nRecord authentication key = 21c874a8bad3603d1c3e8784df5b3f9f\nRecord encryption key =     d1c16d72651c3df504eae27129d818e8\nPOLYVAL input =             1860f762ebfbd08284e421702de0de18\n                            baa9c9596291b08466f37de21c7f0000\n                            6b3db4da3d57aa94842b9803a96e07fb\n                            6de70000000000000000000000000000\n                            f0000000000000009000000000000000\nPOLYVAL result =            55462a5afa0da8d646481e049ef9c764\nPOLYVAL result XOR nonce =  fb407f354ca7d046f8f406fa9ef9c764\n... and masked =            fb407f354ca7d046f8f406fa9ef9c764\nTag =                       3e377094f04709f64d7b985310a4db84\nInitial counter =           3e377094f04709f64d7b985310a4db84\nResult (34 bytes) =         6298b296e24e8cc35dce0bed484b7f30\n                            d5803e377094f04709f64d7b985310a4\n                            db84\n\n\nPlaintext (21 bytes) =      e42a3c02c25b64869e146d7b233987bd\n                            dfc240871d\nAAD (35 bytes) =            7576f7028ec6eb5ea7e298342a94d4b2\n                            02b370ef9768ec6561c4fe6b7e7296fa\n                            859c21\nKey =                       f901cfe8a69615a93fdf7a98cad48179\nNonce =                     6245709fb18853f68d833640\nRecord authentication key = 3724f55f1d22ac0ab830da0b6a995d74\nRecord encryption key =     75ac87b70c05db287de779006105a344\nPOLYVAL input =             7576f7028ec6eb5ea7e298342a94d4b2\n                            02b370ef9768ec6561c4fe6b7e7296fa\n                            859c2100000000000000000000000000\n                            e42a3c02c25b64869e146d7b233987bd\n                            dfc240871d0000000000000000000000\n                            1801000000000000a800000000000000\nPOLYVAL result =            4cbba090f03f7d1188ea55749fa6c7bd\nPOLYVAL result XOR nonce =  2efed00f41b72ee7056963349fa6c7bd\n... and masked =            2efed00f41b72ee7056963349fa6c73d\nTag =                       2d15506c84a9edd65e13e9d24a2a6e70\nInitial counter =           2d15506c84a9edd65e13e9d24a2a6ef0\nResult (37 bytes) =         391cc328d484a4f46406181bcd62efd9\n                            b3ee197d052d15506c84a9edd65e13e9\n                            d24a2a6e70\n\n",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "C.2. AEAD_AES_256_GCM_SIV",
      "section_title": true,
      "ja": "C.2. AEAD_AES_256_GCM_SIV"
    },
    {
      "indent": 3,
      "text": "Plaintext (0 bytes) =\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             00000000000000000000000000000000\nPOLYVAL result =            00000000000000000000000000000000\nPOLYVAL result XOR nonce =  03000000000000000000000000000000\n... and masked =            03000000000000000000000000000000\nTag =                       07f5f4169bbf55a8400cd47ea6fd400f\nInitial counter =           07f5f4169bbf55a8400cd47ea6fd408f\nResult (16 bytes) =         07f5f4169bbf55a8400cd47ea6fd400f\n\n\nPlaintext (8 bytes) =       0100000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            00000000000000004000000000000000\nPOLYVAL result =            05230f62f0eac8aa14fe4d646b59cd41\nPOLYVAL result XOR nonce =  06230f62f0eac8aa14fe4d646b59cd41\n... and masked =            06230f62f0eac8aa14fe4d646b59cd41\nTag =                       843122130f7364b761e0b97427e3df28\nInitial counter =           843122130f7364b761e0b97427e3dfa8\nResult (24 bytes) =         c2ef328e5c71c83b843122130f7364b7\n                            61e0b97427e3df28\n\n\nPlaintext (12 bytes) =      010000000000000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            00000000000000006000000000000000\nPOLYVAL result =            6d81a24732fd6d03ae5af544720a1c13\nPOLYVAL result XOR nonce =  6e81a24732fd6d03ae5af544720a1c13\n... and masked =            6e81a24732fd6d03ae5af544720a1c13\nTag =                       8ca50da9ae6559e48fd10f6e5c9ca17e\nInitial counter =           8ca50da9ae6559e48fd10f6e5c9ca1fe\nResult (28 bytes) =         9aab2aeb3faa0a34aea8e2b18ca50da9\n                            ae6559e48fd10f6e5c9ca17e\n\n\nPlaintext (16 bytes) =      01000000000000000000000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            00000000000000008000000000000000\nPOLYVAL result =            74eee2bf7c9a165f8b25dea73db32a6d\nPOLYVAL result XOR nonce =  77eee2bf7c9a165f8b25dea73db32a6d\n... and masked =            77eee2bf7c9a165f8b25dea73db32a6d\nTag =                       c9eac6fa700942702e90862383c6c366\nInitial counter =           c9eac6fa700942702e90862383c6c3e6\nResult (32 bytes) =         85a01b63025ba19b7fd3ddfc033b3e76\n                            c9eac6fa700942702e90862383c6c366\n\n\nPlaintext (32 bytes) =      01000000000000000000000000000000\n                            02000000000000000000000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            00000000000000000001000000000000\nPOLYVAL result =            899b6381b3d46f0def7aa0517ba188f5\nPOLYVAL result XOR nonce =  8a9b6381b3d46f0def7aa0517ba188f5\n... and masked =            8a9b6381b3d46f0def7aa0517ba18875\nTag =                       e819e63abcd020b006a976397632eb5d\nInitial counter =           e819e63abcd020b006a976397632ebdd\nResult (48 bytes) =         4a6a9db4c8c6549201b9edb53006cba8\n                            21ec9cf850948a7c86c68ac7539d027f\n                            e819e63abcd020b006a976397632eb5d\n\n\nPlaintext (48 bytes) =      01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            00000000000000008001000000000000\nPOLYVAL result =            c1f8593d8fc29b0c290cae1992f71f51\nPOLYVAL result XOR nonce =  c2f8593d8fc29b0c290cae1992f71f51\n... and masked =            c2f8593d8fc29b0c290cae1992f71f51\nTag =                       790bc96880a99ba804bd12c0e6a22cc4\nInitial counter =           790bc96880a99ba804bd12c0e6a22cc4\nResult (64 bytes) =         c00d121893a9fa603f48ccc1ca3c57ce\n                            7499245ea0046db16c53c7c66fe717e3\n                            9cf6c748837b61f6ee3adcee17534ed5\n                            790bc96880a99ba804bd12c0e6a22cc4\n\n\nPlaintext (64 bytes) =      01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\nAAD (0 bytes) =\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            00000000000000000002000000000000\nPOLYVAL result =            6ef38b06046c7c0e225efaef8e2ec4c4\nPOLYVAL result XOR nonce =  6df38b06046c7c0e225efaef8e2ec4c4\n... and masked =            6df38b06046c7c0e225efaef8e2ec444\nTag =                       112864c269fc0d9d88c61fa47e39aa08\nInitial counter =           112864c269fc0d9d88c61fa47e39aa88\nResult (80 bytes) =         c2d5160a1f8683834910acdafc41fbb1\n                            632d4a353e8b905ec9a5499ac34f96c7\n                            e1049eb080883891a4db8caaa1f99dd0\n                            04d80487540735234e3744512c6f90ce\n                            112864c269fc0d9d88c61fa47e39aa08\n\n\nPlaintext (8 bytes) =       0200000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            08000000000000004000000000000000\nPOLYVAL result =            34e57bafe011b9b36fc6821b7ffb3354\nPOLYVAL result XOR nonce =  37e57bafe011b9b36fc6821b7ffb3354\n... and masked =            37e57bafe011b9b36fc6821b7ffb3354\nTag =                       91213f267e3b452f02d01ae33e4ec854\nInitial counter =           91213f267e3b452f02d01ae33e4ec8d4\nResult (24 bytes) =         1de22967237a813291213f267e3b452f\n                            02d01ae33e4ec854\n\n\nPlaintext (12 bytes) =      020000000000000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            08000000000000006000000000000000\nPOLYVAL result =            5c47d68a22061c1ad5623a3b66a8e206\nPOLYVAL result XOR nonce =  5f47d68a22061c1ad5623a3b66a8e206\n... and masked =            5f47d68a22061c1ad5623a3b66a8e206\nTag =                       c1a4a19ae800941ccdc57cc8413c277f\nInitial counter =           c1a4a19ae800941ccdc57cc8413c27ff\nResult (28 bytes) =         163d6f9cc1b346cd453a2e4cc1a4a19a\n                            e800941ccdc57cc8413c277f\nPlaintext (16 bytes) =      02000000000000000000000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            08000000000000008000000000000000\nPOLYVAL result =            452896726c616746f01d11d82911d478\nPOLYVAL result XOR nonce =  462896726c616746f01d11d82911d478\n... and masked =            462896726c616746f01d11d82911d478\nTag =                       b292d28ff61189e8e49f3875ef91aff7\nInitial counter =           b292d28ff61189e8e49f3875ef91aff7\nResult (32 bytes) =         c91545823cc24f17dbb0e9e807d5ec17\n                            b292d28ff61189e8e49f3875ef91aff7\n\n\nPlaintext (32 bytes) =      02000000000000000000000000000000\n                            03000000000000000000000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            08000000000000000001000000000000\nPOLYVAL result =            4e58c1e341c9bb0ae34eda9509dfc90c\nPOLYVAL result XOR nonce =  4d58c1e341c9bb0ae34eda9509dfc90c\n... and masked =            4d58c1e341c9bb0ae34eda9509dfc90c\nTag =                       aea1bad12702e1965604374aab96dbbc\nInitial counter =           aea1bad12702e1965604374aab96dbbc\nResult (48 bytes) =         07dad364bfc2b9da89116d7bef6daaaf\n                            6f255510aa654f920ac81b94e8bad365\n                            aea1bad12702e1965604374aab96dbbc\n\n\nPlaintext (48 bytes) =      02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            08000000000000008001000000000000\nPOLYVAL result =            2566a4aff9a525df9772c16d4eaf8d2a\nPOLYVAL result XOR nonce =  2666a4aff9a525df9772c16d4eaf8d2a\n... and masked =            2666a4aff9a525df9772c16d4eaf8d2a\nTag =                       03332742b228c647173616cfd44c54eb\nInitial counter =           03332742b228c647173616cfd44c54eb\nResult (64 bytes) =         c67a1f0f567a5198aa1fcc8e3f213143\n                            36f7f51ca8b1af61feac35a86416fa47\n                            fbca3b5f749cdf564527f2314f42fe25\n                            03332742b228c647173616cfd44c54eb\n\n\nPlaintext (64 bytes) =      02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            05000000000000000000000000000000\nAAD (1 bytes) =             01\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            05000000000000000000000000000000\n                            08000000000000000002000000000000\nPOLYVAL result =            da58d2f61b0a9d343b2f37fb0c519733\nPOLYVAL result XOR nonce =  d958d2f61b0a9d343b2f37fb0c519733\n... and masked =            d958d2f61b0a9d343b2f37fb0c519733\nTag =                       5bde0285037c5de81e5b570a049b62a0\nInitial counter =           5bde0285037c5de81e5b570a049b62a0\nResult (80 bytes) =         67fd45e126bfb9a79930c43aad2d3696\n                            7d3f0e4d217c1e551f59727870beefc9\n                            8cb933a8fce9de887b1e40799988db1f\n                            c3f91880ed405b2dd298318858467c89\n                            5bde0285037c5de81e5b570a049b62a0\nPlaintext (4 bytes) =       02000000\nAAD (12 bytes) =            010000000000000000000000\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            60000000000000002000000000000000\nPOLYVAL result =            6dc76ae84b88916e073a303aafde05cf\nPOLYVAL result XOR nonce =  6ec76ae84b88916e073a303aafde05cf\n... and masked =            6ec76ae84b88916e073a303aafde054f\nTag =                       1835e517741dfddccfa07fa4661b74cf\nInitial counter =           1835e517741dfddccfa07fa4661b74cf\nResult (20 bytes) =         22b3f4cd1835e517741dfddccfa07fa4\n                            661b74cf\n\n\nPlaintext (20 bytes) =      03000000000000000000000000000000\n                            04000000\nAAD (18 bytes) =            01000000000000000000000000000000\n                            0200\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            9000000000000000a000000000000000\nPOLYVAL result =            973ef4fd04bd31d193816ab26f8655ca\nPOLYVAL result XOR nonce =  943ef4fd04bd31d193816ab26f8655ca\n... and masked =            943ef4fd04bd31d193816ab26f86554a\nTag =                       b879ad976d8242acc188ab59cabfe307\nInitial counter =           b879ad976d8242acc188ab59cabfe387\nResult (36 bytes) =         43dd0163cdb48f9fe3212bf61b201976\n                            067f342bb879ad976d8242acc188ab59\n                            cabfe307\n\n\nPlaintext (18 bytes) =      03000000000000000000000000000000\n                            0400\nAAD (20 bytes) =            01000000000000000000000000000000\n                            02000000\nKey =                       01000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     030000000000000000000000\nRecord authentication key = b5d3c529dfafac43136d2d11be284d7f\nRecord encryption key =     b914f4742be9e1d7a2f84addbf96dec3\n                            456e3c6c05ecc157cdbf0700fedad222\nPOLYVAL input =             01000000000000000000000000000000\n                            02000000000000000000000000000000\n                            03000000000000000000000000000000\n                            04000000000000000000000000000000\n                            a0000000000000009000000000000000\nPOLYVAL result =            2cbb6b7ab2dbffefb797f825f826870c\nPOLYVAL result XOR nonce =  2fbb6b7ab2dbffefb797f825f826870c\n... and masked =            2fbb6b7ab2dbffefb797f825f826870c\nTag =                       cfcdf5042112aa29685c912fc2056543\nInitial counter =           cfcdf5042112aa29685c912fc20565c3\nResult (34 bytes) =         462401724b5ce6588d5a54aae5375513\n                            a075cfcdf5042112aa29685c912fc205\n                            6543\n\nPlaintext (0 bytes) =\nAAD (0 bytes) =\nKey =                       e66021d5eb8e4f4066d4adb9c33560e4\n                            f46e44bb3da0015c94f7088736864200\nNonce =                     e0eaf5284d884a0e77d31646\nRecord authentication key = e40d26f82774aa27f47b047b608b9585\nRecord encryption key =     7c7c3d9a542cef53dde0e6de9b580040\n                            0f82e73ec5f7ee41b7ba8dcb9ba078c3\nPOLYVAL input =             00000000000000000000000000000000\nPOLYVAL result =            00000000000000000000000000000000\nPOLYVAL result XOR nonce =  e0eaf5284d884a0e77d3164600000000\n... and masked =            e0eaf5284d884a0e77d3164600000000\nTag =                       169fbb2fbf389a995f6390af22228a62\nInitial counter =           169fbb2fbf389a995f6390af22228ae2\nResult (16 bytes) =         169fbb2fbf389a995f6390af22228a62\n\n\nPlaintext (3 bytes) =       671fdd\nAAD (5 bytes) =             4fbdc66f14\nKey =                       bae8e37fc83441b16034566b7a806c46\n                            bb91c3c5aedb64a6c590bc84d1a5e269\nNonce =                     e4b47801afc0577e34699b9e\nRecord authentication key = b546f5a850d0a90adfe39e95c2510fc6\nRecord encryption key =     b9d1e239d62cbb5c49273ddac8838bdc\n                            c53bca478a770f07087caa4e0a924a55\nPOLYVAL input =             4fbdc66f140000000000000000000000\n                            671fdd00000000000000000000000000\n                            28000000000000001800000000000000\nPOLYVAL result =            b91f91f96b159a7c611c05035b839e92\nPOLYVAL result XOR nonce =  5dabe9f8c4d5cd0255759e9d5b839e92\n... and masked =            5dabe9f8c4d5cd0255759e9d5b839e12\nTag =                       93da9bb81333aee0c785b240d319719d\nInitial counter =           93da9bb81333aee0c785b240d319719d\nResult (19 bytes) =         0eaccb93da9bb81333aee0c785b240d3\n                            19719d\n\n\nPlaintext (6 bytes) =       195495860f04\nAAD (10 bytes) =            6787f3ea22c127aaf195\nKey =                       6545fc880c94a95198874296d5cc1fd1\n                            61320b6920ce07787f86743b275d1ab3\nNonce =                     2f6d1f0434d8848c1177441f\nRecord authentication key = e156e1f9b0b07b780cbe30f259e3c8da\nRecord encryption key =     6fc1c494519f944aae52fcd8b14e5b17\n                            1b5a9429d3b76e430d49940c0021d612\nPOLYVAL input =             6787f3ea22c127aaf195000000000000\n                            195495860f0400000000000000000000\n                            50000000000000003000000000000000\nPOLYVAL result =            2c480ed9d236b1df24c6eec109bd40c1\nPOLYVAL result XOR nonce =  032511dde6ee355335b1aade09bd40c1\n... and masked =            032511dde6ee355335b1aade09bd4041\nTag =                       6b62b84dc40c84636a5ec12020ec8c2c\nInitial counter =           6b62b84dc40c84636a5ec12020ec8cac\nResult (22 bytes) =         a254dad4f3f96b62b84dc40c84636a5e\n                            c12020ec8c2c\n\n\nPlaintext (9 bytes) =       c9882e5386fd9f92ec\nAAD (15 bytes) =            489c8fde2be2cf97e74e932d4ed87d\nKey =                       d1894728b3fed1473c528b8426a58299\n                            5929a1499e9ad8780c8d63d0ab4149c0\nNonce =                     9f572c614b4745914474e7c7\nRecord authentication key = 0533fd71f4119257361a3ff1469dd4e5\nRecord encryption key =     4feba89799be8ac3684fa2bb30ade0ea\n                            51390e6d87dcf3627d2ee44493853abe\nPOLYVAL input =             489c8fde2be2cf97e74e932d4ed87d00\n                            c9882e5386fd9f92ec00000000000000\n                            78000000000000004800000000000000\nPOLYVAL result =            bf160bc9ded8c63057d2c38aae552fb4\nPOLYVAL result XOR nonce =  204127a8959f83a113a6244dae552fb4\n... and masked =            204127a8959f83a113a6244dae552f34\nTag =                       c0fd3dc6628dfe55ebb0b9fb2295c8c2\nInitial counter =           c0fd3dc6628dfe55ebb0b9fb2295c8c2\nResult (25 bytes) =         0df9e308678244c44bc0fd3dc6628dfe\n                            55ebb0b9fb2295c8c2\nPlaintext (12 bytes) =      1db2316fd568378da107b52b\nAAD (20 bytes) =            0da55210cc1c1b0abde3b2f204d1e9f8\n                            b06bc47f\nKey =                       a44102952ef94b02b805249bac80e6f6\n                            1455bfac8308a2d40d8c845117808235\nNonce =                     5c9e940fea2f582950a70d5a\nRecord authentication key = 64779ab10ee8a280272f14cc8851b727\nRecord encryption key =     25f40fc63f49d3b9016a8eeeb75846e0\n                            d72ca36ddbd312b6f5ef38ad14bd2651\nPOLYVAL input =             0da55210cc1c1b0abde3b2f204d1e9f8\n                            b06bc47f000000000000000000000000\n                            1db2316fd568378da107b52b00000000\n                            a0000000000000006000000000000000\nPOLYVAL result =            cc86ee22c861e1fd474c84676b42739c\nPOLYVAL result XOR nonce =  90187a2d224eb9d417eb893d6b42739c\n... and masked =            90187a2d224eb9d417eb893d6b42731c\nTag =                       404099c2587f64979f21826706d497d5\nInitial counter =           404099c2587f64979f21826706d497d5\nResult (28 bytes) =         8dbeb9f7255bf5769dd56692404099c2\n                            587f64979f21826706d497d5\n\n\nPlaintext (15 bytes) =      21702de0de18baa9c9596291b08466\nAAD (25 bytes) =            f37de21c7ff901cfe8a69615a93fdf7a\n                            98cad481796245709f\nKey =                       9745b3d1ae06556fb6aa7890bebc18fe\n                            6b3db4da3d57aa94842b9803a96e07fb\nNonce =                     6de71860f762ebfbd08284e4\nRecord authentication key = 27c2959ed4daea3b1f52e849478de376\nRecord encryption key =     307a38a5a6cf231c0a9af3b527f23a62\n                            e9a6ff09aff8ae669f760153e864fc93\nPOLYVAL input =             f37de21c7ff901cfe8a69615a93fdf7a\n                            98cad481796245709f00000000000000\n                            21702de0de18baa9c9596291b0846600\n                            c8000000000000007800000000000000\nPOLYVAL result =            c4fa5e5b713853703bcf8e6424505fa5\nPOLYVAL result XOR nonce =  a91d463b865ab88beb4d0a8024505fa5\n... and masked =            a91d463b865ab88beb4d0a8024505f25\nTag =                       b3080d28f6ebb5d3648ce97bd5ba67fd\nInitial counter =           b3080d28f6ebb5d3648ce97bd5ba67fd\nResult (31 bytes) =         793576dfa5c0f88729a7ed3c2f1bffb3\n                            080d28f6ebb5d3648ce97bd5ba67fd\n\n\nPlaintext (18 bytes) =      b202b370ef9768ec6561c4fe6b7e7296\n                            fa85\nAAD (30 bytes) =            9c2159058b1f0fe91433a5bdc20e214e\n                            ab7fecef4454a10ef0657df21ac7\nKey =                       b18853f68d833640e42a3c02c25b6486\n                            9e146d7b233987bddfc240871d7576f7\nNonce =                     028ec6eb5ea7e298342a94d4\nRecord authentication key = 670b98154076ddb59b7a9137d0dcc0f0\nRecord encryption key =     78116d78507fbe69d4a820c350f55c7c\n                            b36c3c9287df0e9614b142b76a587c3f\nPOLYVAL input =             9c2159058b1f0fe91433a5bdc20e214e\n                            ab7fecef4454a10ef0657df21ac70000\n                            b202b370ef9768ec6561c4fe6b7e7296\n                            fa850000000000000000000000000000\n                            f0000000000000009000000000000000\nPOLYVAL result =            4e4108f09f41d797dc9256f8da8d58c7\nPOLYVAL result XOR nonce =  4ccfce1bc1e6350fe8b8c22cda8d58c7\n... and masked =            4ccfce1bc1e6350fe8b8c22cda8d5847\nTag =                       454fc2a154fea91f8363a39fec7d0a49\nInitial counter =           454fc2a154fea91f8363a39fec7d0ac9\nResult (34 bytes) =         857e16a64915a787637687db4a951963\n                            5cdd454fc2a154fea91f8363a39fec7d\n                            0a49\n\n\nPlaintext (21 bytes) =      ced532ce4159b035277d4dfbb7db6296\n                            8b13cd4eec\nAAD (35 bytes) =            734320ccc9d9bbbb19cb81b2af4ecbc3\n                            e72834321f7aa0f70b7282b4f33df23f\n                            167541\nKey =                       3c535de192eaed3822a2fbbe2ca9dfc8\n                            8255e14a661b8aa82cc54236093bbc23\nNonce =                     688089e55540db1872504e1c\nRecord authentication key = cb8c3aa3f8dbaeb4b28a3e86ff6625f8\nRecord encryption key =     02426ce1aa3ab31313b0848469a1b5fc\n                            6c9af9602600b195b04ad407026bc06d\nPOLYVAL input =             734320ccc9d9bbbb19cb81b2af4ecbc3\n                            e72834321f7aa0f70b7282b4f33df23f\n                            16754100000000000000000000000000\n                            ced532ce4159b035277d4dfbb7db6296\n                            8b13cd4eec0000000000000000000000\n                            1801000000000000a800000000000000\nPOLYVAL result =            ffd503c7dd712eb3791b7114b17bb0cf\nPOLYVAL result XOR nonce =  97558a228831f5ab0b4b3f08b17bb0cf\n... and masked =            97558a228831f5ab0b4b3f08b17bb04f\nTag =                       9d6c7029675b89eaf4ba1ded1a286594\nInitial counter =           9d6c7029675b89eaf4ba1ded1a286594\nResult (37 bytes) =         626660c26ea6612fb17ad91e8e767639\n                            edd6c9faee9d6c7029675b89eaf4ba1d\n                            ed1a286594",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "C.3. Counter Wrap Tests",
      "section_title": true,
      "ja": "C.3. カウンターラップテスト"
    },
    {
      "indent": 3,
      "text": "The tests in this section use AEAD_AES_256_GCM_SIV and are crafted to test correct wrapping of the block counter.",
      "ja": "このセクションのテストはAEAD_AES_256_GCM_SIVを使用し、ブロックカウンターの正しいラッピングをテストするように作成されています。"
    },
    {
      "indent": 3,
      "text": "Plaintext (32 bytes) =      00000000000000000000000000000000\n                            4db923dc793ee6497c76dcc03a98e108\nAAD (0 bytes) =\nKey =                       00000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     000000000000000000000000\nRecord authentication key = dc95c078a24089895275f3d86b4fb868\nRecord encryption key =     779b38d15bffb63d39d6e9ae76a9b2f3\n                            75d11b0e3a68c422845c7d4690fa594f\nPOLYVAL input =             00000000000000000000000000000000\n                            4db923dc793ee6497c76dcc03a98e108\n                            00000000000000000001000000000000\nPOLYVAL result =            7367cdb411b730128dd56e8edc0eff56\nPOLYVAL result XOR nonce =  7367cdb411b730128dd56e8edc0eff56\n... and masked =            7367cdb411b730128dd56e8edc0eff56\nTag =                       ffffffff000000000000000000000000\nInitial counter =           ffffffff000000000000000000000080\nResult (48 bytes) =         f3f80f2cf0cb2dd9c5984fcda908456c\n                            c537703b5ba70324a6793a7bf218d3ea\n                            ffffffff000000000000000000000000\n\n\nPlaintext (24 bytes) =      eb3640277c7ffd1303c7a542d02d3e4c\n                            0000000000000000\nAAD (0 bytes) =\nKey =                       00000000000000000000000000000000\n                            00000000000000000000000000000000\nNonce =                     000000000000000000000000\nRecord authentication key = dc95c078a24089895275f3d86b4fb868\nRecord encryption key =     779b38d15bffb63d39d6e9ae76a9b2f3\n                            75d11b0e3a68c422845c7d4690fa594f\nPOLYVAL input =             eb3640277c7ffd1303c7a542d02d3e4c\n                            00000000000000000000000000000000\n                            0000000000000000c000000000000000\nPOLYVAL result =            7367cdb411b730128dd56e8edc0eff56\nPOLYVAL result XOR nonce =  7367cdb411b730128dd56e8edc0eff56\n... and masked =            7367cdb411b730128dd56e8edc0eff56\nTag =                       ffffffff000000000000000000000000\nInitial counter =           ffffffff000000000000000000000080\nResult (40 bytes) =         18ce4f0b8cb4d0cac65fea8f79257b20\n                            888e53e72299e56dffffffff00000000\n                            0000000000000000",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "The authors would like to thank Daniel Bleichenbacher, Uri Blumenthal, Deb Cooley's team at NSA Information Assurance, Scott Fluhrer, Tetsu Iwata, Tibor Jager, John Mattsson, Ondrej Mosnacek, Kenny Paterson, Bart Preneel, Yannick Seurin, and Bjoern Tackmann for their helpful suggestions and review.",
      "ja": "著者は、ダニエルブライチェンバッハー、ウリブルーメンタール、NSA情報保証のデブクーリーのチーム、スコットフルーラー、岩田徹、ティボールイェーガー、ジョンマットソン、オンドレイモスナセク、ケニーパターソン、バートプレニール、ヤニックスリン、およびビョーンタックマンに感謝します。提案とレビュー。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Shay Gueron University of Haifa and Amazon Abba Khoushy Ave 199 Haifa 3498838 Israel",
      "ja": "シェイゲロンハイファ大学およびアマゾンアバクーシーアベニュー199ハイファ3498838イスラエル"
    },
    {
      "indent": 3,
      "text": "Email: shay@math.haifa.ac.il",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Adam Langley Google LLC 345 Spear St San Francisco, CA 94105 United States of America",
      "ja": "Adam Langley Google LLC 345 Spear Stサンフランシスコ、カリフォルニア94105アメリカ合衆国"
    },
    {
      "indent": 3,
      "text": "Email: agl@google.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Yehuda Lindell Bar-Ilan University and Unbound Tech Ramat Gan 5290002 Israel",
      "ja": "イェフダリンデルバーイラン大学とアンバウンドテックラマトガン5290002イスラエル"
    },
    {
      "indent": 3,
      "text": "Email: Yehuda.Lindell@biu.ac.il",
      "raw": true,
      "ja": ""
    }
  ]
}