{
  "title": {
    "text": "RFC 9741 - Concise Data Definition Language (CDDL): Additional Control Operators for the Conversion and Processing of Text",
    "ja": "RFC 9741 - 簡潔なデータ定義言語（CDDL）：テキストの変換と処理のための追加の制御演算子"
  },
  "number": 9741,
  "created_at": "2025-03-10 23:24:06.366607+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                        C. Bormann\nRequest for Comments: 9741                        Universität Bremen TZI\nCategory: Standards Track                                     March 2025\nISSN: 2070-1721",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Concise Data Definition Language (CDDL): Additional Control Operators for the Conversion and Processing of Text",
      "section_title": true,
      "ja": "簡潔なデータ定義言語（CDDL）：テキストの変換と処理のための追加の制御演算子"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "section_title": true,
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides \"control operators\" as its main language extension point. RFCs have added to this extension point in both an application-specific and a more general way.",
      "ja": "RFC 8610に標準化された簡潔なデータ定義言語（CDDL）は、その主要言語拡張ポイントとして「制御演算子」を提供します。RFCは、アプリケーション固有とより一般的な方法の両方で、この拡張ポイントに追加されました。"
    },
    {
      "indent": 3,
      "text": "The present document defines a number of additional generally applicable control operators for text conversion (bytes, integers, printf-style formatting, and JSON) and for an operation on text.",
      "ja": "現在のドキュメントでは、テキスト変換（バイト、整数、printfスタイルのフォーマット、およびJSON）およびテキストの操作について、多くの追加の追加適用制御演算子を定義しています。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "section_title": true,
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準トラックドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、インターネットエンジニアリングタスクフォース（IETF）の製品です。IETFコミュニティのコンセンサスを表しています。公開レビューを受けており、インターネットエンジニアリングステアリンググループ（IESG）からの出版が承認されています。インターネット標準の詳細については、RFC 7841のセクション2で入手できます。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9741.",
      "ja": "このドキュメントの現在のステータス、任意のERRATA、およびそのフィードバックを提供する方法に関する情報は、https://www.rfc-editor.org/info/rfc9741で取得できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "section_title": true,
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2025 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（c）2025 IETF Trustおよび文書著者として特定された人。無断転載を禁じます。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Revised BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Revised BSD License.",
      "ja": "このドキュメントは、BCP 78およびIETFドキュメント（https://trustee.ietf.org/license-info）に関連するIETF Trustの法的規定の対象となります。この文書に関するあなたの権利と制限を説明するので、これらの文書を注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、セクション4.Eで説明されている法的規定のセクション4.Eで説明されており、改訂されたBSDライセンスで説明されている保証なしで提供されるように、改訂されたBSDライセンステキストを含める必要があります。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "section_title": true,
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction\n  1.1.  Terminology\n2.  Text Conversion\n  2.1.  Byte Strings: Base 16 (Hex), Base 32, Base 45, and Base 64\n  2.2.  Numerals\n  2.3.  Printf-Style Formatting\n  2.4.  JSON Values\n3.  Text Processing\n  3.1.  Join\n4.  IANA Considerations\n5.  Security Considerations\n6.  References\n  6.1.  Normative References\n  6.2.  Informative References\nList of Figures\nList of Tables\nAcknowledgements\nAuthor's Address",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "The Concise Data Definition Language (CDDL), standardized in [RFC8610], provides \"control operators\" as its main language extension point (Section 3.8 of [RFC8610]). RFCs have added to this extension point in both an application-specific [RFC9090] and a more general [RFC9165] way.",
      "ja": "[RFC8610]に標準化された簡潔なデータ定義言語（CDDL）は、その主要言語拡張ポイント（[RFC8610]のセクション3.8）として「コントロール演算子」を提供します。RFCは、アプリケーション固有の[RFC9090]とより一般的な[RFC9165]方法の両方で、この拡張ポイントに追加されました。"
    },
    {
      "indent": 3,
      "text": "The present document defines a number of additional generally applicable control operators. In Table 1, the column marked t is for \"target type\" (left-hand side), and the column marked c is for \"controller type\" (right-hand side).",
      "ja": "現在のドキュメントでは、一般的に適用可能な多くの制御オペレーターを定義しています。表1では、tとマークされた列は「ターゲットタイプ」（左側）用で、cとマークされた列は「コントローラータイプ」（右側）用です。"
    },
    {
      "indent": 4,
      "text": "+===============+=========+=======+==============================+\n| Name          | t       | c     | Purpose                      |\n+===============+=========+=======+==============================+\n| .b64u, .b64c  | text    | bytes | Base64 representation of     |\n|               |         |       | byte strings                 |\n+---------------+---------+-------+------------------------------+\n| .b64u-sloppy, | text    | bytes | Sloppy-tolerant variants of  |\n| .b64c-sloppy  |         |       | the above                    |\n+---------------+---------+-------+------------------------------+\n| .hex, .hexlc, | text    | bytes | Base16 representation of     |\n| .hexuc        |         |       | byte strings                 |\n+---------------+---------+-------+------------------------------+\n| .b32, .h32    | text    | bytes | Base32 representation of     |\n|               |         |       | byte strings                 |\n+---------------+---------+-------+------------------------------+\n| .b45          | text    | bytes | Base45 representation of     |\n|               |         |       | byte strings                 |\n+---------------+---------+-------+------------------------------+\n| .base10       | text    | int   | Text representation of       |\n|               |         |       | integer numbers              |\n+---------------+---------+-------+------------------------------+\n| .printf       | text    | array | Printf-formatted text        |\n|               |         |       | representation of data items |\n+---------------+---------+-------+------------------------------+\n| .json         | text    | any   | Text representation of JSON  |\n|               |         |       | values                       |\n+---------------+---------+-------+------------------------------+\n| .join         | text or | array | Build text or byte string    |\n|               | bytes   |       | from array of components     |\n+---------------+---------+-------+------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 8,
      "text": "Table 1: Summary of New Control Operators in This Document",
      "ja": "表1：このドキュメントの新しい制御演算子の概要"
    },
    {
      "indent": 0,
      "text": "1.1. Terminology",
      "section_title": true,
      "ja": "1.1. 用語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "このドキュメント内のキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、および「OPTIONAL」は、ここに示すようにすべて大文字で表示されている場合にのみ、BCP 14 [RFC2119] [RFC8174] で説明されているように解釈されます。"
    },
    {
      "indent": 3,
      "text": "Regular expressions mentioned in the text are as defined in [RFC9485].",
      "ja": "テキストで言及されている正規表現は、[RFC9485]で定義されています。"
    },
    {
      "indent": 3,
      "text": "This specification uses terminology from [RFC8610]. In particular, with respect to control operators, \"target\" refers to the left-hand-side operand and \"controller\" to the right-hand-side operand. \"Tool\" refers to tools along the lines of that described in Appendix F of [RFC8610]. Note also that the data model underlying CDDL provides for text strings as well as byte strings as two separate types, which are then collectively referred to as \"strings\".",
      "ja": "この仕様では、[RFC8610]の用語を使用します。特に、制御演算子に関しては、「ターゲット」とは、左側のオペランドと右側のオペランドを「コントローラー」を指します。「ツール」とは、[RFC8610]の付録Fに記載されているものの線に沿ったツールを指します。また、CDDLの根底にあるデータモデルは、2つの別々のタイプとしてテキスト文字列とバイト文字列を提供し、「文字列」と集合的に呼ばれることにも注意してください。"
    },
    {
      "indent": 3,
      "text": "The term \"opinionated\" is used in this document to explain that the selection of operators included is somewhat frugal, based on opinions about what the preferred (and likely) usage scenarios will be. Specifically, not including a potential choice doesn't by itself intend to express that the choice is unacceptable; it might still be added in a future registration if these opinions evolve.",
      "ja": "このドキュメントでは、「意見を述べた」という用語は、含まれるオペレーターの選択が、好みの（および可能性の高い）使用シナリオが何であるかについての意見に基づいて、やや質素であることを説明するために使用されています。具体的には、潜在的な選択を含めないこと自体は、選択が受け入れられないことを表現するつもりはありません。これらの意見が進化した場合、将来の登録にまだ追加される可能性があります。"
    },
    {
      "indent": 0,
      "text": "2. Text Conversion",
      "section_title": true,
      "ja": "2. テキスト変換"
    },
    {
      "indent": 0,
      "text": "2.1. Byte Strings: Base 16 (Hex), Base 32, Base 45, and Base 64",
      "section_title": true,
      "ja": "2.1. バイト文字列：ベース16（ヘックス）、ベース32、ベース45、およびベース64"
    },
    {
      "indent": 3,
      "text": "A CDDL model often defines data that are byte strings in essence but need to be transported in various encoded forms, such as base64 or hex. This section defines a number of control operators to model these conversions.",
      "ja": "CDDLモデルは、多くの場合、本質的にバイト文字列であるが、Base64やHexなどのさまざまなエンコードされたフォームで輸送する必要があるデータを定義します。このセクションでは、これらの変換をモデル化するために多くの制御演算子を定義します。"
    },
    {
      "indent": 3,
      "text": "The control operators generally are of a form that could be used like this:",
      "ja": "コントロール演算子は一般に、次のように使用できる形式です。"
    },
    {
      "indent": 3,
      "text": "signature-for-json = text .b64u signature\nsignature = bytes .cbor COSE_Sign1",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The specification of these control operators cannot provide full coverage of the large number of transformations in use; it focuses on [RFC4648] and additionally [RFC9285], as shown in Table 2. For the representations defined in [RFC4648], this specification uses names as inspired by Section 8 of RFC 8949 [STD94]:",
      "ja": "これらの制御演算子の仕様は、使用中の多数の変換を完全にカバーすることはできません。[RFC4648]、さらに[RFC9285]に焦点を当てています。表2に示すように。[RFC4648]で定義されている表現については、この仕様では、RFC 8949 [STD94]のセクション8に触発された名前を使用します。"
    },
    {
      "indent": 3,
      "text": "+==============+===========================+========================+\n| Name         | Meaning                   | Reference              |\n+==============+===========================+========================+\n| .b64u        | Base64url, no padding     | Section 5 of           |\n|              |                           | [RFC4648]              |\n+--------------+---------------------------+------------------------+\n| .b64u-sloppy | Base64url, no padding,    | Section 5 of           |\n|              | sloppy                    | [RFC4648]              |\n+--------------+---------------------------+------------------------+\n| .b64c        | Base64 classic, padding   | Section 4 of           |\n|              |                           | [RFC4648]              |\n+--------------+---------------------------+------------------------+\n| .b64c-sloppy | Base64 classic, padding,  | Section 4 of           |\n|              | sloppy                    | [RFC4648]              |\n+--------------+---------------------------+------------------------+\n| .b32         | Base32, no padding        | Section 6 of           |\n|              |                           | [RFC4648]              |\n+--------------+---------------------------+------------------------+\n| .h32         | Base32 with \"Extended     | Section 7 of           |\n|              | Hex\" alphabet, no padding | [RFC4648]              |\n+--------------+---------------------------+------------------------+\n| .hex         | Base16 (hex), either case | Section 8 of           |\n|              |                           | [RFC4648]              |\n+--------------+---------------------------+------------------------+\n| .hexlc       | Base16 (hex), lower case  | Section 8 of           |\n|              |                           | [RFC4648]              |\n+--------------+---------------------------+------------------------+\n| .hexuc       | Base16 (hex), upper case  | Section 8 of           |\n|              |                           | [RFC4648]              |\n+--------------+---------------------------+------------------------+\n| .b45         | Base45                    | [RFC9285]              |\n+--------------+---------------------------+------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "Table 2: Control Operators for Text Conversion of Byte Strings",
      "ja": "表2：バイト文字列のテキスト変換のための制御演算子"
    },
    {
      "indent": 3,
      "text": "Note that this specification is somewhat opinionated here: It does not provide base64url or base32(hex) encoding with padding or base64 classic without padding. Experience indicates that these combinations only ever occur in error, so the usability of CDDL is increased by not providing them in the first place. Also, adding \"c\" makes sure that any decision for classic base64 is actively taken.",
      "ja": "この仕様はここで多少意見を述べていることに注意してください。これは、パディングなしでパディングまたはbase64クラシックでエンコードするbase64urlまたはbase32（六角）を提供しません。経験は、これらの組み合わせが誤ってのみ発生することを示しているため、CDDLの使いやすさはそもそも提供しないことで増加します。また、「C」を追加すると、Classic Base64の決定が積極的に行われることを確認します。"
    },
    {
      "indent": 3,
      "text": "These control operators are \"strict\" in their matching, i.e., they only match base encodings that conform to the mandates of their defining documents. Note that this also means that .b64u and .b64c only match text strings composed of the set of characters defined for each of them, respectively. (This is perhaps worth pointing out explicitly as it contrasts with the \"b64\" literal prefix that can be used to notate byte strings in CDDL source code, which simply accepts characters from either alphabet. This behavior is different from the matching behavior of the four base64 control operators defined here.)",
      "ja": "これらの制御オペレーターは、マッチングで「厳格」です。つまり、定義するドキュメントの任務に準拠するベースエンコーディングのみを一致させます。これは、.b64uと.b64cがそれぞれに定義された文字のセットで構成されるテキスト文字列のみを一致させることも意味します。（これはおそらく、Alphabetの文字を単に受け入れるCDDLソースコードのバイト文字列を記述するために使用できる「B64」リテラルプレフィックスとは対照的であるため、おそらく明示的に指摘する価値があります。"
    },
    {
      "indent": 3,
      "text": "The additional designation \"sloppy\" indicates that the text string is not validated for any additional bits being zero, in variance to what is specified in the paragraph that follows Table 1 in Section 4 of [RFC4648]. Note that the present specification is opinionated again in not specifying a sloppy variant of base32 or base32hex, as no legacy use of sloppy base32(hex) was known at the time of writing. Base45 [RFC9285] is known to be suboptimal for use in environments with limited data transparency (such as URLs) but is included because of its close relationship to QR codes and its wide use in health informatics (note that base45 is strongly specified not to allow sloppy forms of encoding).",
      "ja": "追加の指定「sloppy」は、[RFC4648]のセクション4の表1に次の段落で指定されているものとは異なる追加のビットについて、テキスト文字列がゼロであることに対して検証されていないことを示します。現在の仕様は、base32またはbase32hexのずさんなバリアントを指定しないことで再び意見を述べられていることに注意してください。執筆時点ではずさんなbase32（六角）のレガシーの使用は知られていなかったためです。Base45 [RFC9285]は、データの透明性（URLなど）が限られている環境で使用するために最適ではないことが知られていますが、QRコードとの密接な関係と健康情報学での幅広い使用のために含まれています（Base45は、エンコーディングのずさんな形式を許可しないように強く指定されています）。"
    },
    {
      "indent": 0,
      "text": "2.2. Numerals",
      "section_title": true,
      "ja": "2.2. 数字"
    },
    {
      "indent": 11,
      "text": "+=========+============================+===========+\n| Name    | Meaning                    | Reference |\n+=========+============================+===========+\n| .base10 | Base-ten (decimal) integer | ---       |\n+---------+----------------------------+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 13,
      "text": "Table 3: Control Operator for Text Conversion of Integers",
      "ja": "表3：整数のテキスト変換のための制御演算子"
    },
    {
      "indent": 3,
      "text": "The control operator .base10 allows the modeling of text strings that carry an integer number in decimal form (as a text string with digits in the usual base-ten positional numeral system), such as in the uint64/int64 formats of YANG-JSON [RFC7951].",
      "ja": "コントロール演算子.base10は、Yang-json [RFC7951]のUINT64/INT64形式のように、10進数（通常のベーステン位置数値システムに数字を持つテキスト文字列として）で整数数を運ぶテキスト文字列のモデリングを許可します。"
    },
    {
      "indent": 3,
      "text": "yang-json-sid = text .base10 (0..9223372036854775807)",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Again, the specification is opinionated by only providing for integer numbers represented without leading zeros, i.e., the decimal integer numerals match the regular expression 0|-?[1-9][0-9]* (of course, this is further restricted by the control type). See Section 2.3 for more flexibility and for other numeric bases such as octal, hexadecimal, or binary conversions.",
      "ja": "繰り返しますが、仕様は、先行ゼロなしで表される整数数を提供することによってのみ意見があります。つまり、小数整数数は正規表現0 |  - ？[1-9] [0-9]*（もちろん、これはコントロールタイプによってさらに制限されます）。より柔軟性、およびOctal、16進数、バイナリ変換などの他の数値ベースについては、セクション2.3を参照してください。"
    },
    {
      "indent": 3,
      "text": "Note that this control operator governs text representations of integers and should not be confused with the control operators governing text representations of byte strings (such as .b64u). This contrast is somewhat reinforced by spelling out \"base\" in the name .base10 as opposed to those of the byte string operators.",
      "ja": "このコントロール演算子は、整数のテキスト表現を管理しており、バイト文字列（.B64Uなど）のテキスト表現を支配するコントロール演算子と混同しないでください。このコントラストは、バイト文字列演算子のものとは対照的に、名前の「ベース」を「ベース」に綴ることによって多少補強されます。"
    },
    {
      "indent": 0,
      "text": "2.3. Printf-Style Formatting",
      "section_title": true,
      "ja": "2.3. printfスタイルのフォーマット"
    },
    {
      "indent": 5,
      "text": "+=========+=========================================+===========+\n| Name    | Meaning                                 | Reference |\n+=========+=========================================+===========+\n| .printf | Printf-style formatting of data item(s) | ---       |\n+---------+-----------------------------------------+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 7,
      "text": "Table 4: Control Operator for Printf-Style Formatting of Data Item(s)",
      "ja": "表4：データ項目のprintfスタイルのフォーマットのための制御演算子"
    },
    {
      "indent": 3,
      "text": "The control operator .printf allows the modeling of text strings that carry various formatted information, as long as the format can be represented in printf-style formatting strings as they are used in the C language (see Section 7.23.6.1 of [C]; note that the \"C23\" standard includes %b and %B for formatting into binary digits).",
      "ja": "コントロール演算子.Printfは、形式がC言語で使用されているように印刷された形式の文字列で表現できる限り、さまざまなフォーマットされた情報を伝達するテキスト文字列のモデリングを許可します（「C23」標準には、バイナリの図式にフォーマットするための％Bおよび％Bが含まれることに注意してください）。"
    },
    {
      "indent": 3,
      "text": "The controller (right-hand side) of the .printf control is an array of one printf-style format string and zero or more data items that fit the individual conversion specifications in the format string. The construct matches a text string representing the textual output of an equivalent C-language printf function call that receives as arguments the format string and the data items following it in the array.",
      "ja": ".printfコントロールのコントローラー（右側）は、1つのprintfスタイルの形式の文字列と、個々の変換仕様にフォーマット文字列に適合するゼロ以上のデータ項目の配列です。コンストラクトは、形式の文字列とそれに続く配列に続くデータ項目を受信する同等のC言語Printf関数呼び出しのテキスト出力を表すテキスト文字列と一致します。"
    },
    {
      "indent": 3,
      "text": "Out of the functionality described for printf formatting in Section 7.23.6.1 of the C language specification [C], length modifiers (paragraph 7) are not used and MUST NOT be included in the format string. The \"s\" conversion specifier (paragraph 8) is used to interpolate a text string in UTF-8 form. The \"c\" conversion specifier (paragraph 8) represents a single Unicode scalar value as a UTF-8 character. The \"p\" and \"n\" conversion specifiers (paragraph 8) are not used and MUST NOT be included in the format string.",
      "ja": "C言語仕様[c]のセクション7.23.6.1で印刷された形式で説明されている機能のうち、長さの修飾子（パラグラフ7）は使用されておらず、形式の文字列に含める必要はありません。「S」変換指定子（パラグラフ8）を使用して、UTF-8フォームのテキスト文字列を補間します。「C」変換仕様（パラグラフ8）は、UTF-8文字として単一のユニコードスカラー値を表します。「p」および「n」変換仕様（パラグラフ8）は使用されておらず、形式の文字列に含めてはなりません。"
    },
    {
      "indent": 3,
      "text": "In the following example, my_alg_19 matches the text string \"0x0013\":",
      "ja": "次の例では、my_alg_19はテキスト文字列「0x0013」と一致します。"
    },
    {
      "indent": 3,
      "text": "my_alg_19 = hexlabel<19>\nhexlabel<K> = text .printf ([\"0x%04x\", K])",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The data items in the controller array do not need to be literals, as in the following example:",
      "ja": "次の例のように、コントローラーアレイ内のデータ項目はリテラルである必要はありません。"
    },
    {
      "indent": 3,
      "text": "any_alg = hexlabel<1..20>\nhexlabel<K> = text .printf ([\"0x%04x\", K])",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Here, any_alg matches the text strings \"0x0013\" or \"0x0001\" but not \"0x1234\".",
      "ja": "ここで、any_algはテキスト文字列「0x0013」または「0x0001」と一致しますが、「0x1234」ではありません。"
    },
    {
      "indent": 0,
      "text": "2.4. JSON Values",
      "section_title": true,
      "ja": "2.4. JSON値"
    },
    {
      "indent": 3,
      "text": "Some applications store complete JSON texts [STD90] into text strings. The JSON value of these can easily be defined in CDDL by using the default JSON-to-CBOR conversion rules provided in Section 6.2 of RFC 8949 [STD94]. This is supported by a control operator similar to .cbor as defined in Section 3.8.4 of [RFC8610].",
      "ja": "一部のアプリケーションは、完全なJSONテキスト[STD90]をテキスト文字列に保存します。これらのJSON値は、RFC 8949 [STD94]のセクション6.2に記載されているデフォルトのJSON間変換ルールを使用することにより、CDDLで簡単に定義できます。これは、[RFC8610]のセクション3.8.4で定義されているように、.cborと同様の制御演算子によってサポートされています。"
    },
    {
      "indent": 22,
      "text": "+=======+=========+===========+\n| Name  | Meaning | Reference |\n+=======+=========+===========+\n| .json | JSON    | [STD90]   |\n+-------+---------+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 24,
      "text": " Table 5: Control Operator for Text Conversion of JSON Values",
      "ja": "表5：JSON値のテキスト変換のためのコントロール演算子"
    },
    {
      "indent": 3,
      "text": "embedded-claims = text .json claims\nclaims = {iss: text, exp: text}",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Notes:",
      "ja": "注："
    },
    {
      "indent": 6,
      "text": "* JSON has known interoperability problems [RFC7493]. While Section 4 of [RFC7493] probably is not relevant to this specification, Section 2 of [RFC7493] provides requirements that need to be followed to make use of the generic data model underlying CDDL. Note that the intention of Section 2.2 of [RFC7493] is directly supported by Section 6.2 of RFC 8949 [STD94]. The recommendation to use text strings for representing numbers outside JSON's interoperable range is a requirement on the application data model and therefore needs to be reflected on the right-hand side of the .json control operator.",
      "ja": "* JSONは相互運用性の問題を知っています[RFC7493]。[RFC7493]のセクション4はおそらくこの仕様には関係ありませんが、[RFC7493]のセクション2には、CDDLの根底にある汎用データモデルを利用するために従う必要がある要件を提供します。[RFC7493]のセクション2.2の意図は、RFC 8949 [STD94]のセクション6.2で直接サポートされていることに注意してください。JSONの相互運用可能な範囲外の数値を表すためにテキスト文字列を使用することを推奨することは、アプリケーションデータモデルの要件であるため、.JSONコントロール演算子の右側に反映する必要があります。"
    },
    {
      "indent": 6,
      "text": "* This control operator provides no way to constrain the use of blank space or other serialization variants in the JSON representation of the data items; restrictions on the serialization to specific variants (e.g., not providing for the addition of any insignificant blank space and prescribing an order in which map entries are serialized) could be defined in future control operators.",
      "ja": "* この制御演算子は、データ項目のJSON表現に空白スペースまたはその他のシリアル化バリアントの使用を制約する方法を提供しません。特定のバリエーションへのシリアル化の制限（たとえば、取るに足らない空白スペースの追加を提供しない、マップエントリがシリアル化される順序を処方する）は、将来の制御演算子で定義できます。"
    },
    {
      "indent": 6,
      "text": "* A .jsonseq is not provided in this document for JSON text sequences [RFC7464], as no use case for inclusion in CDDL is known at the time of writing; again, future control operators could address this use case.",
      "ja": "* a .jsonseqは、JSONテキストシーケンス[RFC7464]のこのドキュメントでは提供されていません。CDDLに含まれる場合は、執筆時点では知られていないためです。繰り返しますが、将来の制御オペレーターはこのユースケースに対処できます。"
    },
    {
      "indent": 0,
      "text": "3. Text Processing",
      "section_title": true,
      "ja": "3. テキスト処理"
    },
    {
      "indent": 0,
      "text": "3.1. Join",
      "section_title": true,
      "ja": "3.1. 参加する"
    },
    {
      "indent": 3,
      "text": "Often, text strings need to be constructed out of parts that can best be modeled as an array.",
      "ja": "多くの場合、テキスト文字列は、配列としてモデル化するのが最適な部品から構築する必要があります。"
    },
    {
      "indent": 9,
      "text": "+=======+==================================+===========+\n| Name  | Meaning                          | Reference |\n+=======+==================================+===========+\n| .join | Concatenate elements of an array | ---       |\n+-------+----------------------------------+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 12,
      "text": "Table 6: Control Operator for Text Generation from Arrays",
      "ja": "表6：アレイからのテキスト生成の制御演算子"
    },
    {
      "indent": 3,
      "text": "For example, an IPv4 address in dotted-decimal might be modeled as in Figure 1.",
      "ja": "たとえば、図1のように、点線のIPv4アドレスがモデル化される場合があります。"
    },
    {
      "indent": 3,
      "text": "legacy-ip-address = text .join legacy-ip-address-elements\nlegacy-ip-address-elements = [bytetext, \".\", bytetext, \".\",\n                              bytetext, \".\", bytetext]\nbytetext = text .base10 byte\nbyte = 0..255",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 6,
      "text": "Figure 1: Using the .join Operator to Build Dotted-Decimal IPv4 Addresses",
      "ja": "図1：.join演算子を使用して、点線のIPv4アドレスを構築する"
    },
    {
      "indent": 3,
      "text": "The elements of the controller array need to be strings (text or byte strings). The control operator matches a data item if that data item is also a string, built by concatenating the strings in the array. The result of this concatenation is of the same kind of string (text or bytes) as the first element of the array. (If there is no element in the array, the .join construct matches either kind of empty string, obviously further constrained by the control operator target.) The concatenation is performed on the sequences of bytes in the strings. If the result of the concatenation is a text string, the resulting sequence of bytes only matches the target data item if that result is a valid text string (i.e., valid UTF-8). Note that in contrast to the algorithm used in Section 3.2.3 of RFC 8949 [STD94], there is no need for all individual byte sequences going into the concatenation to constitute valid text strings.",
      "ja": "コントローラーアレイの要素は、文字列（テキストまたはバイト文字列）である必要があります。コントロール演算子は、そのデータ項目がアレイ内の文字列を連結することによって構築された文字列でもある場合、データ項目と一致します。この連結の結果は、配列の最初の要素と同じ種類の文字列（テキストまたはバイト）です。（配列に要素がない場合、.Joinコンストラクトは、明らかに制御演算子ターゲットによってさらに制約されている空の文字列のいずれかの種類と一致します。）連鎖の連結は、文字列のバイトのシーケンスで実行されます。連結の結果がテキスト文字列である場合、結果の結果は、その結果が有効なテキスト文字列（つまり、有効なUTF-8）である場合にのみターゲットデータ項目と一致します。RFC 8949 [STD94]のセクション3.2.3で使用されているアルゴリズムとは対照的に、すべての個々のバイトシーケンスが連結に入って有効なテキスト文字列を構成する必要はないことに注意してください。"
    },
    {
      "indent": 3,
      "text": "Note that this control operator is hard to validate in the most general case, as this would require full parser functionality. Simple implementation strategies will use array elements with constant values as guideposts (\"markers\", such as the \".\" in Figure 1) for isolating the variable elements that need further validation at the CDDL data model level. Therefore, it is recommended to limit the use of .join to simple arrangements where the array elements are laid out explicitly and there are no adjacent variable elements without intervening constant values, and where these constant values do not occur within the text described by the variable elements. If more complex parsing functionality is required, the ABNF control operators (see Section 3 of [RFC9165]) may be useful; however, these cannot reach back into CDDL-specified elements like .join can.",
      "ja": "このコントロール演算子は、最も一般的なケースで検証するのが難しいことに注意してください。これには完全なパーサー機能が必要であるためです。単純な実装戦略では、CDDLデータモデルレベルでさらに検証する必要がある変数要素を分離するために、ガイドポスト（図1のような「マーカー」」として一定の値のアレイ要素を使用します。したがって、Array要素が明示的にレイアウトされ、一定の値に介入することなく隣接する変数要素がなく、可変要素で記述されたテキスト内でこれらの定数値が発生しない場合、.thing on of。o. on of o.Joinを単純な配置に制限することをお勧めします。より複雑な解析機能が必要な場合、ABNF制御演算子（[RFC9165]のセクション3を参照）が役立つ場合があります。ただし、これらは.Join CanのようなCDDL指定の要素に戻ることはできません。"
    },
    {
      "indent": 12,
      "text": "Implementation note: A validator implementation can use the marker elements to scan the text and isolate the variable elements. It also can build a parsing regexp from the elements of the controller array, with capture groups for each element, and validate the captures against the elements of the array. (For more about parsing regexps, see Section 6 of [RFC9485]; see also Section 8 of [RFC9485] for security considerations related to regexps.) In the most general case, these implementation strategies can exhibit false negatives, where the implementation cannot find the structure that would be successfully validated using the controller; it is RECOMMENDED that implementations provide full coverage at least for the marker-based subset outlined in the previous paragraph.",
      "ja": "実装注：バリデーターの実装は、マーカー要素を使用してテキストをスキャンし、変数要素を分離できます。また、各要素のキャプチャグループを使用して、コントローラーアレイの要素から解析の再遺伝子を構築し、配列の要素に対してキャプチャを検証することもできます。（修理の解析の詳細については、[RFC9485]のセクション6を参照してください。レジクスに関連するセキュリティ上の考慮事項については、[RFC9485]のセクション8も参照してください。）最も一般的なケースでは、これらの実装戦略は、コントローラーを使用して正常に検証される構造を実装できない誤ったネガを示すことができます。少なくとも前の段落で概説されているマーカーベースのサブセットには、実装が完全なカバレッジを提供することをお勧めします。"
    },
    {
      "indent": 0,
      "text": "4. IANA Considerations",
      "section_title": true,
      "ja": "4. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "IANA has registered the contents of Table 7 into the \"CDDL Control Operators\" registry of [IANA.cddl]:",
      "ja": "IANAは、[IANA.CDDL]の「CDDL制御演算子」レジストリに表7の内容を登録しました。"
    },
    {
      "indent": 23,
      "text": "+==============+===========+\n| Name         | Reference |\n+==============+===========+\n| .b64u        | RFC 9741  |\n+--------------+-----------+\n| .b64u-sloppy | RFC 9741  |\n+--------------+-----------+\n| .b64c        | RFC 9741  |\n+--------------+-----------+\n| .b64c-sloppy | RFC 9741  |\n+--------------+-----------+\n| .b45         | RFC 9741  |\n+--------------+-----------+\n| .b32         | RFC 9741  |\n+--------------+-----------+\n| .h32         | RFC 9741  |\n+--------------+-----------+\n| .hex         | RFC 9741  |\n+--------------+-----------+\n| .hexlc       | RFC 9741  |\n+--------------+-----------+\n| .hexuc       | RFC 9741  |\n+--------------+-----------+\n| .base10      | RFC 9741  |\n+--------------+-----------+\n| .printf      | RFC 9741  |\n+--------------+-----------+\n| .json        | RFC 9741  |\n+--------------+-----------+\n| .join        | RFC 9741  |\n+--------------+-----------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 27,
      "text": "Table 7: New Control Operators",
      "ja": "表7：新しい制御演算子"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "The security considerations in Section 5 of [RFC8610] apply. In addition, for the control operators defined in Section 2.1, the security considerations in Section 12 of [RFC4648] apply.",
      "ja": "[RFC8610]のセクション5のセキュリティ上の考慮事項が適用されます。さらに、セクション2.1で定義されている制御演算子には、[RFC4648]のセクション12のセキュリティ上の考慮事項が適用されます。"
    },
    {
      "indent": 0,
      "text": "6. References",
      "section_title": true,
      "ja": "6. 参考文献"
    },
    {
      "indent": 0,
      "text": "6.1. Normative References",
      "section_title": true,
      "ja": "6.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[C]        International Organization for Standardization,\n           \"Information technology - Programming languages - C\",\n           Fourth Edition, ISO/IEC 9899:2024, October 2024,\n           <https://www.iso.org/standard/82075.html>.  Technically\n           equivalent specification text is available at\n           <https://www.open-std.org/jtc1/sc22/wg14/www/docs/\n           n3220.pdf>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[IANA.cddl]\n           IANA, \"Concise Data Definition Language (CDDL)\",\n           <https://www.iana.org/assignments/cddl>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n           Requirement Levels\", BCP 14, RFC 2119,\n           DOI 10.17487/RFC2119, March 1997,\n           <https://www.rfc-editor.org/info/rfc2119>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n           Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n           <https://www.rfc-editor.org/info/rfc4648>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n           2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n           May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8610]  Birkholz, H., Vigano, C., and C. Bormann, \"Concise Data\n           Definition Language (CDDL): A Notational Convention to\n           Express Concise Binary Object Representation (CBOR) and\n           JSON Data Structures\", RFC 8610, DOI 10.17487/RFC8610,\n           June 2019, <https://www.rfc-editor.org/info/rfc8610>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC9165]  Bormann, C., \"Additional Control Operators for the Concise\n           Data Definition Language (CDDL)\", RFC 9165,\n           DOI 10.17487/RFC9165, December 2021,\n           <https://www.rfc-editor.org/info/rfc9165>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC9285]  Fältström, P., Ljunggren, F., and D.W. van Gulik, \"The\n           Base45 Data Encoding\", RFC 9285, DOI 10.17487/RFC9285,\n           August 2022, <https://www.rfc-editor.org/info/rfc9285>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC9485]  Bormann, C. and T. Bray, \"I-Regexp: An Interoperable\n           Regular Expression Format\", RFC 9485,\n           DOI 10.17487/RFC9485, October 2023,\n           <https://www.rfc-editor.org/info/rfc9485>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[STD90]    Internet Standard 90,\n           <https://www.rfc-editor.org/info/std90>.\n           At the time of writing, this STD comprises the following:\n\n           Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n           Interchange Format\", STD 90, RFC 8259,\n           DOI 10.17487/RFC8259, December 2017,\n           <https://www.rfc-editor.org/info/rfc8259>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[STD94]    Internet Standard 94,\n           <https://www.rfc-editor.org/info/std94>.\n           At the time of writing, this STD comprises the following:\n\n           Bormann, C. and P. Hoffman, \"Concise Binary Object\n           Representation (CBOR)\", STD 94, RFC 8949,\n           DOI 10.17487/RFC8949, December 2020,\n           <https://www.rfc-editor.org/info/rfc8949>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "6.2. Informative References",
      "section_title": true,
      "ja": "6.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[RFC7464]  Williams, N., \"JavaScript Object Notation (JSON) Text\n           Sequences\", RFC 7464, DOI 10.17487/RFC7464, February 2015,\n           <https://www.rfc-editor.org/info/rfc7464>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC7493]  Bray, T., Ed., \"The I-JSON Message Format\", RFC 7493,\n           DOI 10.17487/RFC7493, March 2015,\n           <https://www.rfc-editor.org/info/rfc7493>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC7951]  Lhotka, L., \"JSON Encoding of Data Modeled with YANG\",\n           RFC 7951, DOI 10.17487/RFC7951, August 2016,\n           <https://www.rfc-editor.org/info/rfc7951>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC9090]  Bormann, C., \"Concise Binary Object Representation (CBOR)\n           Tags for Object Identifiers\", RFC 9090,\n           DOI 10.17487/RFC9090, July 2021,\n           <https://www.rfc-editor.org/info/rfc9090>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "List of Figures",
      "section_title": true,
      "ja": "図のリスト"
    },
    {
      "indent": 3,
      "text": "Figure 1: Using the .join Operator to Build Dotted-Decimal IPv4 Addresses",
      "ja": "図1：.join演算子を使用して、点線のIPv4アドレスを構築する"
    },
    {
      "indent": 0,
      "text": "List of Tables",
      "section_title": true,
      "ja": "テーブルのリスト"
    },
    {
      "indent": 3,
      "text": "Table 1: Summary of New Control Operators in This Document",
      "ja": "表1：このドキュメントの新しい制御演算子の概要"
    },
    {
      "indent": 3,
      "text": "Table 2: Control Operators for Text Conversion of Byte Strings",
      "ja": "表2：バイト文字列のテキスト変換のための制御演算子"
    },
    {
      "indent": 3,
      "text": "Table 3: Control Operator for Text Conversion of Integers",
      "ja": "表3：整数のテキスト変換のための制御演算子"
    },
    {
      "indent": 3,
      "text": "Table 4: Control Operator for Printf-Style Formatting of Data Item(s)",
      "ja": "表4：データ項目のprintfスタイルのフォーマットのための制御演算子"
    },
    {
      "indent": 3,
      "text": "Table 5: Control Operator for Text Conversion of JSON Values",
      "ja": "表5：JSON値のテキスト変換のためのコントロール演算子"
    },
    {
      "indent": 3,
      "text": "Table 6: Control Operator for Text Generation from Arrays",
      "ja": "表6：アレイからのテキスト生成の制御演算子"
    },
    {
      "indent": 3,
      "text": "Table 7: New Control Operators",
      "ja": "表7：新しい制御演算子"
    },
    {
      "indent": 0,
      "text": "Acknowledgements",
      "section_title": true,
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Henk Birkholz suggested the need for many of the control operators defined here. The author would like to thank Laurence Lundblade and Jeremy O'Donoghue for sharpening some of the mandates, Mikolai Gütschow for improvements to some examples, A.J. Stein for serving as shepherd for this document and for his shepherd review, the IESG and Directorate reviewers (notably Ari Keränen, Darrel Miller, and Éric Vyncke), and Orie Steele for serving as responsible AD and for providing a detailed AD review.",
      "ja": "Henk Birkholzは、ここで定義されている多くの制御オペレーターの必要性を示唆しました。著者は、いくつかの任務のいくつかをシャープにしてくれたLaurence LundbladeとJeremy O'Donoghueに感謝したいと思います。この文書と彼の羊飼いのレビュー、IESGおよび監督のレビュアー（特にアリケラネン、ダレルミラー、エリックヴィンケ）、および責任ある広告を提供し、詳細な広告レビューを提供するために、彼の羊飼いのレビュー、IESGおよび監督のレビュー担当者のために奉仕するスタイン。"
    },
    {
      "indent": 0,
      "text": "Author's Address",
      "section_title": true,
      "ja": "著者の連絡先"
    },
    {
      "indent": 3,
      "text": "Carsten Bormann\nUniversität Bremen TZI\nPostfach 330440\nD-28359 Bremen\nGermany\nPhone: +49-421-218-63921\nEmail: cabo@tzi.org",
      "raw": true,
      "ja": ""
    }
  ]
}