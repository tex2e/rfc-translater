{
  "title": {
    "text": "RFC 9766 - Extensions for Weak Cache Consistency in NFSv4.2's Flexible File Layout",
    "ja": "RFC 9766 - NFSV4.2のフレキシブルファイルレイアウトのキャッシュの一貫性が弱いための拡張"
  },
  "number": 9766,
  "created_at": "2025-04-26 23:24:06.504630+09:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "Internet Engineering Task Force (IETF)                         T. Haynes\nRequest for Comments: 9766                                  T. Myklebust\nCategory: Standards Track                                    Hammerspace\nISSN: 2070-1721                                               April 2025",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Extensions for Weak Cache Consistency in NFSv4.2's Flexible File Layout",
      "section_title": true,
      "ja": "NFSV4.2のフレキシブルファイルレイアウトのキャッシュの一貫性が弱いための拡張"
    },
    {
      "indent": 0,
      "text": "Abstract",
      "section_title": true,
      "ja": "概要"
    },
    {
      "indent": 3,
      "text": "This document specifies extensions to NFSv4.2 for improving Weak Cache Consistency (WCC). These extensions introduce mechanisms that ensure partial writes performed under a Parallel NFS (pNFS) layout remain coherent and correctly tracked. The solution addresses concurrency and data integrity concerns that may arise when multiple clients write to the same file through separate data servers. By defining additional interactions among clients, metadata servers, and data servers, this specification enhances the reliability of NFSv4 in parallel-access environments and ensures consistency across diverse deployment scenarios.",
      "ja": "このドキュメントは、弱いキャッシュの一貫性（WCC）を改善するために、nfsv4.2への拡張機能を指定します。これらの拡張は、並列NFS（PNFS）レイアウトの下で実行される部分的な書き込みを確実に保証するメカニズムを導入します。このソリューションは、複数のクライアントが個別のデータサーバーを介して同じファイルに書き込むと発生する可能性のある同時性とデータの整合性の懸念に対処します。クライアント、メタデータサーバー、およびデータサーバー間の追加の対話を定義することにより、この仕様により、並列アクセス環境でのNFSV4の信頼性が向上し、多様な展開シナリオ全体で一貫性が確保されます。"
    },
    {
      "indent": 0,
      "text": "Status of This Memo",
      "section_title": true,
      "ja": "本文書の位置付け"
    },
    {
      "indent": 3,
      "text": "This is an Internet Standards Track document.",
      "ja": "これは、インターネット標準トラックドキュメントです。"
    },
    {
      "indent": 3,
      "text": "This document is a product of the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Further information on Internet Standards is available in Section 2 of RFC 7841.",
      "ja": "このドキュメントは、インターネットエンジニアリングタスクフォース（IETF）の製品です。IETFコミュニティのコンセンサスを表しています。公開レビューを受けており、インターネットエンジニアリングステアリンググループ（IESG）からの出版が承認されています。インターネット標準の詳細については、RFC 7841のセクション2で入手できます。"
    },
    {
      "indent": 3,
      "text": "Information about the current status of this document, any errata, and how to provide feedback on it may be obtained at https://www.rfc-editor.org/info/rfc9766.",
      "ja": "このドキュメントの現在のステータス、任意のERRATA、およびそのフィードバックを提供する方法に関する情報は、https://www.rfc-editor.org/info/rfc9766で取得できます。"
    },
    {
      "indent": 0,
      "text": "Copyright Notice",
      "section_title": true,
      "ja": "著作権表示"
    },
    {
      "indent": 3,
      "text": "Copyright (c) 2025 IETF Trust and the persons identified as the document authors. All rights reserved.",
      "ja": "著作権（c）2025 IETF Trustおよび文書著者として特定された人。無断転載を禁じます。"
    },
    {
      "indent": 3,
      "text": "This document is subject to BCP 78 and the IETF Trust's Legal Provisions Relating to IETF Documents (https://trustee.ietf.org/license-info) in effect on the date of publication of this document. Please review these documents carefully, as they describe your rights and restrictions with respect to this document. Code Components extracted from this document must include Revised BSD License text as described in Section 4.e of the Trust Legal Provisions and are provided without warranty as described in the Revised BSD License.",
      "ja": "このドキュメントは、BCP 78およびIETFドキュメント（https://trustee.ietf.org/license-info）に関連するIETF Trustの法的規定の対象となります。この文書に関するあなたの権利と制限を説明するので、これらの文書を注意深く確認してください。このドキュメントから抽出されたコードコンポーネントには、セクション4.Eで説明されている法的規定のセクション4.Eで説明されており、改訂されたBSDライセンスで説明されている保証なしで提供されるように、改訂されたBSDライセンステキストを含める必要があります。"
    },
    {
      "indent": 0,
      "text": "Table of Contents",
      "section_title": true,
      "ja": "目次"
    },
    {
      "indent": 3,
      "text": "1.  Introduction\n  1.1.  Definitions\n  1.2.  Requirements Language\n2.  Weak Cache Consistency (WCC)\n3.  Operation 77: LAYOUT_WCC - Layout Weak Cache Consistency\n  3.1.  ARGUMENT\n  3.2.  RESULT\n  3.3.  DESCRIPTION\n  3.4.  Implementation\n    3.4.1.  Examples of When to Use LAYOUT_WCC\n    3.4.2.  Examples of What to Send in LAYOUT_WCC\n  3.5.  Allowed Errors\n  3.6.  Extension of Existing Implementations\n  3.7.  Flexible File Layout Type\n4.  Extraction of XDR\n5.  Security Considerations\n6.  IANA Considerations\n7.  References\n  7.1.  Normative References\n  7.2.  Informative References\nAcknowledgments\nAuthors' Addresses",
      "raw": true,
      "toc": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "1. Introduction",
      "section_title": true,
      "ja": "1. はじめに"
    },
    {
      "indent": 3,
      "text": "In the Parallel NFS (pNFS) flexible file layout (see [RFC8435]), there is no mechanism for the data servers to update the metadata servers when the data portion of the file is modified. The metadata server needs this knowledge to correspondingly update the metadata portion of the file. If the client is using NFSv3 as the protocol with the data server, it can leverage Weak Cache Consistency (WCC) to update the metadata server of the attribute changes. In this document, we introduce a new operation called LAYOUT_WCC to NFSv4.2, which allows the client to periodically report the attributes of the data files to the metadata server.",
      "ja": "並列NFS（PNFS）フレキシブルファイルレイアウト（[RFC8435]を参照）では、ファイルのデータ部分が変更されたときにデータサーバーがメタデータサーバーを更新するメカニズムはありません。メタデータサーバーは、ファイルのメタデータ部分をそれに応じて更新するためにこの知識を必要とします。クライアントがデータサーバーを使用してプロトコルとしてNFSV3を使用している場合、属性のメタデータサーバーを更新して、弱いキャッシュの一貫性（WCC）を活用できます。このドキュメントでは、layout_wccという新しい操作をnfsv4.2に導入します。これにより、クライアントはデータファイルの属性をメタデータサーバーに定期的に報告できます。"
    },
    {
      "indent": 3,
      "text": "Using the process detailed in [RFC8178], the revisions in this document become an extension of NFSv4.2 [RFC7862]. They are built on top of the External Data Representation (XDR) [RFC4506] generated from [RFC7863].",
      "ja": "[RFC8178]で詳述されているプロセスを使用して、このドキュメントの改訂はNFSV4.2 [RFC7862]の拡張になります。[RFC7863]から生成された外部データ表現（XDR）[RFC4506]の上に構築されています。"
    },
    {
      "indent": 0,
      "text": "1.1. Definitions",
      "section_title": true,
      "ja": "1.1. 定義"
    },
    {
      "indent": 3,
      "text": "For a more comprehensive set of definitions, see Section 1.1 of [RFC8435].",
      "ja": "より包括的な定義セットについては、[RFC8435]のセクション1.1を参照してください。"
    },
    {
      "indent": 3,
      "text": "(file) data:",
      "ja": "（ファイル）データ："
    },
    {
      "indent": 12,
      "text": "that part of the file system object that contains the data to be read or written. It is the contents of the object rather than the attributes of the object.",
      "ja": "読み取られるデータを含むファイルシステムオブジェクトのその部分。オブジェクトの属性ではなく、オブジェクトの内容です。"
    },
    {
      "indent": 3,
      "text": "data server (DS):",
      "ja": "データサーバー（DS）："
    },
    {
      "indent": 12,
      "text": "a pNFS server that provides the file's data when the file system object is accessed over a file-based protocol.",
      "ja": "ファイルシステムオブジェクトがファイルベースのプロトコルを介してアクセスされるときにファイルのデータを提供するPNFSサーバー。"
    },
    {
      "indent": 3,
      "text": "(file) metadata:",
      "ja": "（ファイル）メタデータ："
    },
    {
      "indent": 12,
      "text": "the part of the file system object that contains various descriptive data relevant to the file object, as opposed to the file data itself. This could include the time of last modification, access time, EOF position, etc.",
      "ja": "ファイルデータ自体とは対照的に、ファイルオブジェクトに関連するさまざまな記述データを含むファイルシステムオブジェクトの部分。これには、最後の変更の時間、アクセス時間、EOFポジションなどが含まれます。"
    },
    {
      "indent": 3,
      "text": "metadata server (MDS):",
      "ja": "メタデータサーバー（MDS）："
    },
    {
      "indent": 12,
      "text": "the pNFS server that provides metadata information for a file system object.",
      "ja": "ファイルシステムオブジェクトのメタデータ情報を提供するPNFSサーバー。"
    },
    {
      "indent": 3,
      "text": "storage device:",
      "ja": "ストレージデバイス："
    },
    {
      "indent": 12,
      "text": "the target to which clients may direct I/O requests when they hold an appropriate layout. Note that each data server is a storage device but that some storage device are not data servers. (See Section 2.1 of [RFC8434] for a discussion on the difference between a data server and a storage device.)",
      "ja": "クライアントが適切なレイアウトを保持したときにI/O要求を指示するターゲット。各データサーバーはストレージデバイスですが、一部のストレージデバイスはデータサーバーではないことに注意してください。（データサーバーとストレージデバイスの違いに関する説明については、[RFC8434]のセクション2.1を参照してください。）"
    },
    {
      "indent": 3,
      "text": "weak cache consistency (WCC):",
      "ja": "弱いキャッシュの一貫性（WCC）："
    },
    {
      "indent": 12,
      "text": "the mechanism in NFSv3 that allows the client to check for file attribute changes before and after an operation (see Section 2.6 of [RFC1813]).",
      "ja": "クライアントが操作の前後にファイル属性の変更をチェックできるようにするNFSV3のメカニズム（[RFC1813]のセクション2.6を参照）。"
    },
    {
      "indent": 0,
      "text": "1.2. Requirements Language",
      "section_title": true,
      "ja": "1.2. 要件言語"
    },
    {
      "indent": 3,
      "text": "The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.",
      "ja": "このドキュメント内のキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、および「OPTIONAL」は、ここに示すようにすべて大文字で表示されている場合にのみ、BCP 14 [RFC2119] [RFC8174] で説明されているように解釈されます。"
    },
    {
      "indent": 0,
      "text": "2. Weak Cache Consistency (WCC)",
      "section_title": true,
      "ja": "2. 弱いキャッシュの一貫性（WCC）"
    },
    {
      "indent": 3,
      "text": "A pNFS layout type enables the metadata server to inform the client of both the storage protocol and the locations of the data that the client should use when communicating with the storage devices. The flexible file layout type, as specified in [RFC8435], describes how data servers using NFSv3 can be accessed. The client is restricted to performing the following NFSv3 operations on the filehandles provided in the layout: READ, WRITE, and COMMIT (see Sections 3.3.6, 3.3.7, and 3.3.21 of [RFC1813], respectively). In other words, the client may only use NFSv3 operations that act directly on the data portion of the file.",
      "ja": "PNFSレイアウトタイプにより、メタデータサーバーは、ストレージプロトコルとストレージデバイスと通信するときにクライアントが使用するデータの場所の両方をクライアントに通知できます。[RFC8435]で指定されている柔軟なファイルレイアウトタイプは、NFSV3を使用したデータサーバーにアクセスする方法を説明しています。クライアントは、レイアウトで提供されるファイルハンドルで次のNFSV3操作を実行することに制限されています：読み取り、書き込み、およびコミット（それぞれ[RFC1813]のセクション3.3.6、3.3.7、および3.3.21を参照）。つまり、クライアントは、ファイルのデータ部分に直接作用するNFSV3操作のみを使用できます。"
    },
    {
      "indent": 3,
      "text": "Because there is no control protocol (see [RFC8434]) possible with all data servers, NFSv3 is used as the control protocol. As such, the following NFSv3 operations are commonly used by the metadata server: CREATE, GETATTR, and SETATTR (see Sections 3.3.8, 3.3.1, and 3.3.2 of [RFC1813], respectively). That is, the metadata server is only allowed to use NFSv3 operations that directly act on the metadata portion of the data file. GETATTR allows the metadata server to mainly retrieve the mtime (modify time), ctime (change time), and atime (access time). The metadata server can use this information to determine if the client modified the file whilst it held an iomode of LAYOUTIOMODE4_RW (see Section 3.3.20 of [RFC8881]). Then it can determine the following for the metadata file: time_modify, time_metadata, and time_access (see Sections 5.8.2.43, 5.8.2.42, and 5.8.2.37 of [RFC8881], respectively). That is, it can determine the information to return to clients in an NFSv4.2 GETATTR response.",
      "ja": "すべてのデータサーバーで制御プロトコル（[RFC8434を参照]を参照）がないため、NFSV3は制御プロトコルとして使用されます。そのため、次のNFSV3操作は、メタデータサーバーで一般的に使用されています：Create、GetATTR、およびSetATTR（それぞれ[RFC1813]のセクション3.3.8、3.3.1、および3.3.2を参照）。つまり、メタデータサーバーは、データファイルのメタデータ部分に直接作用するNFSV3操作のみを使用できます。GetATTRを使用すると、メタデータサーバーは主にMTIME（時間の変更）、Ctime（変更時間）、およびATIME（アクセス時間）を取得できます。メタデータサーバーは、この情報を使用して、クライアントがファイルを変更した間にファイルを変更したかどうかを判断できます。次に、メタデータファイルの以下を決定できます：time_modify、time_metadata、およびtime_access（それぞれセクション5.8.2.43、5.8.2.42、および5.8.2.37の[RFC8881]を参照）。つまり、NFSV4.2 getATTR応答でクライアントに戻る情報を決定できます。"
    },
    {
      "indent": 3,
      "text": "For example, the metadata server might issue an NFSv3 GETATTR operation to the data server, which is typically triggered by a client's NFSv4 GETATTR request to the metadata server. In addition to the cost of each individual GETATTR operation, the data server can be overwhelmed by a large volume of such requests. NFSv3 addressed a similar challenge by including a post-operation attribute in the READ and WRITE operations to report WCC data (see Section 2.6 of [RFC1813]).",
      "ja": "たとえば、メタデータサーバーは、データサーバーにNFSV3 getATTR操作を発行する場合があります。これは、通常、メタデータサーバーへのクライアントのNFSV4 getATTR要求によってトリガーされます。個々のgetATTR操作のコストに加えて、データサーバーは、そのようなリクエストの大量に圧倒される可能性があります。NFSV3は、WCCデータを報告するために読み取りおよび書き込み操作に操作後の属性を含めることにより、同様の課題に対処しました（[RFC1813]のセクション2.6を参照）。"
    },
    {
      "indent": 3,
      "text": "Each NFSv3 operation entails a single round trip between the client and server. Consequently, issuing a WRITE followed by a GETATTR would require two round trips. In that situation, the retrieved attribute information is regarded as having strict server-client consistency. By contrast, NFSv4 enables a WRITE and GETATTR to be combined within a compound operation, which requires only one round trip. This combined approach is likewise considered to have strict server-client consistency. Essentially, NFSv4 READ and WRITE operations omit post-operation attributes, allowing the client to determine whether it requires that information.",
      "ja": "各NFSV3操作には、クライアントとサーバーの間の1回の丸い旅行が必要です。その結果、getattrがそれに続く書き込みを発行するには、2回の往復が必要です。そのような状況では、取得された属性情報は、厳密なサーバークライアントの一貫性を有すると見なされます。対照的に、NFSV4は、複合操作内で書き込みとgetattrを組み合わせることができます。これには、往復が1回だけ必要です。同様に、この結合されたアプローチは、サーバークライアントの厳密な一貫性を持つと同様に考えられます。基本的に、NFSV4の読み取りおよび書き込み操作は、操作後の属性を省略し、クライアントがその情報を必要とするかどうかを判断できるようにします。"
    },
    {
      "indent": 3,
      "text": "Whilst NFSv4 got rid of the requirement for WCC information to be supplied by the WRITE or READ operations, the introduction of pNFS reintroduces the same problem. The metadata server has to communicate with the data server in order to get the data that could be provided by a WCC model.",
      "ja": "NFSV4は、WCC情報が書き込み操作または読み取り操作によって提供される要件を取り除きましたが、PNFの導入は同じ問題を再導入します。メタデータサーバーは、WCCモデルで提供できるデータを取得するために、データサーバーと通信する必要があります。"
    },
    {
      "indent": 3,
      "text": "With the flexible file layout type, the client can leverage the NFSv3 WCC to service the proxying of times (see Section 5 of [RFC9754]), but the granularity of this data is limited. With client-side mirroring (see Section 8 of [RFC8435]), the client has to aggregate the N mirrored files in order to send one piece of information instead of N pieces of information. Also, the client is limited to sending that information only when it returns the delegation.",
      "ja": "柔軟なファイルレイアウトタイプを使用すると、クライアントはNFSV3 WCCを活用して時間のプロキシにサービスを提供できます（[RFC9754]のセクション5を参照）が、このデータの粒度は限られています。クライアント側ミラーリング（[RFC8435]のセクション8を参照）を使用すると、クライアントはNミラー化されたファイルを集約して、N情報の代わりに1つの情報を送信する必要があります。また、クライアントは、代表団を返すときにのみその情報を送信することに限定されます。"
    },
    {
      "indent": 3,
      "text": "This document introduces a new NFSv4.2 operation, LAYOUT_WCC, which enables the client to provide the metadata server with information obtained from the data server. The client is responsible for gathering the NFSv3 WCC data, returned by the three permissible NFSv3 operations, and conveying it back to the metadata server as part of NFSv4.2 attributes. The metadata server MAY therefore avoid issuing costly NFSv3 GETATTR calls to the data servers. Because this approach relies on a weak model, the metadata server MAY still perform these calls if it chooses to strengthen the model.",
      "ja": "このドキュメントでは、新しいNFSV4.2操作Layout_WCCを導入します。これにより、クライアントはメタデータサーバーにデータサーバーから取得した情報を提供できます。クライアントは、NFSV3 WCCデータの収集を担当し、3つの許容されるNFSV3操作によって返され、NFSV4.2属性の一部としてメタデータサーバーに戻します。したがって、メタデータサーバーは、データサーバーへの費用のかかるNFSV3 GetATTR呼び出しの発行を避ける場合があります。このアプローチは弱いモデルに依存しているため、メタデータサーバーは、モデルの強化を選択した場合、これらの呼び出しを実行する場合があります。"
    },
    {
      "indent": 0,
      "text": "3. Operation 77: LAYOUT_WCC - Layout Weak Cache Consistency",
      "section_title": true,
      "ja": "3. 操作77：layout_wcc-レイアウトの弱いキャッシュの一貫性"
    },
    {
      "indent": 0,
      "text": "3.1. ARGUMENT",
      "section_title": true,
      "ja": "3.1. 口論"
    },
    {
      "indent": 3,
      "text": "/// struct LAYOUT_WCC4args {\n///         stateid4        lowa_stateid;\n///         layouttype4     lowa_type;\n///         opaque          lowa_body<>;\n/// };",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "stateid4 is defined in Section 3.3.12 of [RFC8881]. layouttype4 is defined in Section 3.3.13 of [RFC8881].",
      "ja": "StateID4は、[RFC881]のセクション3.3.12で定義されています。layoutType4は、[RFC8881]のセクション3.3.13で定義されています。"
    },
    {
      "indent": 0,
      "text": "3.2. RESULT",
      "section_title": true,
      "ja": "3.2. 結果"
    },
    {
      "indent": 3,
      "text": "/// struct LAYOUT_WCC4res {\n///         nfsstat4                lowr_status;\n/// };",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "nfsstat4 is defined in Section 3.2 of [RFC8881].",
      "ja": "NFSSTAT4は、[RFC881]のセクション3.2で定義されています。"
    },
    {
      "indent": 0,
      "text": "3.3. DESCRIPTION",
      "section_title": true,
      "ja": "3.3. 説明"
    },
    {
      "indent": 3,
      "text": "The current filehandle and the lowa_stateid identify the specific layout for the LAYOUT_WCC operation. The lowa_type indicates how to interpret the layout-type-specific payload contained in the lowa_body field. The lowa_type is the corresponding value from the \"pNFS Layout Types\" IANA registry for the layout type being used.",
      "ja": "現在のFileHandleとlowa_stateIdは、layout_wcc操作の特定のレイアウトを識別します。lowa_typeは、lowa_bodyフィールドに含まれるレイアウトタイプ固有のペイロードを解釈する方法を示しています。LOWA_TYPEは、使用されているレイアウトタイプの「PNFSレイアウトタイプ」IANAレジストリからの対応する値です。"
    },
    {
      "indent": 3,
      "text": "The lowa_body contains the data file attributes. The client is responsible for mapping NFSv3 post-operation attributes to the fattr4 representation. Similar to the behavior of post-operation attributes, the client may ignore these attributes, and the server may also choose to ignore any attributes included in LAYOUT_WCC. However, the server can use these attributes to avoid querying the data server for data file attributes. Because these attributes are optional and the client has no recourse if the server opts to disregard them, there is no requirement to return a bitmap4 indicating which attributes have been accepted in the LAYOUT_WCC result.",
      "ja": "lowa_bodyには、データファイル属性が含まれています。クライアントは、FATTR4表現にNFSV3操作後の属性をマッピングする責任があります。操作後の属性の動作と同様に、クライアントはこれらの属性を無視する場合があり、サーバーはlayout_wccに含まれる属性を無視することも選択できます。ただし、サーバーはこれらの属性を使用して、データファイル属性のデータサーバーのクエリを避けることができます。これらの属性はオプションであり、サーバーがそれらを無視することを選択した場合、クライアントは頼りにしていないため、レイアウト_WCCの結果でどの属性が受け入れられているかを示すBitmap4を返す必要はありません。"
    },
    {
      "indent": 0,
      "text": "3.4. Implementation",
      "section_title": true,
      "ja": "3.4. 実装"
    },
    {
      "indent": 0,
      "text": "3.4.1. Examples of When to Use LAYOUT_WCC",
      "section_title": true,
      "ja": "3.4.1. Layout_WCCを使用するタイミングの例"
    },
    {
      "indent": 3,
      "text": "The only way for the metadata server to detect modifications to the data file is to probe the data servers via a GETATTR. It can compare the mtime results across multiple calls to detect an NFSv3 WRITE operation by the client. Likewise, the atime results indicate the client having issued an NFSv3 READ operation. As such, the client can leverage the LAYOUT_WCC operation whenever it has the belief that the metadata server would need to refresh the attributes of the data files. While the client can send a LAYOUT_WCC at any time, there are times it will want to do this operation in order to avoid having the metadata server issue NFSv3 GETATTR requests to the data servers:",
      "ja": "メタデータサーバーがデータファイルの変更を検出する唯一の方法は、getattrを介してデータサーバーをプローブすることです。複数の呼び出しでMTIMEの結果を比較して、クライアントによるNFSV3書き込み操作を検出できます。同様に、ATIMEの結果は、クライアントがNFSV3読み取り操作を発行したことを示しています。そのため、クライアントは、メタデータサーバーがデータファイルの属性を更新する必要があるという信念がある場合はいつでも、レイアウト_WCC操作を活用できます。クライアントはいつでもlayout_wccを送信できますが、メタデータサーバーの発行nfsv3 getattrリクエストをデータサーバーに発行することを避けるために、この操作を行いたい場合があります。"
    },
    {
      "indent": 6,
      "text": "* Whenever it sends a GETATTR for any of the following attributes:",
      "ja": "* 次の属性のいずれかについてgetattrを送信するたびに："
    },
    {
      "indent": 12,
      "text": "- size (see Section 5.8.1.5 of [RFC8881])",
      "ja": "- サイズ（[RFC8881]のセクション5.8.1.5を参照）"
    },
    {
      "indent": 12,
      "text": "- space_used (see Section 5.8.2.35 of [RFC8881])",
      "ja": "- Space_used（[RFC8881]のセクション5.8.2.35を参照）"
    },
    {
      "indent": 12,
      "text": "- change (see Section 5.8.1.4 of [RFC8881])",
      "ja": "- 変更（[RFC8881]のセクション5.8.1.4を参照）"
    },
    {
      "indent": 12,
      "text": "- time_access (see Section 5.8.2.37 of [RFC8881])",
      "ja": "- time_access（[RFC8881]のセクション5.8.2.37を参照）"
    },
    {
      "indent": 12,
      "text": "- time_metadata (see Section 5.8.2.42 of [RFC8881])",
      "ja": "- time_metadata（[RFC8881]のセクション5.8.2.42を参照）"
    },
    {
      "indent": 12,
      "text": "- time_modify (see Section 5.8.2.43 of [RFC8881])",
      "ja": "- time_modify（[rfc8881]のセクション5.8.2.43を参照）"
    },
    {
      "indent": 6,
      "text": "* Whenever it sends an NFS4ERR_ACCESS error via LAYOUTRETURN or LAYOUTERROR. It could have already gotten the NFSv3 uid and gid values back in the WCC of the WRITE, READ, or COMMIT operation that got the error. Thus, it could report that information back to the metadata server, saving it from querying that information via an NFSv3 GETATTR.",
      "ja": "* LayoutreturnまたはLayouterrorを介してNFS4err_Accessエラーを送信するたびに。nfsv3 uidとgidの値を既に取得している可能性があります。したがって、その情報をメタデータサーバーに戻し、NFSV3 getATTRを介してその情報を照会することから保存することができます。"
    },
    {
      "indent": 6,
      "text": "* Whenever it sends a SETATTR to refresh the proxied times (see Section 5 of [RFC9754]). The metadata server will correlate these times in order to detect later modification to the data file.",
      "ja": "* Proxied Timesを更新するためにSetattrを送信するたびに（[RFC9754]のセクション5を参照）。メタデータサーバーは、これらの時間を相関させて、データファイルへの後の変更を検出します。"
    },
    {
      "indent": 0,
      "text": "3.4.2. Examples of What to Send in LAYOUT_WCC",
      "section_title": true,
      "ja": "3.4.2. layout_wccで送信するものの例"
    },
    {
      "indent": 3,
      "text": "The NFSv3 attributes returned in the WCC of WRITE, READ, and COMMIT operations are a smaller subset of what can be transmitted as an NFSv4 attribute. The mapping of NFSv3 to NFSv4 attributes is shown in Table 1. The LAYOUT_WCC MUST provide all of these attributes to the metadata server. Both the uid and gid are stringified into their respective attributes of owner and owner_group. In the case of NFS4ERR_ACCESS, the reason to provide these two attributes is that the metadata server can compare what it expects the values of the uid and gid of the data file to be versus the actual values. It can then repair the permissions as needed or modify the expected values it has cached.",
      "ja": "書き込み、読み取り、およびコミット操作のWCCで返されたNFSV3属性は、NFSV4属性として送信できるものの小さなサブセットです。NFSV3のNFSV4属性へのマッピングを表1に示します。Layout_WCCは、これらすべての属性をメタデータサーバーに提供する必要があります。UIDとGIDの両方が、所有者とowner_groupのそれぞれの属性に縛られています。NFS4err_Accessの場合、これら2つの属性を提供する理由は、メタデータサーバーが実際の値に対してデータファイルのUIDとGIDの値を予想するものを比較できることです。その後、必要に応じてアクセス許可を修復したり、キャッシュした期待値を変更したりできます。"
    },
    {
      "indent": 18,
      "text": "+=================+===================+\n| NFSv3 Attribute | NFSv4.2 Attribute |\n+=================+===================+\n| size            | size              |\n+-----------------+-------------------+\n| used            | space_used        |\n+-----------------+-------------------+\n| mode            | mode              |\n+-----------------+-------------------+\n| uid             | owner             |\n+-----------------+-------------------+\n| gid             | owner_group       |\n+-----------------+-------------------+\n| atime           | time_access       |\n+-----------------+-------------------+\n| mtime           | time_modify       |\n+-----------------+-------------------+\n| ctime           | time_metadata     |\n+-----------------+-------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 20,
      "text": "Table 1: NFSv3 to NFSv4.2 Attribute Mappings",
      "ja": "表1：NFSV3からNFSV4.2属性マッピング"
    },
    {
      "indent": 0,
      "text": "3.5. Allowed Errors",
      "section_title": true,
      "ja": "3.5. 許可されたエラー"
    },
    {
      "indent": 3,
      "text": "The LAYOUT_WCC operation can raise the errors listed in Table 2. When an error is encountered, the metadata server can decide to ignore the entire operation, or depending on the layout-type-specific payload, it could decide to apply a portion of the payload. Note that there are no new errors introduced for the LAYOUT_WCC operation and the errors in Table 2 are each defined in Section 15.1 of [RFC8881]. Table 2 can be considered as an extension of Section 15.2 of [RFC8881].",
      "ja": "Layout_WCC操作は、表2にリストされているエラーを上げることができます。エラーが発生した場合、メタデータサーバーは操作全体を無視するか、レイアウトタイプ固有のペイロードに応じて、ペイロードの一部を適用することを決定できます。Layout_WCC操作に導入された新しいエラーはなく、表2のエラーはそれぞれ[RFC8881]のセクション15.1で定義されていることに注意してください。表2は、[RFC8881]のセクション15.2の拡張と見なすことができます。"
    },
    {
      "indent": 4,
      "text": "+============+====================================================+\n| Operation  | Errors                                             |\n+============+====================================================+\n| LAYOUT_WCC | NFS4ERR_ADMIN_REVOKED, NFS4ERR_BADXDR,             |\n|            | NFS4ERR_BAD_STATEID, NFS4ERR_DEADSESSION,          |\n|            | NFS4ERR_DELAY, NFS4ERR_DELEG_REVOKED,              |\n|            | NFS4ERR_EXPIRED, NFS4ERR_FHEXPIRED, NFS4ERR_GRACE, |\n|            | NFS4ERR_INVAL, NFS4ERR_ISDIR, NFS4ERR_MOVED,       |\n|            | NFS4ERR_NOFILEHANDLE, NFS4ERR_NOTSUPP,             |\n|            | NFS4ERR_NO_GRACE, NFS4ERR_OLD_STATEID,             |\n|            | NFS4ERR_OP_NOT_IN_SESSION, NFS4ERR_REP_TOO_BIG,    |\n|            | NFS4ERR_REP_TOO_BIG_TO_CACHE, NFS4ERR_REQ_TOO_BIG, |\n|            | NFS4ERR_RETRY_UNCACHED_REP, NFS4ERR_SERVERFAULT,   |\n|            | NFS4ERR_STALE, NFS4ERR_TOO_MANY_OPS,               |\n|            | NFS4ERR_UNKNOWN_LAYOUTTYPE, NFS4ERR_WRONG_CRED,    |\n|            | NFS4ERR_WRONG_TYPE                                 |\n+------------+----------------------------------------------------+",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 17,
      "text": "Table 2: Operations and Their Valid Errors",
      "ja": "表2：操作とその有効なエラー"
    },
    {
      "indent": 0,
      "text": "3.6. Extension of Existing Implementations",
      "section_title": true,
      "ja": "3.6. 既存の実装の拡張"
    },
    {
      "indent": 3,
      "text": "The new LAYOUT_WCC operation is OPTIONAL for both NFSv4.2 [RFC7863] and the flexible file layout type [RFC8435].",
      "ja": "NFSV4.2 [RFC7863]と柔軟なファイルレイアウトタイプ[RFC8435]の両方で、新しいLayout_WCC操作はオプションです。"
    },
    {
      "indent": 0,
      "text": "3.7. Flexible File Layout Type",
      "section_title": true,
      "ja": "3.7. 柔軟なファイルレイアウトタイプ"
    },
    {
      "indent": 3,
      "text": "/// struct ff_data_server_wcc4 {\n///             deviceid4            ffdsw_deviceid;\n///             stateid4             ffdsw_stateid;\n///             nfs_fh4              ffdsw_fh_vers<>;\n///             fattr4               ffdsw_attributes;\n/// };\n///\n/// struct ff_mirror_wcc4 {\n///             ff_data_server_wcc4  ffmw_data_servers<>;\n/// };\n///\n/// struct ff_layout_wcc4 {\n///             ff_mirror_wcc4       fflw_mirrors<>;\n/// };",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The results specific to the flexible file layout type MUST correspond to the ff_layout4 data structure as defined in Section 5.1 of [RFC8435]. There MUST be a one-to-one correspondence between the following:",
      "ja": "柔軟なファイルレイアウトタイプに固有の結果は、[RFC8435]のセクション5.1で定義されているように、FF_Layout4データ構造に対応する必要があります。次の間に1対1の対応が必要です。"
    },
    {
      "indent": 6,
      "text": "* ff_data_server4 -> ff_data_server_wcc4",
      "ja": "* FF_DATA_SERVER4-> FF_DATA_SERVER_WCC4"
    },
    {
      "indent": 6,
      "text": "* ff_mirror4 -> ff_mirror_wcc4",
      "ja": "* ff_mirror4-> ff_mirror_wcc4"
    },
    {
      "indent": 6,
      "text": "* ff_layout4 -> ff_layout_wcc4",
      "ja": "* ff_layout4-> ff_layout_wcc4"
    },
    {
      "indent": 3,
      "text": "Each ff_layout4 has an array of ff_mirror4, which has an array of ff_data_server4. Based on the current filehandle and the lowa_stateid, the server can match the reported attributes.",
      "ja": "各ff_layout4には、ff_data_server4の配列があるff_mirror4の配列があります。現在のファイルハンドルとlowa_stateIDに基づいて、サーバーは報告された属性と一致させることができます。"
    },
    {
      "indent": 3,
      "text": "But the positional correspondence between the elements is not sufficient to determine the attributes to update. Consider the case where a layout has three mirrors and two of them have updated attributes but the third does not. A client could decide to present all three mirrors, with one mirror having an attribute mask with no attributes present. Or it could decide to present only the two mirrors that had been changed.",
      "ja": "しかし、要素間の位置対応は、更新する属性を決定するのに十分ではありません。レイアウトには3つのミラーがあり、そのうち2つが更新された属性があるが、3つ目は属性に属していない場合を考えてみましょう。クライアントは、3つのミラーすべてを提示することを決定できます。1つのミラーには、属性が存在しない属性マスクがあります。または、変更された2つのミラーのみを提示することを決定することもできます。"
    },
    {
      "indent": 3,
      "text": "In either case, the combination of ffdsw_deviceid, ffdsw_stateid, and ffdsw_fh_vers will uniquely identify the attributes to be updated. All three arguments are required. A layout might have multiple data files on the same storage device, in which case the ffdsw_deviceid and ffdsw_stateid would match, but the ffdsw_fh_vers would not.",
      "ja": "どちらの場合でも、FFDSW_DeviceID、FFDSW_STATEID、およびFFDSW_FH_VERSの組み合わせにより、更新される属性が一意に識別されます。3つの引数はすべて必要です。レイアウトには、同じストレージデバイスに複数のデータファイルがある場合があります。この場合、FFDSW_DeviceIDとFFDSW_STATEIDは一致しますが、FFDSW_FH_VERSはそうしません。"
    },
    {
      "indent": 3,
      "text": "The ffdsw_attributes are processed similar to the obj_attributes in the SETATTR arguments (see Section 18.30 of [RFC8881]).",
      "ja": "FFDSW_ATTRIBUTESは、SETATTR引数のOBJ_ATTRIBUTESと同様に処理されます（[RFC8881]のセクション18.30を参照）。"
    },
    {
      "indent": 0,
      "text": "4. Extraction of XDR",
      "section_title": true,
      "ja": "4. XDRの抽出"
    },
    {
      "indent": 3,
      "text": "This document contains the XDR [RFC4506] description of the new NFSv4.2 operation LAYOUT_WCC. The XDR description is embedded in this document in a way that makes it simple for the reader to extract into a ready-to-compile form. The reader can feed this document into the following shell script to produce the machine-readable XDR description of the new NFSv4.2 operation LAYOUT_WCC.",
      "ja": "このドキュメントには、新しいNFSV4.2操作Layout_WCCのXDR [RFC4506]の説明が含まれています。XDRの説明は、このドキュメントに埋め込まれており、読者がすぐにコンパイルできるフォームに抽出できるようにします。読者は、このドキュメントを次のシェルスクリプトに送り込み、新しいNFSV4.2操作layout_WCCの機械可読XDR説明を作成できます。"
    },
    {
      "indent": 3,
      "text": "#!/bin/sh\ngrep '^ *///' $* | sed 's?^ */// ??' | sed 's?^ *///$??'",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "That is, if the above script is stored in a file called 'extract.sh', and this document is in a file called 'spec.txt', then the reader can do:",
      "ja": "つまり、上記のスクリプトが「extract.sh」というファイルに保存され、このドキュメントが「spec.txt」というファイルにある場合、読者は次のことができます。"
    },
    {
      "indent": 3,
      "text": "sh extract.sh < spec.txt > layout_wcc.x",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "The effect of the script is to remove leading blank space from each line, plus a sentinel sequence of '///'. XDR descriptions with the sentinel sequence are embedded throughout the document.",
      "ja": "スクリプトの効果は、各ラインから先頭の空白スペースを削除し、さらに「///」のセンチネルシーケンスを削除することです。センチネルシーケンスを使用したXDRの説明は、ドキュメント全体に埋め込まれています。"
    },
    {
      "indent": 3,
      "text": "Note that the XDR code contained in this document depends on types from the NFSv4.2 nfs4_prot.x file (generated from [RFC7863]). This includes both nfs types that end with a 4 (such as offset4 and length4) as well as more generic types (such as uint32_t and uint64_t).",
      "ja": "このドキュメントに含まれるXDRコードは、NFSV4.2 NFS4_PROT.Xファイル（[RFC7863]から生成）のタイプに依存することに注意してください。これには、4（Offset4やLength4など）とより一般的なタイプ（UINT32_TやUINT64_Tなど）で終了するNFSタイプの両方が含まれます。"
    },
    {
      "indent": 3,
      "text": "While the XDR can be appended to that from [RFC7863], the various code snippets belong in their respective areas of that XDR.",
      "ja": "XDRは[RFC7863]からそれに追加できますが、さまざまなコードスニペットはそのXDRのそれぞれの領域に属します。"
    },
    {
      "indent": 0,
      "text": "5. Security Considerations",
      "section_title": true,
      "ja": "5. セキュリティに関する考慮事項"
    },
    {
      "indent": 3,
      "text": "There are no new security considerations beyond those in [RFC8435].",
      "ja": "[RFC8435]のセキュリティを超えた新しいセキュリティ上の考慮事項はありません。"
    },
    {
      "indent": 0,
      "text": "6. IANA Considerations",
      "section_title": true,
      "ja": "6. IANAの考慮事項"
    },
    {
      "indent": 3,
      "text": "This document has no IANA actions.",
      "ja": "このドキュメントにはIANAアクションがありません。"
    },
    {
      "indent": 0,
      "text": "7. References",
      "section_title": true,
      "ja": "7. 参考文献"
    },
    {
      "indent": 0,
      "text": "7.1. Normative References",
      "section_title": true,
      "ja": "7.1. 引用文献"
    },
    {
      "indent": 3,
      "text": "[RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n           Requirement Levels\", BCP 14, RFC 2119,\n           DOI 10.17487/RFC2119, March 1997,\n           <https://www.rfc-editor.org/info/rfc2119>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC4506]  Eisler, M., Ed., \"XDR: External Data Representation\n           Standard\", STD 67, RFC 4506, DOI 10.17487/RFC4506, May\n           2006, <https://www.rfc-editor.org/info/rfc4506>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC7862]  Haynes, T., \"Network File System (NFS) Version 4 Minor\n           Version 2 Protocol\", RFC 7862, DOI 10.17487/RFC7862,\n           November 2016, <https://www.rfc-editor.org/info/rfc7862>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC7863]  Haynes, T., \"Network File System (NFS) Version 4 Minor\n           Version 2 External Data Representation Standard (XDR)\n           Description\", RFC 7863, DOI 10.17487/RFC7863, November\n           2016, <https://www.rfc-editor.org/info/rfc7863>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n           2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n           May 2017, <https://www.rfc-editor.org/info/rfc8174>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8178]  Noveck, D., \"Rules for NFSv4 Extensions and Minor\n           Versions\", RFC 8178, DOI 10.17487/RFC8178, July 2017,\n           <https://www.rfc-editor.org/info/rfc8178>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8434]  Haynes, T., \"Requirements for Parallel NFS (pNFS) Layout\n           Types\", RFC 8434, DOI 10.17487/RFC8434, August 2018,\n           <https://www.rfc-editor.org/info/rfc8434>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8435]  Halevy, B. and T. Haynes, \"Parallel NFS (pNFS) Flexible\n           File Layout\", RFC 8435, DOI 10.17487/RFC8435, August 2018,\n           <https://www.rfc-editor.org/info/rfc8435>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC8881]  Noveck, D., Ed. and C. Lever, \"Network File System (NFS)\n           Version 4 Minor Version 1 Protocol\", RFC 8881,\n           DOI 10.17487/RFC8881, August 2020,\n           <https://www.rfc-editor.org/info/rfc8881>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "[RFC9754]  Haynes, T. and T. Myklebust, \"Extensions for Opening and\n           Delegating Files in NFSv4.2\", RFC 9754,\n           DOI 10.17487/RFC9754, March 2025,\n           <https://www.rfc-editor.org/info/rfc9754>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "7.2. Informative References",
      "section_title": true,
      "ja": "7.2. 参考引用"
    },
    {
      "indent": 3,
      "text": "[RFC1813]  Callaghan, B., Pawlowski, B., and P. Staubach, \"NFS\n           Version 3 Protocol Specification\", RFC 1813,\n           DOI 10.17487/RFC1813, June 1995,\n           <https://www.rfc-editor.org/info/rfc1813>.",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 0,
      "text": "Acknowledgments",
      "section_title": true,
      "ja": "謝辞"
    },
    {
      "indent": 3,
      "text": "Dave Noveck, Tigran Mkrtchyan, and Rick Macklem provided reviews of the document.",
      "ja": "Dave Noveck、Tigran Mkrtchyan、およびRick Macklemは、文書のレビューを提供しました。"
    },
    {
      "indent": 0,
      "text": "Authors' Addresses",
      "section_title": true,
      "ja": "著者のアドレス"
    },
    {
      "indent": 3,
      "text": "Thomas Haynes\nHammerspace\nEmail: loghyr@gmail.com",
      "raw": true,
      "ja": ""
    },
    {
      "indent": 3,
      "text": "Trond Myklebust\nHammerspace\nEmail: trondmy@hammerspace.com",
      "raw": true,
      "ja": ""
    }
  ]
}